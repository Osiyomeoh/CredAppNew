import Config from "@truffle/config";
import type { SourcesWithDependenciesArgs, SourcesArgs } from "./types";
export { CompilerSupplier } from "./compilerSupplier";
export * as Shims from "./shims";
export { compileWithPragmaAnalysis } from "./compileWithPragmaAnalysis";
export { Profiler } from "./profiler";
export { Cache } from "./compilerSupplier/Cache";
export * as LoadingStrategies from "./compilerSupplier/loadingStrategies";
export { shouldIncludePath } from "./profiler/shouldIncludePath";
export { run } from "./run";
export { Parser } from "./parser";
export * as RangeUtils from "./compilerSupplier/rangeUtils";
export declare const Compile: {
    sources({ sources, options }: SourcesArgs): Promise<import("@truffle/compile-common").WorkflowCompileResult>;
    all(options: Config): Promise<any>;
    necessary(options: Config): Promise<any>;
    sourcesWithDependencies({ paths, options }: SourcesWithDependenciesArgs): Promise<any>;
    sourcesWithPragmaAnalysis({ paths, options }: {
        paths: any;
        options: any;
    }): Promise<import("@truffle/compile-common").WorkflowCompileResult>;
};
