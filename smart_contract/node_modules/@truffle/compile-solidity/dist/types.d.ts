import Common from "@truffle/compile-common";
import type Config from "@truffle/config";
export declare type SourcesWithDependenciesArgs = {
    paths: string[];
    options: Config;
};
export declare type SourcesArgs = {
    sources: {
        [key: string]: string;
    };
    options: Config;
};
export declare type Targets = string[];
export declare type CompilerOutput = {
    contracts: {
        [path: string]: object;
    };
    sources: {
        [path: string]: {
            ast?: object;
            legacyAST?: object;
            id: number;
        };
    };
    errors?: any[];
};
export declare type PrepareSourcesArgs = {
    sources: Common.Sources.Sources;
};
export declare type ProcessAllSourcesArgs = {
    sources: Common.Sources.Sources;
    compilerOutput: CompilerOutput;
    originalSourcePaths: Common.Sources.PathMapping;
    language: string;
};
export declare type PrepareCompilerInputArgs = {
    sources: Common.Sources.Sources;
    targets: Targets;
    language: string;
    settings: object;
    modelCheckerSettings: object;
};
export declare type InternalOptions = {
    language?: string;
    noTransform?: boolean;
    solc?: any;
};
export declare type PreparedSources = {
    [path: string]: {
        content: string;
    };
};
export declare type ProcessContractsArgs = {
    compilerOutput: CompilerOutput;
    sources: Common.Sources.Sources;
    originalSourcePaths: Common.Sources.PathMapping;
    solcVersion: string;
};
export declare type Contracts = {
    [path: string]: {
        [name: string]: any;
    };
};
