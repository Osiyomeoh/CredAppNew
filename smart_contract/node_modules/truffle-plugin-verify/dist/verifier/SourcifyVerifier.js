"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourcifyVerifier = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../constants");
const util_1 = require("../util");
const AbstractVerifier_1 = require("./AbstractVerifier");
class SourcifyVerifier extends AbstractVerifier_1.AbstractVerifier {
    constructor(options) {
        super(options);
        this.name = 'sourcify';
    }
    getContractUrl(address) {
        return `https://sourcify.dev/#/lookup/${address}`;
    }
    verifyAll(contractNameAddressPairs) {
        const _super = Object.create(null, {
            verifyAll: { get: () => super.verifyAll }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkBoundaries();
            yield _super.verifyAll.call(this, contractNameAddressPairs);
        });
    }
    verifyContract(artifact) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkBoundaries();
            const res = yield this.sendVerifyRequest(artifact);
            (0, util_1.enforceOrThrow)(((_b = (_a = res.data) === null || _a === void 0 ? void 0 : _a.result) === null || _b === void 0 ? void 0 : _b.length) === 1, `Failed to connect to Sourcify API at url ${constants_1.SOURCIFY_API_URL}`);
            const [contract] = res.data.result;
            if (contract.storageTimestamp) {
                return constants_1.VerificationStatus.ALREADY_VERIFIED;
            }
            return constants_1.VerificationStatus.SUCCESS;
        });
    }
    verifyProxyContract(proxyArtifact, implementationName, implementationAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkBoundaries();
            if (this.options.customProxy) {
                this.logger.info(`Verifying custom proxy contract ${this.options.customProxy} at ${proxyArtifact.networks[`${this.options.networkId}`].address}`);
                yield this.verifyContract(proxyArtifact);
            }
            const implementationArtifact = (0, util_1.deepCopy)((0, util_1.getArtifact)(implementationName, this.options, this.logger));
            implementationArtifact.networks[`${this.options.networkId}`] = { address: implementationAddress };
            this.logger.info(`Verifying proxy implementation ${implementationName} at ${implementationAddress}`);
            const status = yield this.verifyContract(implementationArtifact);
            return status;
        });
    }
    sendVerifyRequest(artifact) {
        return __awaiter(this, void 0, void 0, function* () {
            const inputJSON = yield (0, util_1.getInputJSON)(artifact, this.options, this.logger);
            const files = {};
            Object.keys(inputJSON.sources).forEach((path) => {
                files[path.replace(/^.*[\\/]/, '')] = inputJSON.sources[path].content;
            });
            files['metadata.json'] = JSON.stringify(JSON.parse(artifact.metadata));
            const postQueries = {
                address: artifact.networks[`${this.options.networkId}`].address,
                chain: `${this.options.chainId}`,
                files,
            };
            try {
                this.logger.debug('Sending verify request with POST arguments:');
                (0, util_1.logObject)(this.logger, 'debug', postQueries, 2);
                return yield axios_1.default.post(constants_1.SOURCIFY_API_URL, postQueries);
            }
            catch (error) {
                this.logger.debug(error.message);
                this.logger.debug(error.response.data.message);
                throw new Error(`Failed to connect to Sourcify API at url ${constants_1.SOURCIFY_API_URL}`);
            }
        });
    }
    checkBoundaries() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, util_1.enforceOrThrow)(yield this.isSupportedChain(this.options.chainId), `Sourcify has no support for network ${this.options.networkName} with chain id ${this.options.chainId}`);
        });
    }
    isSupportedChain(chainId) {
        return __awaiter(this, void 0, void 0, function* () {
            const supportedChains = yield this.getSupportedChains();
            return supportedChains.includes(chainId);
        });
    }
    getSupportedChains() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.supportedChainIds)
                return this.supportedChainIds;
            const chainsUrl = `${constants_1.SOURCIFY_API_URL}chains`;
            try {
                this.logger.debug(`Fetching supported chains from ${chainsUrl}`);
                const { data } = yield axios_1.default.get(chainsUrl);
                const supportedChainIds = data.filter((chain) => !!(chain === null || chain === void 0 ? void 0 : chain.supported)).map((chain) => chain.chainId);
                this.supportedChainIds = supportedChainIds;
                return supportedChainIds;
            }
            catch (error) {
                throw new Error(`Failed to connect to Sourcify API at url ${chainsUrl}`);
            }
        });
    }
}
exports.SourcifyVerifier = SourcifyVerifier;
