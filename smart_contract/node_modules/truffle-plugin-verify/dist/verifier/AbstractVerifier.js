"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractVerifier = void 0;
const constants_1 = require("../constants");
const util_1 = require("../util");
const cliLogger = require('cli-logger');
class AbstractVerifier {
    constructor(options) {
        this.options = options;
        this.logger = cliLogger({ level: 'info', prefix: () => constants_1.INDENT });
        if (options.debug)
            this.logger.level('debug');
    }
    verifyAll(contractNameAddressPairs) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const failedContracts = [];
            for (const contractNameAddressPair of contractNameAddressPairs) {
                this.logger.info(`Verifying ${contractNameAddressPair}`);
                try {
                    const [contractName, contractAddress] = contractNameAddressPair.split('@');
                    // If we pass a custom proxy contract, we use its artifact to trigger proxy verification
                    const artifact = (0, util_1.getArtifact)((_a = this.options.customProxy) !== null && _a !== void 0 ? _a : contractName, this.options, this.logger);
                    if (contractAddress) {
                        this.logger.debug(`Custom address ${contractAddress} specified`);
                        artifact.networks[`${this.options.networkId}`] = Object.assign(Object.assign({}, ((_b = artifact.networks[`${this.options.networkId}`]) !== null && _b !== void 0 ? _b : {})), { address: contractAddress });
                    }
                    (0, util_1.enforceOrThrow)(artifact.networks && artifact.networks[`${this.options.networkId}`], `No instance of contract ${artifact.contractName} found for network id ${this.options.networkId}`);
                    const proxyImplementationAddress = yield (0, util_1.getImplementationAddress)(artifact.networks[`${this.options.networkId}`].address, this.logger, this.options.provider);
                    const status = proxyImplementationAddress
                        ? yield this.verifyProxyContract(artifact, contractName, proxyImplementationAddress)
                        : yield this.verifyContract(artifact);
                    if (status.includes(constants_1.VerificationStatus.FAILED)) {
                        failedContracts.push(`${contractNameAddressPair}`);
                    }
                    const contractUrl = this.getContractUrl(artifact.networks[`${this.options.networkId}`].address);
                    const succeededAndHasUrl = !status.includes(constants_1.VerificationStatus.FAILED) && contractUrl;
                    const statusMessage = succeededAndHasUrl ? `${status}: ${contractUrl}` : status;
                    this.logger.info(statusMessage);
                }
                catch (error) {
                    this.logger.error(error.message);
                    failedContracts.push(contractNameAddressPair);
                }
                this.logger.info();
            }
            if (failedContracts.length === 0) {
                this.logger.info(`Successfully verified ${contractNameAddressPairs.length} contract(s).`);
            }
            else {
                this.logger.info(`Failed to verify ${failedContracts.length} contract(s): ${failedContracts.join(', ')}`);
            }
        });
    }
}
exports.AbstractVerifier = AbstractVerifier;
