import type { Abi as SchemaAbi } from "@truffle/contract-schema/spec";
import type * as Abi from "@truffle/abi-utils";
import { Visitor, VisitOptions, Node } from "./visitor";
export declare const allFeatures: readonly ["defines-receive", "defines-fallback", "needs-abiencoder-v2", "defines-error"];
export declare type AbiFeature = typeof allFeatures[number];
export declare type AbiFeatures = Partial<{
    [F in AbiFeature]: true;
}>;
export declare const collectAbiFeatures: (node: SchemaAbi | Node) => Partial<{
    "defines-receive": true;
    "defines-fallback": true;
    "needs-abiencoder-v2": true;
    "defines-error": true;
}>;
export declare class AbiFeaturesCollector implements Visitor<AbiFeatures> {
    visitAbi({ node: nodes }: VisitOptions<Abi.Abi>): AbiFeatures;
    visitEventEntry({ node: entry }: VisitOptions<Abi.EventEntry>): AbiFeatures;
    visitErrorEntry({ node: entry }: VisitOptions<Abi.ErrorEntry>): AbiFeatures;
    visitFunctionEntry({ node: entry, }: VisitOptions<Abi.FunctionEntry>): AbiFeatures;
    visitConstructorEntry({ node: entry, }: VisitOptions<Abi.ConstructorEntry>): AbiFeatures;
    visitFallbackEntry({ node: entry, }: VisitOptions<Abi.FallbackEntry>): AbiFeatures;
    visitReceiveEntry({ node: entry, }: VisitOptions<Abi.ReceiveEntry>): AbiFeatures;
    visitParameter({ node: parameter, }: VisitOptions<Abi.Parameter>): AbiFeatures;
}
//# sourceMappingURL=abi-features.d.ts.map