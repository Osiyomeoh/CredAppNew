"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbiFeaturesCollector = exports.collectAbiFeatures = exports.allFeatures = void 0;
const visitor_1 = require("./visitor");
exports.allFeatures = [
    "defines-receive",
    "defines-fallback",
    "needs-abiencoder-v2",
    "defines-error",
];
const collectAbiFeatures = (node) => (0, visitor_1.dispatch)({
    node,
    visitor: new AbiFeaturesCollector(),
});
exports.collectAbiFeatures = collectAbiFeatures;
class AbiFeaturesCollector {
    visitAbi({ node: nodes }) {
        return nodes
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitEventEntry({ node: entry }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitErrorEntry({ node: entry }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitFunctionEntry({ node: entry, }) {
        return [...entry.inputs, ...(entry.outputs || [])]
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitConstructorEntry({ node: entry, }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitFallbackEntry({ node: entry, }) {
        return { "defines-fallback": true };
    }
    visitReceiveEntry({ node: entry, }) {
        return { "defines-receive": true };
    }
    visitParameter({ node: parameter, }) {
        if (parameter.type.startsWith("tuple") || // anything with tuples
            parameter.type.includes("string[") || // arrays of strings
            parameter.type.includes("bytes[") || // arrays of bytes
            parameter.type.includes("][") // anything with nested arrays
        ) {
            return { "needs-abiencoder-v2": true };
        }
        return {};
    }
}
exports.AbiFeaturesCollector = AbiFeaturesCollector;
//# sourceMappingURL=abi-features.js.map