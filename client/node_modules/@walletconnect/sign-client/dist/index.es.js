import ae from"pino";import{RELAYER_DEFAULT_PROTOCOL as ce,RELAYER_EVENTS as F,EXPIRER_EVENTS as le,Store as z,Core as pe}from"@walletconnect/core";import{getDefaultLoggerOptions as he,generateChildLogger as de,getLoggerContext as ge}from"@walletconnect/logger";import{IEngine as me,ISignClient as we}from"@walletconnect/types";import{TYPE_1 as ue,createDelayedPromise as v,engineEvent as p,getInternalError as c,calcExpiry as _,isValidObject as j,getRequiredNamespacesFromNamespaces as ye,getSdkError as R,isSessionCompatible as Se,isExpired as f,isValidParams as y,isUndefined as D,isValidRelays as Ee,isValidRequiredNamespaces as Ie,isValidNamespaces as Y,isConformingNamespaces as B,isValidString as A,isValidErrorReason as _e,isValidRelay as Re,isValidController as Ne,isValidNamespacesChainId as Q,isValidRequest as qe,isValidNamespacesRequest as Pe,isValidRequestExpiry as ve,isValidResponse as fe,isValidEvent as Oe,isValidNamespacesEvent as Ve,parseExpirerTarget as Te,isValidId as xe,getAppMetadata as De}from"@walletconnect/utils";import Ae,{EventEmitter as be}from"events";import{THIRTY_DAYS as Le,SEVEN_DAYS as W,FIVE_MINUTES as w,ONE_DAY as O,THIRTY_SECONDS as Z}from"@walletconnect/time";import{isJsonRpcResult as N,isJsonRpcError as q,formatJsonRpcRequest as Ce,formatJsonRpcResult as Ge,formatJsonRpcError as $e,isJsonRpcRequest as Me,isJsonRpcResponse as Ue}from"@walletconnect/jsonrpc-utils";const k="wc",X=2,J="client",C=`${k}@${X}:${J}:`,G={name:J,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.com"},Ke={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire"},ze={database:":memory:"},je={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},Ye="history",ke="0.3",ee="proposal",Xe=Le,se="Proposal expired",te="session",b=W,ie="engine",V={wc_sessionPropose:{req:{ttl:w,prompt:!0,tag:1100},res:{ttl:w,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:w,prompt:!1,tag:1102},res:{ttl:w,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:O,prompt:!1,tag:1104},res:{ttl:O,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:O,prompt:!1,tag:1106},res:{ttl:O,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:w,prompt:!0,tag:1108},res:{ttl:w,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:w,prompt:!0,tag:1110},res:{ttl:w,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:O,prompt:!1,tag:1112},res:{ttl:O,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:Z,prompt:!1,tag:1114},res:{ttl:Z,prompt:!1,tag:1115}}},$={min:w,max:W},ne="request";var Je=Object.defineProperty,He=Object.defineProperties,Fe=Object.getOwnPropertyDescriptors,oe=Object.getOwnPropertySymbols,Be=Object.prototype.hasOwnProperty,Qe=Object.prototype.propertyIsEnumerable,re=(d,n,e)=>n in d?Je(d,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[n]=e,u=(d,n)=>{for(var e in n||(n={}))Be.call(n,e)&&re(d,e,n[e]);if(oe)for(var e of oe(n))Qe.call(n,e)&&re(d,e,n[e]);return d},H=(d,n)=>He(d,Fe(n));class We extends me{constructor(n){super(n),this.name=ie,this.events=new Ae,this.initialized=!1,this.ignoredPayloadTypes=[ue],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(V)}),this.initialized=!0)},this.connect=async e=>{this.isInitialized();const s=H(u({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(s);const{pairingTopic:t,requiredNamespaces:i,optionalNamespaces:o,sessionProperties:a,relays:r}=s;let l=t,h,S=!1;if(l&&(S=this.client.core.pairing.pairings.get(l).active),!l||!S){const{topic:I,uri:g}=await this.client.core.pairing.create();l=I,h=g}const m=await this.client.core.crypto.generateKeyPair(),P=u({requiredNamespaces:i,optionalNamespaces:o,relays:r??[{protocol:ce}],proposer:{publicKey:m,metadata:this.client.metadata}},a&&{sessionProperties:a}),{reject:E,resolve:T,done:U}=v(w,se);if(this.events.once(p("session_connect"),async({error:I,session:g})=>{if(I)E(I);else if(g){g.self.publicKey=m;const x=H(u({},g),{requiredNamespaces:g.requiredNamespaces,optionalNamespaces:g.optionalNamespaces});await this.client.session.set(g.topic,x),await this.setExpiry(g.topic,g.expiry),l&&await this.client.core.pairing.updateMetadata({topic:l,metadata:g.peer.metadata}),T(x)}}),!l){const{message:I}=c("NO_MATCHING_KEY",`connect() pairing topic: ${l}`);throw new Error(I)}const L=await this.sendRequest(l,"wc_sessionPropose",P),K=_(w);return await this.setProposal(L,u({id:L,expiry:K},P)),{uri:h,approval:U}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:s,relayProtocol:t,namespaces:i,sessionProperties:o}=e,a=this.client.proposal.get(s);let{pairingTopic:r,proposer:l,requiredNamespaces:h,optionalNamespaces:S}=a;j(h)||(h=ye(i,"approve()"));const m=await this.client.core.crypto.generateKeyPair(),P=l.publicKey,E=await this.client.core.crypto.generateSharedKey(m,P);r&&s&&(await this.client.core.pairing.updateMetadata({topic:r,metadata:l.metadata}),await this.sendResult(s,r,{relay:{protocol:t??"irn"},responderPublicKey:m}),await this.client.proposal.delete(s,R("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:r}));const T=u({relay:{protocol:t??"irn"},namespaces:i,requiredNamespaces:h,optionalNamespaces:S,controller:{publicKey:m,metadata:this.client.metadata},expiry:_(b)},o&&{sessionProperties:o});await this.client.core.relayer.subscribe(E);const U=await this.sendRequest(E,"wc_sessionSettle",T),{done:L,resolve:K,reject:I}=v();this.events.once(p("session_approve",U),({error:x})=>{x?I(x):K(this.client.session.get(E))});const g=H(u({},T),{topic:E,acknowledged:!1,self:T.controller,peer:{publicKey:l.publicKey,metadata:l.metadata},controller:m});return await this.client.session.set(E,g),await this.setExpiry(E,_(b)),{topic:E,acknowledged:L}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:s,reason:t}=e,{pairingTopic:i}=this.client.proposal.get(s);i&&(await this.sendError(s,i,t),await this.client.proposal.delete(s,R("USER_DISCONNECTED")))},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:s,namespaces:t}=e,i=await this.sendRequest(s,"wc_sessionUpdate",{namespaces:t}),{done:o,resolve:a,reject:r}=v();return this.events.once(p("session_update",i),({error:l})=>{l?r(l):a()}),await this.client.session.update(s,{namespaces:t}),{acknowledged:o}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:s}=e,t=await this.sendRequest(s,"wc_sessionExtend",{}),{done:i,resolve:o,reject:a}=v();return this.events.once(p("session_extend",t),({error:r})=>{r?a(r):o()}),await this.setExpiry(s,_(b)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:s,request:t,topic:i,expiry:o}=e,a=await this.sendRequest(i,"wc_sessionRequest",{request:t,chainId:s},o),{done:r,resolve:l,reject:h}=v(o);return this.events.once(p("session_request",a),({error:S,result:m})=>{S?h(S):l(m)}),this.client.events.emit("session_request_sent",{topic:i,request:t,chainId:s}),await r()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:s,response:t}=e,{id:i}=t;N(t)?await this.sendResult(i,s,t.result):q(t)&&await this.sendError(i,s,t.error),this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0})},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:s}=e;if(this.client.session.keys.includes(s)){const t=await this.sendRequest(s,"wc_sessionPing",{}),{done:i,resolve:o,reject:a}=v();this.events.once(p("session_ping",t),({error:r})=>{r?a(r):o()}),await i()}else this.client.core.pairing.pairings.keys.includes(s)&&await this.client.core.pairing.ping({topic:s})},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:s,event:t,chainId:i}=e;await this.sendRequest(s,"wc_sessionEvent",{event:t,chainId:i})},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:s}=e;this.client.session.keys.includes(s)?(await this.sendRequest(s,"wc_sessionDelete",R("USER_DISCONNECTED")),await this.deleteSession(s)):await this.client.core.pairing.disconnect({topic:s})},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter(s=>Se(s,e))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,s)=>{const{self:t}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,R("USER_DISCONNECTED")),this.client.core.crypto.deleteKeyPair(t.publicKey),this.client.core.crypto.deleteSymKey(e),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deleteProposal=async(e,s)=>{await Promise.all([this.client.proposal.delete(e,R("USER_DISCONNECTED")),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deletePendingSessionRequest=async(e,s,t=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,s),t?Promise.resolve():this.client.core.expirer.del(e)])},this.setExpiry=async(e,s)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:s}),this.client.core.expirer.set(e,s)},this.setProposal=async(e,s)=>{await this.client.proposal.set(e,s),this.client.core.expirer.set(e,s.expiry)},this.setPendingSessionRequest=async e=>{const s=V.wc_sessionRequest.req.ttl,{id:t,topic:i,params:o}=e;await this.client.pendingRequest.set(t,{id:t,topic:i,params:o}),s&&this.client.core.expirer.set(t,_(s))},this.sendRequest=async(e,s,t,i)=>{const o=Ce(s,t),a=await this.client.core.crypto.encode(e,o),r=V[s].req;return i&&(r.ttl=i),this.client.core.history.set(e,o),this.client.core.relayer.publish(e,a,r),o.id},this.sendResult=async(e,s,t)=>{const i=Ge(e,t),o=await this.client.core.crypto.encode(s,i),a=await this.client.core.history.get(s,e),r=V[a.request.method].res;this.client.core.relayer.publish(s,o,r),await this.client.core.history.resolve(i)},this.sendError=async(e,s,t)=>{const i=$e(e,t),o=await this.client.core.crypto.encode(s,i),a=await this.client.core.history.get(s,e),r=V[a.request.method].res;this.client.core.relayer.publish(s,o,r),await this.client.core.history.resolve(i)},this.cleanup=async()=>{const e=[],s=[];this.client.session.getAll().forEach(t=>{f(t.expiry)&&e.push(t.topic)}),this.client.proposal.getAll().forEach(t=>{f(t.expiry)&&s.push(t.id)}),await Promise.all([...e.map(t=>this.deleteSession(t)),...s.map(t=>this.deleteProposal(t))])},this.onRelayEventRequest=e=>{const{topic:s,payload:t}=e,i=t.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(s,t);case"wc_sessionSettle":return this.onSessionSettleRequest(s,t);case"wc_sessionUpdate":return this.onSessionUpdateRequest(s,t);case"wc_sessionExtend":return this.onSessionExtendRequest(s,t);case"wc_sessionPing":return this.onSessionPingRequest(s,t);case"wc_sessionDelete":return this.onSessionDeleteRequest(s,t);case"wc_sessionRequest":return this.onSessionRequest(s,t);case"wc_sessionEvent":return this.onSessionEventRequest(s,t);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:s,payload:t}=e,i=(await this.client.core.history.get(s,t.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(s,t);case"wc_sessionSettle":return this.onSessionSettleResponse(s,t);case"wc_sessionUpdate":return this.onSessionUpdateResponse(s,t);case"wc_sessionExtend":return this.onSessionExtendResponse(s,t);case"wc_sessionPing":return this.onSessionPingResponse(s,t);case"wc_sessionRequest":return this.onSessionRequestResponse(s,t);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidConnect(u({},s.params));const o=_(w),a=u({id:i,pairingTopic:e,expiry:o},t);await this.setProposal(i,a),this.client.events.emit("session_proposal",{id:i,params:a})}catch(o){await this.sendError(i,e,o),this.client.logger.error(o)}},this.onSessionProposeResponse=async(e,s)=>{const{id:t}=s;if(N(s)){const{result:i}=s;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const o=this.client.proposal.get(t);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:o});const a=o.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:a});const r=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:r});const l=await this.client.core.crypto.generateSharedKey(a,r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:l});const h=await this.client.core.relayer.subscribe(l);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:h}),await this.client.core.pairing.activate({topic:e})}else q(s)&&(await this.client.proposal.delete(t,R("USER_DISCONNECTED")),this.events.emit(p("session_connect"),{error:s.error}))},this.onSessionSettleRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidSessionSettleRequest(i);const{relay:o,controller:a,expiry:r,namespaces:l,requiredNamespaces:h,optionalNamespaces:S,sessionProperties:m}=s.params,P=u({topic:e,relay:o,expiry:r,namespaces:l,acknowledged:!0,requiredNamespaces:h,optionalNamespaces:S,controller:a.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:a.publicKey,metadata:a.metadata}},m&&{sessionProperties:m});await this.sendResult(s.id,e,!0),this.events.emit(p("session_connect"),{session:P})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.onSessionSettleResponse=async(e,s)=>{const{id:t}=s;N(s)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(p("session_approve",t),{})):q(s)&&(await this.client.session.delete(e,R("USER_DISCONNECTED")),this.events.emit(p("session_approve",t),{error:s.error}))},this.onSessionUpdateRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidUpdate(u({topic:e},t)),await this.client.session.update(e,{namespaces:t.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit("session_update",{id:i,topic:e,params:t})}catch(o){await this.sendError(i,e,o),this.client.logger.error(o)}},this.onSessionUpdateResponse=(e,s)=>{const{id:t}=s;N(s)?this.events.emit(p("session_update",t),{}):q(s)&&this.events.emit(p("session_update",t),{error:s.error})},this.onSessionExtendRequest=async(e,s)=>{const{id:t}=s;try{this.isValidExtend({topic:e}),await this.setExpiry(e,_(b)),await this.sendResult(t,e,!0),this.client.events.emit("session_extend",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionExtendResponse=(e,s)=>{const{id:t}=s;N(s)?this.events.emit(p("session_extend",t),{}):q(s)&&this.events.emit(p("session_extend",t),{error:s.error})},this.onSessionPingRequest=async(e,s)=>{const{id:t}=s;try{this.isValidPing({topic:e}),await this.sendResult(t,e,!0),this.client.events.emit("session_ping",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionPingResponse=(e,s)=>{const{id:t}=s;setTimeout(()=>{N(s)?this.events.emit(p("session_ping",t),{}):q(s)&&this.events.emit(p("session_ping",t),{error:s.error})},500)},this.onSessionDeleteRequest=async(e,s)=>{const{id:t}=s;try{this.isValidDisconnect({topic:e,reason:s.params}),this.client.core.relayer.once(F.publish,async()=>{await this.deleteSession(e)}),await this.sendResult(t,e,!0),this.client.events.emit("session_delete",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidRequest(u({topic:e},i)),await this.setPendingSessionRequest({id:t,topic:e,params:i}),this.client.events.emit("session_request",{id:t,topic:e,params:i})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.onSessionRequestResponse=(e,s)=>{const{id:t}=s;N(s)?this.events.emit(p("session_request",t),{result:s.result}):q(s)&&this.events.emit(p("session_request",t),{error:s.error})},this.onSessionEventRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidEmit(u({topic:e},i)),this.client.events.emit("session_event",{id:t,topic:e,params:i})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.isValidConnect=async e=>{if(!y(e)){const{message:r}=c("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(r)}const{pairingTopic:s,requiredNamespaces:t,optionalNamespaces:i,sessionProperties:o,relays:a}=e;if(D(s)||await this.isValidPairingTopic(s),!Ee(a,!0)){const{message:r}=c("MISSING_OR_INVALID",`connect() relays: ${a}`);throw new Error(r)}!D(t)&&j(t)!==0&&this.validateNamespaces(t,"requiredNamespaces"),!D(i)&&j(i)!==0&&this.validateNamespaces(i,"optionalNamespaces"),D(o)||this.validateSessionProps(o,"sessionProperties")},this.validateNamespaces=(e,s)=>{const t=Ie(e,"connect()",s);if(t)throw new Error(t.message)},this.isValidApprove=async e=>{if(!y(e))throw new Error(c("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:s,namespaces:t,relayProtocol:i,sessionProperties:o}=e;await this.isValidProposalId(s);const a=this.client.proposal.get(s),r=Y(t,"approve()");if(r)throw new Error(r.message);const l=B(a.requiredNamespaces,t,"approve()");if(l)throw new Error(l.message);if(!A(i,!0)){const{message:h}=c("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(h)}D(o)||this.validateSessionProps(o,"sessionProperties")},this.isValidReject=async e=>{if(!y(e)){const{message:i}=c("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(i)}const{id:s,reason:t}=e;if(await this.isValidProposalId(s),!_e(t)){const{message:i}=c("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidSessionSettleRequest=e=>{if(!y(e)){const{message:l}=c("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(l)}const{relay:s,controller:t,namespaces:i,expiry:o}=e;if(!Re(s)){const{message:l}=c("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(l)}const a=Ne(t,"onSessionSettleRequest()");if(a)throw new Error(a.message);const r=Y(i,"onSessionSettleRequest()");if(r)throw new Error(r.message);if(f(o)){const{message:l}=c("EXPIRED","onSessionSettleRequest()");throw new Error(l)}},this.isValidUpdate=async e=>{if(!y(e)){const{message:r}=c("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(r)}const{topic:s,namespaces:t}=e;await this.isValidSessionTopic(s);const i=this.client.session.get(s),o=Y(t,"update()");if(o)throw new Error(o.message);const a=B(i.requiredNamespaces,t,"update()");if(a)throw new Error(a.message)},this.isValidExtend=async e=>{if(!y(e)){const{message:t}=c("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionTopic(s)},this.isValidRequest=async e=>{if(!y(e)){const{message:r}=c("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(r)}const{topic:s,request:t,chainId:i,expiry:o}=e;await this.isValidSessionTopic(s);const{namespaces:a}=this.client.session.get(s);if(!Q(a,i)){const{message:r}=c("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(r)}if(!qe(t)){const{message:r}=c("MISSING_OR_INVALID",`request() ${JSON.stringify(t)}`);throw new Error(r)}if(!Pe(a,i,t.method)){const{message:r}=c("MISSING_OR_INVALID",`request() method: ${t.method}`);throw new Error(r)}if(o&&!ve(o,$)){const{message:r}=c("MISSING_OR_INVALID",`request() expiry: ${o}. Expiry must be a number (in seconds) between ${$.min} and ${$.max}`);throw new Error(r)}},this.isValidRespond=async e=>{if(!y(e)){const{message:i}=c("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(i)}const{topic:s,response:t}=e;if(await this.isValidSessionTopic(s),!fe(t)){const{message:i}=c("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidPing=async e=>{if(!y(e)){const{message:t}=c("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.isValidEmit=async e=>{if(!y(e)){const{message:a}=c("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(a)}const{topic:s,event:t,chainId:i}=e;await this.isValidSessionTopic(s);const{namespaces:o}=this.client.session.get(s);if(!Q(o,i)){const{message:a}=c("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(a)}if(!Oe(t)){const{message:a}=c("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(a)}if(!Ve(o,i,t.name)){const{message:a}=c("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(a)}},this.isValidDisconnect=async e=>{if(!y(e)){const{message:t}=c("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.validateSessionProps=(e,s)=>{Object.values(e).forEach(t=>{if(!A(t,!1)){const{message:i}=c("MISSING_OR_INVALID",`${s} must be in Record<string, string> format. Received: ${JSON.stringify(t)}`);throw new Error(i)}})}}isInitialized(){if(!this.initialized){const{message:n}=c("NOT_INITIALIZED",this.name);throw new Error(n)}}registerRelayerEvents(){this.client.core.relayer.on(F.message,async n=>{const{topic:e,message:s}=n;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))return;const t=await this.client.core.crypto.decode(e,s);Me(t)?(this.client.core.history.set(e,t),this.onRelayEventRequest({topic:e,payload:t})):Ue(t)&&(await this.client.core.history.resolve(t),this.onRelayEventResponse({topic:e,payload:t}))})}registerExpirerEvents(){this.client.core.expirer.on(le.expired,async n=>{const{topic:e,id:s}=Te(n.target);if(s&&this.client.pendingRequest.keys.includes(s))return await this.deletePendingSessionRequest(s,c("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession(e,!0),this.client.events.emit("session_expire",{topic:e})):s&&(await this.deleteProposal(s,!0),this.client.events.emit("proposal_expire",{id:s}))})}isValidPairingTopic(n){if(!A(n,!1)){const{message:e}=c("MISSING_OR_INVALID",`pairing topic should be a string: ${n}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`pairing topic doesn't exist: ${n}`);throw new Error(e)}if(f(this.client.core.pairing.pairings.get(n).expiry)){const{message:e}=c("EXPIRED",`pairing topic: ${n}`);throw new Error(e)}}async isValidSessionTopic(n){if(!A(n,!1)){const{message:e}=c("MISSING_OR_INVALID",`session topic should be a string: ${n}`);throw new Error(e)}if(!this.client.session.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`session topic doesn't exist: ${n}`);throw new Error(e)}if(f(this.client.session.get(n).expiry)){await this.deleteSession(n);const{message:e}=c("EXPIRED",`session topic: ${n}`);throw new Error(e)}}async isValidSessionOrPairingTopic(n){if(this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(A(n,!1)){const{message:e}=c("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${n}`);throw new Error(e)}else{const{message:e}=c("MISSING_OR_INVALID",`session or pairing topic should be a string: ${n}`);throw new Error(e)}}async isValidProposalId(n){if(!xe(n)){const{message:e}=c("MISSING_OR_INVALID",`proposal id should be a number: ${n}`);throw new Error(e)}if(!this.client.proposal.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`proposal id doesn't exist: ${n}`);throw new Error(e)}if(f(this.client.proposal.get(n).expiry)){await this.deleteProposal(n);const{message:e}=c("EXPIRED",`proposal id: ${n}`);throw new Error(e)}}}class Ze extends z{constructor(n,e){super(n,e,ee,C),this.core=n,this.logger=e}}class es extends z{constructor(n,e){super(n,e,te,C),this.core=n,this.logger=e}}class ss extends z{constructor(n,e){super(n,e,ne,C),this.core=n,this.logger=e}}class M extends we{constructor(n){super(n),this.protocol=k,this.version=X,this.name=G.name,this.events=new be,this.on=(s,t)=>this.events.on(s,t),this.once=(s,t)=>this.events.once(s,t),this.off=(s,t)=>this.events.off(s,t),this.removeListener=(s,t)=>this.events.removeListener(s,t),this.removeAllListeners=s=>this.events.removeAllListeners(s),this.connect=async s=>{try{return await this.engine.connect(s)}catch(t){throw this.logger.error(t.message),t}},this.pair=async s=>{try{return await this.engine.pair(s)}catch(t){throw this.logger.error(t.message),t}},this.approve=async s=>{try{return await this.engine.approve(s)}catch(t){throw this.logger.error(t.message),t}},this.reject=async s=>{try{return await this.engine.reject(s)}catch(t){throw this.logger.error(t.message),t}},this.update=async s=>{try{return await this.engine.update(s)}catch(t){throw this.logger.error(t.message),t}},this.extend=async s=>{try{return await this.engine.extend(s)}catch(t){throw this.logger.error(t.message),t}},this.request=async s=>{try{return await this.engine.request(s)}catch(t){throw this.logger.error(t.message),t}},this.respond=async s=>{try{return await this.engine.respond(s)}catch(t){throw this.logger.error(t.message),t}},this.ping=async s=>{try{return await this.engine.ping(s)}catch(t){throw this.logger.error(t.message),t}},this.emit=async s=>{try{return await this.engine.emit(s)}catch(t){throw this.logger.error(t.message),t}},this.disconnect=async s=>{try{return await this.engine.disconnect(s)}catch(t){throw this.logger.error(t.message),t}},this.find=s=>{try{return this.engine.find(s)}catch(t){throw this.logger.error(t.message),t}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(s){throw this.logger.error(s.message),s}},this.name=n?.name||G.name,this.metadata=n?.metadata||De();const e=typeof n?.logger<"u"&&typeof n?.logger!="string"?n.logger:ae(he({level:n?.logger||G.logger}));this.core=n?.core||new pe(n),this.logger=de(e,this.name),this.session=new es(this.core,this.logger),this.proposal=new Ze(this.core,this.logger),this.pendingRequest=new ss(this.core,this.logger),this.engine=new We(this)}static async init(n){const e=new M(n);return await e.initialize(),e}get context(){return ge(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info("SignClient Initialization Success")}catch(n){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(n.message),n}}}const ts=M;export{ie as ENGINE_CONTEXT,V as ENGINE_RPC_OPTS,Ye as HISTORY_CONTEXT,je as HISTORY_EVENTS,ke as HISTORY_STORAGE_VERSION,ee as PROPOSAL_CONTEXT,Xe as PROPOSAL_EXPIRY,se as PROPOSAL_EXPIRY_MESSAGE,ne as REQUEST_CONTEXT,te as SESSION_CONTEXT,b as SESSION_EXPIRY,$ as SESSION_REQUEST_EXPIRY_BOUNDARIES,J as SIGN_CLIENT_CONTEXT,G as SIGN_CLIENT_DEFAULT,Ke as SIGN_CLIENT_EVENTS,k as SIGN_CLIENT_PROTOCOL,ze as SIGN_CLIENT_STORAGE_OPTIONS,C as SIGN_CLIENT_STORAGE_PREFIX,X as SIGN_CLIENT_VERSION,ts as SignClient,M as default};
//# sourceMappingURL=index.es.js.map
