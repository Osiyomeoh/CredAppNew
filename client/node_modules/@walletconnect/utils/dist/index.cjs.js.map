{"version":3,"file":"index.cjs.js","sources":["../src/caip.ts","../src/cacao.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...getChainsFromNamespace(key, ns));\n  });\n  return chains;\n}\n\nexport function getChainsFromNamespace(\n  namespace: string,\n  namespaceProps: ProposalTypes.BaseRequiredNamespace,\n) {\n  // check if chainId is provided in the key as `eip155:1` or in the namespace as chains[]\n  return namespace.includes(\":\") ? [namespace] : namespaceProps.chains || [];\n}\n","export interface CacaoPayload {\n  iss: string;\n  domain: string;\n  aud: string;\n  version: string;\n  nonce: string;\n  iat: string;\n  nbf?: string;\n  exp?: string;\n  statement?: string;\n  requestId?: string;\n  resources?: string[];\n}\n\nexport interface CacaoHeader {\n  t: \"eip4361\";\n}\n\nexport interface CacaoSignature {\n  t: \"eip191\" | \"eip1271\";\n  s: string;\n  m?: string;\n}\n\nexport interface Cacao {\n  h: CacaoHeader;\n  p: CacaoPayload;\n  s: CacaoSignature;\n}\n\nexport const getDidAddressSegments = (iss: string) => {\n  return iss?.split(\":\");\n};\n\nexport const getDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[3];\n  }\n  return undefined;\n};\n\nexport const getNamespacedDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[2] + \":\" + segments[3];\n  }\n  return undefined;\n};\n\nexport const getDidAddress = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments.pop();\n  }\n  return undefined;\n};\n\nexport const formatMessage = (cacao: CacaoPayload, iss: string) => {\n  const header = `${cacao.domain} wants you to sign in with your Ethereum account:`;\n  const walletAddress = getDidAddress(iss);\n  const statement = cacao.statement;\n  const uri = `URI: ${cacao.aud}`;\n  const version = `Version: ${cacao.version}`;\n  const chainId = `Chain ID: ${getDidChainId(iss)}`;\n  const nonce = `Nonce: ${cacao.nonce}`;\n  const issuedAt = `Issued At: ${cacao.iat}`;\n  const resources =\n    cacao.resources && cacao.resources.length > 0\n      ? `Resources:\\n${cacao.resources.map((resource) => `- ${resource}`).join(\"\\n\")}`\n      : undefined;\n\n  const message = [\n    header,\n    walletAddress,\n    ``,\n    statement,\n    ``,\n    uri,\n    version,\n    chainId,\n    nonce,\n    issuedAt,\n    resources,\n  ]\n    .filter((val) => val !== undefined && val !== null) // remove unnecessary empty lines\n    .join(\"\\n\");\n\n  return message;\n};\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\n\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>(\n  expiry: number = FIVE_MINUTES,\n  expireErrorMessage?: string,\n) {\n  const timeout = toMiliseconds(expiry || FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(() => {\n        promiseReject(new Error(expireErrorMessage));\n      }, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\nexport function createExpiringPromise<T>(promise: Promise<T>, expiry: number) {\n  return new Promise(async (resolve, reject) => {\n    const timeout = setTimeout(() => reject(), expiry);\n    const res = await promise;\n    clearTimeout(timeout);\n    resolve(res);\n  });\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return Date.now() >= toMiliseconds(expiry);\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"irn\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\nimport { hashKey } from \"./crypto\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const proposedTopic = requiredValues[0];\n\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const symKey = queryParams.symKey as string;\n\n  if (symKey.length !== 64) {\n    throw new Error(`Invalid symKey: ${symKey}`);\n  }\n\n  const expectedTopic = hashKey(symKey as string);\n\n  if (proposedTopic !== expectedTopic) {\n    throw new Error(`Invalid topic: ${proposedTopic}`);\n  }\n\n  const result = {\n    protocol,\n    topic: proposedTopic,\n    version: parseInt(requiredValues[1], 10),\n    symKey,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { ProposalTypes, SessionTypes } from \"@walletconnect/types\";\nimport { isValidNamespaces } from \"./validators\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n  });\n\n  return events;\n}\n\nexport function getRequiredNamespacesFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  caller: string,\n): ProposalTypes.RequiredNamespaces {\n  const validNamespacesError = isValidNamespaces(namespaces, caller);\n  if (validNamespacesError) throw new Error(validNamespacesError.message);\n\n  const required = {};\n  for (const [namespace, values] of Object.entries(namespaces)) {\n    required[namespace] = {\n      methods: values.methods,\n      events: values.events,\n      chains: values.accounts.map((account) => `${account.split(\":\")[0]}:${account.split(\":\")[1]}`),\n    };\n  }\n  return required;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n  /* ----- PAIRING (10xxx) ----- */\n  WC_METHOD_UNSUPPORTED: {\n    message: \"Unsupported wc_ method.\",\n    code: 10001,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\nimport { getChainsFromNamespace } from \"./caip\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n    if (\n      !hasOverlap(getChainsFromNamespace(key, requiredNamespace), chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(\n      key,\n      getChainsFromNamespace(key, namespace),\n      `${method} requiredNamespace`,\n    );\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string, type: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, ${type} should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n) {\n  let error: ErrorObject = null;\n\n  const parsedRequired = parseNamespaces(requiredNamespaces);\n  const parsedApproved = parseApprovedNamespaces(namespaces);\n  const requiredChains = Object.keys(parsedRequired);\n  const approvedChains = Object.keys(parsedApproved);\n\n  const uniqueRequired = filterDuplicateNamespaces(Object.keys(requiredNamespaces));\n  const uniqueApproved = filterDuplicateNamespaces(Object.keys(namespaces));\n  const missingRequiredNamespaces = uniqueRequired.filter(\n    (namespace) => !uniqueApproved.includes(namespace),\n  );\n\n  if (missingRequiredNamespaces.length) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${missingRequiredNamespaces.toString()}\n      Received: ${Object.keys(namespaces).toString()}`,\n    );\n  }\n\n  if (!hasOverlap(requiredChains, approvedChains)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces chains don't satisfy required namespaces.\n      Required: ${requiredChains.toString()}\n      Approved: ${approvedChains.toString()}`,\n    );\n  }\n\n  requiredChains.forEach((chain) => {\n    if (error) return;\n\n    if (!hasOverlap(parsedRequired[chain].methods, parsedApproved[chain].methods)) {\n      error = getInternalError(\n        \"NON_CONFORMING_NAMESPACES\",\n        `${context} namespaces methods don't satisfy namespace methods for ${chain}`,\n      );\n    } else if (!hasOverlap(parsedRequired[chain].events, parsedApproved[chain].events)) {\n      error = getInternalError(\n        \"NON_CONFORMING_NAMESPACES\",\n        `${context} namespaces events don't satisfy namespace events for ${chain}`,\n      );\n    }\n  });\n\n  return error;\n}\n\nfunction parseNamespaces(namespaces: ProposalTypes.RequiredNamespaces) {\n  const parsed = {};\n  Object.keys(namespaces).forEach((key) => {\n    // e.g. `eip155:1`\n    const isInlineChainDefinition = key.includes(\":\");\n\n    if (isInlineChainDefinition) {\n      parsed[key] = namespaces[key];\n    } else {\n      namespaces[key].chains?.forEach((chain) => {\n        parsed[chain] = {\n          methods: namespaces[key].methods,\n          events: namespaces[key].events,\n        };\n      });\n    }\n  });\n  return parsed;\n}\n\nfunction filterDuplicateNamespaces(namespaces: string[]) {\n  return [\n    ...new Set(\n      namespaces.map((namespace) =>\n        namespace.includes(\":\") ? namespace.split(\":\")[0] : namespace,\n      ),\n    ),\n  ];\n}\n\nfunction parseApprovedNamespaces(namespaces: SessionTypes.Namespaces) {\n  const parsed = {};\n  Object.keys(namespaces).forEach((key) => {\n    const isInlineChainDefinition = key.includes(\":\");\n    if (isInlineChainDefinition) {\n      parsed[key] = namespaces[key];\n    } else {\n      const chains = getAccountsChains(namespaces[key].accounts);\n      chains?.forEach((chain) => {\n        parsed[chain] = {\n          accounts: namespaces[key].accounts.filter((account: string) =>\n            account.includes(`${chain}:`),\n          ),\n          methods: namespaces[key].methods,\n          events: namespaces[key].events,\n        };\n      });\n    }\n  });\n  return parsed;\n}\n\nexport function isValidRequestExpiry(expiry: number, boundaries: { min: number; max: number }) {\n  return isValidNumber(expiry, false) && expiry <= boundaries.max && expiry >= boundaries.min;\n}\n"],"names":["CAIP_DELIMITER","chain","namespace","reference","params","account","address","array","parser","unique","str","value","accounts","namespaces","keys","key","ns","chains","requiredNamespaces","namespaceProps","iss","segments","cacao","header","walletAddress","statement","uri","version","chainId","nonce","issuedAt","resources","resource","val","ZERO_INDEX","TYPE_LENGTH","IV_LENGTH","KEY_LENGTH","keyPair","x25519","toString","random","randomBytes","privateKeyA","publicKeyB","sharedKey","fromString","symKey","HKDF","SHA256","result","hash","message","type","byte","senderPublicKey","iv","sealed","ChaCha20Poly1305","box","concat","encoded","bytes","slice1","slice2","slice3","opts","deserialized","getDocument","getNavigator","queryString","newQueryParams","queryParams","qs","__spreadValues","getWindowMetadata","protocol","_a","env","metadata","getLocation","info","detect","os","sdkVersion","id","relayUrl","auth","projectId","splitUrl","ua","url","domain","obj","context","depth","a","b","x","arr","map","cb","res","word","c","w","expiry","FIVE_MINUTES","expireErrorMessage","timeout","toMiliseconds","cacheResolve","cacheReject","cacheTimeout","promiseResolve","promiseReject","promise","resolve","reject","topic","target","parsed","ttl","now","fromMiliseconds","event","jsonrpc","RELAY_JSONRPC","delimiter","relay","prefix","name","pathStart","pathEnd","requiredValues","proposedTopic","expectedTopic","hashKey","k","methods","events","caller","validNamespacesError","isValidNamespaces","required","values","SDK_ERRORS","INTERNAL_ERRORS","code","itemCondition","input","optional","session","sessionKeys","paramsKeys","compatible","hasOverlap","getAccountsChains","requiredNamespace","getChainsFromNamespace","split","e","method","error","getInternalError","valid","item","getSdkError","validChainsError","validAccountsError","validActionsError","request","response","getNamespacesChains","getNamespacesMethodsForChainId","eventName","getNamespacesEventsForChainId","parsedRequired","parseNamespaces","parsedApproved","parseApprovedNamespaces","requiredChains","approvedChains","uniqueRequired","filterDuplicateNamespaces","uniqueApproved","missingRequiredNamespaces","boundaries"],"mappings":"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"}