{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/**\r\n * @file ENS.js\r\n *\r\n * @author Samuel Furter <samuel@ethereum.org>\r\n * @date 2018\r\n */\n\n\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\USER\\\\Documents\\\\CredAppNew\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _ = require('underscore');\nvar config = require('./config');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar Registry = require('./contracts/Registry');\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\nvar contenthash = require('./lib/contentHash');\n\n/**\r\n * Constructs a new instance of ENS\r\n *\r\n * @param {Eth} eth\r\n *\r\n * @constructor\r\n */\nfunction ENS(eth) {\n  this.eth = eth;\n  var registryAddress = null;\n  this._detectedAddress = null;\n  this._lastSyncCheck = null;\n  Object.defineProperty(this, 'registry', {\n    get: function get() {\n      return new Registry(this);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'resolverMethodHandler', {\n    get: function get() {\n      return new ResolverMethodHandler(this.registry);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'registryAddress', {\n    get: function get() {\n      return registryAddress;\n    },\n    set: function set(value) {\n      if (value === null) {\n        registryAddress = value;\n        return;\n      }\n      registryAddress = formatters.inputAddressFormatter(value);\n    },\n    enumerable: true\n  });\n}\n\n/**\r\n * Returns true if the given interfaceId is supported and otherwise false.\r\n *\r\n * @method supportsInterface\r\n *\r\n * @param {string} name\r\n * @param {string} interfaceId\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n  return this.getResolver(name).then(function (resolver) {\n    if (!utils.isHexStrict(interfaceId)) {\n      interfaceId = utils.sha3(interfaceId).slice(0, 10);\n    }\n    return resolver.methods.supportsInterface(interfaceId).call(callback);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  });\n};\n\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\r\n *\r\n * @method resolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\nENS.prototype.resolver = function (name, callback) {\n  return this.registry.resolver(name, callback);\n};\n\n/**\r\n * Returns the Resolver by the given address\r\n *\r\n * @method getResolver\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<Contract>}\r\n */\nENS.prototype.getResolver = function (name, callback) {\n  return this.registry.getResolver(name, callback);\n};\n\n/**\r\n * Does set the resolver of the given name\r\n *\r\n * @method setResolver\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n  return this.registry.setResolver(name, address, txConfig, callback);\n};\n\n/**\r\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\r\n *\r\n * @method setRecord\r\n *\r\n * @param {string} name\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\r\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\r\n *\r\n * @method setSubnodeRecord\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} owner\r\n * @param {string} resolver\r\n * @param {string | number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\r\n * Sets or clears an approval by the given operator.\r\n *\r\n * @method setApprovalForAll\r\n *\r\n * @param {string} operator\r\n * @param {boolean} approved\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n\n/**\r\n * Returns true if the operator is approved\r\n *\r\n * @method isApprovedForAll\r\n *\r\n * @param {string} owner\r\n * @param {string} operator\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n  return this.registry.isApprovedForAll(owner, operator, callback);\n};\n\n/**\r\n * Returns true if the record exists\r\n *\r\n * @method recordExists\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {Promise<boolean>}\r\n */\nENS.prototype.recordExists = function (name, callback) {\n  return this.registry.recordExists(name, callback);\n};\n\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setSubnodeOwner\r\n *\r\n * @param {string} name\r\n * @param {string} label\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method getTTL\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getTTL = function (name, callback) {\n  return this.registry.getTTL(name, callback);\n};\n\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setTTL\r\n *\r\n * @param {string} name\r\n * @param {number} ttl\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n\n/**\r\n * Returns the owner by the given name and current configured or detected Registry\r\n *\r\n * @method getOwner\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getOwner = function (name, callback) {\n  return this.registry.getOwner(name, callback);\n};\n\n/**\r\n * Returns the address of the owner of an ENS name.\r\n *\r\n * @method setOwner\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n  return this.registry.setOwner(name, address, txConfig, callback);\n};\n\n/**\r\n * Returns the address record associated with a name.\r\n *\r\n * @method getAddress\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getAddress = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n\n/**\r\n * Sets a new address\r\n *\r\n * @method setAddress\r\n *\r\n * @param {string} name\r\n * @param {string} address\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n\n/**\r\n * Returns the public key\r\n *\r\n * @method getPubkey\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getPubkey = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n\n/**\r\n * Set the new public key\r\n *\r\n * @method setPubkey\r\n *\r\n * @param {string} name\r\n * @param {string} x\r\n * @param {string} y\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n\n/**\r\n * Returns the content\r\n *\r\n * @method getContent\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getContent = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n\n/**\r\n * Set the content\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n\n/**\r\n * Returns the contenthash\r\n *\r\n * @method getContenthash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<ContentHash>}\r\n */\nENS.prototype.getContenthash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n\n/**\r\n * Set the contenthash\r\n *\r\n * @method setContent\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {function} callback\r\n * @param {TransactionConfig} txConfig\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n  var encoded;\n  try {\n    encoded = contenthash.encode(hash);\n  } catch (err) {\n    var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  }\n  return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n\n/**\r\n * Get the multihash\r\n *\r\n * @method getMultihash\r\n *\r\n * @param {string} name\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.getMultihash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n\n/**\r\n * Set the multihash\r\n *\r\n * @method setMultihash\r\n *\r\n * @param {string} name\r\n * @param {string} hash\r\n * @param {TransactionConfig} txConfig\r\n * @param {function} callback\r\n *\r\n * @callback callback callback(error, result)\r\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\r\n */\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n\n/**\r\n * Checks if the current used network is synced and looks for ENS support there.\r\n * Throws an error if not.\r\n *\r\n * @returns {Promise<string>}\r\n */\nENS.prototype.checkNetwork = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n  var now, block, headAge, networkType, addr;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        now = new Date() / 1000;\n        if (!(!this._lastSyncCheck || now - this._lastSyncCheck > 3600)) {\n          _context.next = 9;\n          break;\n        }\n        _context.next = 4;\n        return this.eth.getBlock('latest');\n      case 4:\n        block = _context.sent;\n        headAge = now - block.timestamp;\n        if (!(headAge > 3600)) {\n          _context.next = 8;\n          break;\n        }\n        throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n      case 8:\n        this._lastSyncCheck = now;\n      case 9:\n        if (!this.registryAddress) {\n          _context.next = 11;\n          break;\n        }\n        return _context.abrupt(\"return\", this.registryAddress);\n      case 11:\n        if (this._detectedAddress) {\n          _context.next = 20;\n          break;\n        }\n        _context.next = 14;\n        return this.eth.net.getNetworkType();\n      case 14:\n        networkType = _context.sent;\n        addr = config.addresses[networkType];\n        if (!(typeof addr === 'undefined')) {\n          _context.next = 18;\n          break;\n        }\n        throw new Error(\"ENS is not supported on network \" + networkType);\n      case 18:\n        this._detectedAddress = addr;\n        return _context.abrupt(\"return\", this._detectedAddress);\n      case 20:\n        return _context.abrupt(\"return\", this._detectedAddress);\n      case 21:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _callee, this);\n}));\nmodule.exports = ENS;","map":null,"metadata":{},"sourceType":"script"}