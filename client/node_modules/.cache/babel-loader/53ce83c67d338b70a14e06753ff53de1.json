{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _createChainedFunction = _interopRequireDefault(require(\"./utils/createChainedFunction\"));\nvar defaultProps = {\n  as: 'a'\n};\nfunction isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\r\n * There are situations due to browser quirks or Bootstrap CSS where\r\n * an anchor tag is needed, when semantically a button tag is the\r\n * better choice. SafeAnchor ensures that when an anchor is used like a\r\n * button its accessible. It also emulates input `disabled` behavior for\r\n * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.\r\n */\n\nvar SafeAnchor = /*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(SafeAnchor, _React$Component);\n  function SafeAnchor(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n  var _proto = SafeAnchor.prototype;\n  _proto.handleClick = function handleClick(event) {\n    var _this$props = this.props,\n      disabled = _this$props.disabled,\n      href = _this$props.href,\n      onClick = _this$props.onClick;\n    if (disabled || isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.preventDefault();\n      this.handleClick(event);\n    }\n  };\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n      Component = _this$props2.as,\n      disabled = _this$props2.disabled,\n      onKeyDown = _this$props2.onKeyDown,\n      innerRef = _this$props2.innerRef,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, [\"as\", \"disabled\", \"onKeyDown\", \"innerRef\"]);\n    if (isTrivialHref(props.href)) {\n      props.role = props.role || 'button'; // we want to make sure there is a href attribute on the node\n      // otherwise, the cursor incorrectly styled (except with role='button')\n\n      props.href = props.href || '#';\n    }\n    if (disabled) {\n      props.tabIndex = -1;\n      props['aria-disabled'] = true;\n    }\n    if (innerRef) props.ref = innerRef;\n    return _react.default.createElement(Component, (0, _extends2.default)({}, props, {\n      onClick: this.handleClick,\n      onKeyDown: (0, _createChainedFunction.default)(this.handleKeyDown, onKeyDown)\n    }));\n  };\n  return SafeAnchor;\n}(_react.default.Component);\nSafeAnchor.defaultProps = defaultProps;\nvar _default = SafeAnchor;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}