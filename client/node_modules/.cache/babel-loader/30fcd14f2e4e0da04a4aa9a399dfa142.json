{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  var arrayValues = null;\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n  var staticWriter = new Writer(writer.wordSize);\n  var dynamicWriter = new Writer(writer.wordSize);\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset = dynamicWriter.length;\n      // Encode the dynamic value into the dynamicWriter\n      coder.encode(dynamicWriter, value);\n      // Prepare to populate the correct offset once we are done\n      var updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  });\n  // Backfill all the dynamic offsets, now that we know the static length\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  var values = [];\n  // A reader anchored to this base\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n    if (coder.dynamic) {\n      var offset = reader.readValue();\n      var offsetReader = baseReader.subReader(offset.toNumber());\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n    if (value != undefined) {\n      values.push(value);\n    }\n  });\n  // We only output named properties for uniquely named coders\n  var uniqueNames = coders.reduce(function (accum, coder) {\n    var name = coder.localName;\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n      accum[name]++;\n    }\n    return accum;\n  }, {});\n  // Add any named parameters (i.e. tuples)\n  coders.forEach(function (coder, index) {\n    var name = coder.localName;\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n    if (values[name] != null) {\n      return;\n    }\n    var value = values[index];\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n  var _loop = function _loop() {\n    var value = values[i];\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    }\n  };\n  for (var i = 0; i < values.length; i++) {\n    _loop();\n  }\n  return Object.freeze(values);\n}\nexport var ArrayCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(ArrayCoder, _Coder);\n  function ArrayCoder(coder, length, localName) {\n    var _this;\n    _classCallCheck(this, ArrayCoder);\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayCoder).call(this, \"array\", type, localName, dynamic));\n    _this.coder = coder;\n    _this.length = length;\n    return _this;\n  }\n  _createClass(ArrayCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n      var defaultChild = this.coder.defaultValue();\n      var result = [];\n      for (var i = 0; i < this.length; i++) {\n        result.push(defaultChild);\n      }\n      return result;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      if (!Array.isArray(value)) {\n        this._throwError(\"expected array value\", value);\n      }\n      var count = this.length;\n      if (count === -1) {\n        count = value.length;\n        writer.writeValue(value.length);\n      }\n      logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n      var coders = [];\n      for (var i = 0; i < value.length; i++) {\n        coders.push(this.coder);\n      }\n      return pack(writer, coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var count = this.length;\n      if (count === -1) {\n        count = reader.readValue().toNumber();\n        // Check that there is *roughly* enough data to ensure\n        // stray random data is not being read as a length. Each\n        // slot requires at least 32 bytes for their value (or 32\n        // bytes as a link to the data). This could use a much\n        // tighter bound, but we are erroring on the side of safety.\n        if (count * 32 > reader._data.length) {\n          logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n            length: reader._data.length,\n            count: count\n          });\n        }\n      }\n      var coders = [];\n      for (var i = 0; i < count; i++) {\n        coders.push(new AnonymousCoder(this.coder));\n      }\n      return reader.coerce(this.name, unpack(reader, coders));\n    }\n  }]);\n  return ArrayCoder;\n}(Coder);","map":null,"metadata":{},"sourceType":"module"}