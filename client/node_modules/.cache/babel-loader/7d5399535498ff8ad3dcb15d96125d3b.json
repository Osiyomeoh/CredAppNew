{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/** @file httpprovider.js\r\n * @authors:\r\n *   Marek Kotewicz <marek@parity.io>\r\n *   Marian Oancea\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2015\r\n */\n\nvar errors = require('web3-core-helpers').errors;\nvar XHR2 = require('xhr2-cookies').XMLHttpRequest; // jshint ignore: line\nvar http = require('http');\nvar https = require('https');\n\n/**\r\n * HttpProvider should be used to send rpc calls over http\r\n */\nvar HttpProvider = function HttpProvider(host, options) {\n  options = options || {};\n  this.withCredentials = options.withCredentials || false;\n  this.timeout = options.timeout || 0;\n  this.headers = options.headers;\n  this.agent = options.agent;\n  this.connected = false;\n\n  // keepAlive is true unless explicitly set to false\n  var keepAlive = options.keepAlive !== false;\n  this.host = host || 'http://localhost:8545';\n  if (!this.agent) {\n    if (this.host.substring(0, 5) === \"https\") {\n      this.httpsAgent = new https.Agent({\n        keepAlive: keepAlive\n      });\n    } else {\n      this.httpAgent = new http.Agent({\n        keepAlive: keepAlive\n      });\n    }\n  }\n};\nHttpProvider.prototype._prepareRequest = function () {\n  var request;\n\n  // the current runtime is a browser\n  if (typeof XMLHttpRequest !== 'undefined') {\n    request = new XMLHttpRequest();\n  } else {\n    request = new XHR2();\n    var agents = {\n      httpsAgent: this.httpsAgent,\n      httpAgent: this.httpAgent,\n      baseUrl: this.baseUrl\n    };\n    if (this.agent) {\n      agents.httpsAgent = this.agent.https;\n      agents.httpAgent = this.agent.http;\n      agents.baseUrl = this.agent.baseUrl;\n    }\n    request.nodejsSet(agents);\n  }\n  request.open('POST', this.host, true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.timeout = this.timeout;\n  request.withCredentials = this.withCredentials;\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  }\n  return request;\n};\n\n/**\r\n * Should be used to make async request\r\n *\r\n * @method send\r\n * @param {Object} payload\r\n * @param {Function} callback triggered on end with (err, result)\r\n */\nHttpProvider.prototype.send = function (payload, callback) {\n  var _this = this;\n  var request = this._prepareRequest();\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      var result = request.responseText;\n      var error = null;\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n      _this.connected = true;\n      callback(error, result);\n    }\n  };\n  request.ontimeout = function () {\n    _this.connected = false;\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    this.connected = false;\n    callback(errors.InvalidConnection(this.host));\n  }\n};\nHttpProvider.prototype.disconnect = function () {\n  //NO OP\n};\n\n/**\r\n * Returns the desired boolean.\r\n *\r\n * @method supportsSubscriptions\r\n * @returns {boolean}\r\n */\nHttpProvider.prototype.supportsSubscriptions = function () {\n  return false;\n};\nmodule.exports = HttpProvider;","map":null,"metadata":{},"sourceType":"script"}