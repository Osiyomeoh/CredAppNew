{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/** @file jsonrpc.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Aaron Kumavis <aaron@kumavis.me>\r\n * @date 2015\r\n */\n\n\"use strict\";\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n  messageId: 0\n};\n\n/**\r\n * Should be called to valid json create payload object\r\n *\r\n * @method toPayload\r\n * @param {Function} method of jsonrpc call, required\r\n * @param {Array} params, an array of method params, optional\r\n * @returns {Object} valid jsonrpc payload object\r\n */\nJsonrpc.toPayload = function (method, params) {\n  if (!method) {\n    throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n  }\n\n  // advance message ID\n  Jsonrpc.messageId++;\n  return {\n    jsonrpc: '2.0',\n    id: Jsonrpc.messageId,\n    method: method,\n    params: params || []\n  };\n};\n\n/**\r\n * Should be called to check if jsonrpc response is valid\r\n *\r\n * @method isValidResponse\r\n * @param {Object}\r\n * @returns {Boolean} true if response is valid, otherwise false\r\n */\nJsonrpc.isValidResponse = function (response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n  function validateSingleMessage(message) {\n    return !!message && !message.error && message.jsonrpc === '2.0' && (typeof message.id === 'number' || typeof message.id === 'string') && message.result !== undefined; // only undefined is not valid json object\n  }\n};\n\n/**\r\n * Should be called to create batch payload object\r\n *\r\n * @method toBatchPayload\r\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\r\n * @returns {Array} batch payload\r\n */\nJsonrpc.toBatchPayload = function (messages) {\n  return messages.map(function (message) {\n    return Jsonrpc.toPayload(message.method, message.params);\n  });\n};\nmodule.exports = Jsonrpc;","map":null,"metadata":{},"sourceType":"script"}