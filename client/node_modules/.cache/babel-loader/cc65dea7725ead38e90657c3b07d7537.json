{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/**\r\n * @file batch.js\r\n * @author Marek Kotewicz <marek@ethdev.com>\r\n * @date 2015\r\n */\n\n\"use strict\";\n\nvar Jsonrpc = require('./jsonrpc');\nvar errors = require('web3-core-helpers').errors;\nvar Batch = function Batch(requestManager) {\n  this.requestManager = requestManager;\n  this.requests = [];\n};\n\n/**\r\n * Should be called to add create new request to batch request\r\n *\r\n * @method add\r\n * @param {Object} jsonrpc requet object\r\n */\nBatch.prototype.add = function (request) {\n  this.requests.push(request);\n};\n\n/**\r\n * Should be called to execute batch request\r\n *\r\n * @method execute\r\n */\nBatch.prototype.execute = function () {\n  var requests = this.requests;\n  this.requestManager.sendBatch(requests, function (err, results) {\n    results = results || [];\n    requests.map(function (request, index) {\n      return results[index] || {};\n    }).forEach(function (result, index) {\n      if (requests[index].callback) {\n        if (result && result.error) {\n          return requests[index].callback(errors.ErrorResponse(result));\n        }\n        if (!Jsonrpc.isValidResponse(result)) {\n          return requests[index].callback(errors.InvalidResponse(result));\n        }\n        try {\n          requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);\n        } catch (err) {\n          requests[index].callback(err);\n        }\n      }\n    });\n  });\n};\nmodule.exports = Batch;","map":null,"metadata":{},"sourceType":"script"}