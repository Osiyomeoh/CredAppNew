{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nvar _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n  var fetcher = \"Web3LegacyFetcher\";\n  return function (method, params) {\n    var _this = this;\n    var request = {\n      method: method,\n      params: params,\n      id: _nextId++,\n      jsonrpc: \"2.0\"\n    };\n    return new Promise(function (resolve, reject) {\n      _this.emit(\"debug\", {\n        action: \"request\",\n        fetcher: fetcher,\n        request: deepCopy(request),\n        provider: _this\n      });\n      sendFunc(request, function (error, response) {\n        if (error) {\n          _this.emit(\"debug\", {\n            action: \"response\",\n            fetcher: fetcher,\n            error: error,\n            request: request,\n            provider: _this\n          });\n          return reject(error);\n        }\n        _this.emit(\"debug\", {\n          action: \"response\",\n          fetcher: fetcher,\n          request: request,\n          response: response,\n          provider: _this\n        });\n        if (response.error) {\n          var _error = new Error(response.error.message);\n          _error.code = response.error.code;\n          _error.data = response.error.data;\n          return reject(_error);\n        }\n        resolve(response.result);\n      });\n    });\n  };\n}\nfunction buildEip1193Fetcher(provider) {\n  return function (method, params) {\n    var _this2 = this;\n    if (params == null) {\n      params = [];\n    }\n    var request = {\n      method: method,\n      params: params\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      fetcher: \"Eip1193Fetcher\",\n      request: deepCopy(request),\n      provider: this\n    });\n    return provider.request(request).then(function (response) {\n      _this2.emit(\"debug\", {\n        action: \"response\",\n        fetcher: \"Eip1193Fetcher\",\n        request: request,\n        response: response,\n        provider: _this2\n      });\n      return response;\n    }, function (error) {\n      _this2.emit(\"debug\", {\n        action: \"response\",\n        fetcher: \"Eip1193Fetcher\",\n        request: request,\n        error: error,\n        provider: _this2\n      });\n      throw error;\n    });\n  };\n}\nexport var Web3Provider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(Web3Provider, _JsonRpcProvider);\n  function Web3Provider(provider, network) {\n    var _this3;\n    _classCallCheck(this, Web3Provider);\n    if (provider == null) {\n      logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n    }\n    var path = null;\n    var jsonRpcFetchFunc = null;\n    var subprovider = null;\n    if (typeof provider === \"function\") {\n      path = \"unknown:\";\n      jsonRpcFetchFunc = provider;\n    } else {\n      path = provider.host || provider.path || \"\";\n      if (!path && provider.isMetaMask) {\n        path = \"metamask\";\n      }\n      subprovider = provider;\n      if (provider.request) {\n        if (path === \"\") {\n          path = \"eip-1193:\";\n        }\n        jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n      } else if (provider.sendAsync) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n      } else if (provider.send) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n      } else {\n        logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n      }\n      if (!path) {\n        path = \"unknown:\";\n      }\n    }\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Web3Provider).call(this, path, network));\n    defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this3)), \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n    defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this3)), \"provider\", subprovider);\n    return _this3;\n  }\n  _createClass(Web3Provider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      return this.jsonRpcFetchFunc(method, params);\n    }\n  }]);\n  return Web3Provider;\n}(JsonRpcProvider);","map":null,"metadata":{},"sourceType":"module"}