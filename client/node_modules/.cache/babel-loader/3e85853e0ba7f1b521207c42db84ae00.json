{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\USER\\\\Documents\\\\CredAppNew\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\r\n * MIT License\r\n *\r\n * Copyright (c) 2021 Andrew Raffensperger\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n * This is a near carbon-copy of the original source (link below) with the\r\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\r\n *\r\n * See: https://github.com/adraffy/ens-normalize.js\r\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nvar r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nvar VALID = new Set(read_member_array(r));\nvar IGNORED = new Set(read_member_array(r));\nvar MAPPED = read_mapped_map(r);\nvar EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nvar HYPHEN = 0x2D;\nvar UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n  return cps.filter(function (cp) {\n    return cp != 0xFE0F;\n  });\n}\nexport function ens_normalize_post_check(name) {\n  var _iterator = _createForOfIteratorHelper(name.split('.')),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var label = _step.value;\n      var cps = explode_cp(label);\n      try {\n        for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n          if (cps[i] !== UNDERSCORE) {\n            throw new Error(\"underscore only allowed at start\");\n          }\n        }\n        if (cps.length >= 4 && cps.every(function (cp) {\n          return cp < 0x80;\n        }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n          throw new Error(\"invalid label extension\");\n        }\n      } catch (err) {\n        throw new Error(\"Invalid label \\\"\".concat(label, \"\\\": \").concat(err.message));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n  var input = explode_cp(name).reverse(); // flip for pop\n  var output = [];\n  while (input.length) {\n    var emoji = consume_emoji_reversed(input);\n    if (emoji) {\n      output.push.apply(output, _toConsumableArray(emoji_filter(emoji)));\n      continue;\n    }\n    var cp = input.pop();\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n    var cps = MAPPED[cp];\n    if (cps) {\n      output.push.apply(output, _toConsumableArray(cps));\n      continue;\n    }\n    throw new Error(\"Disallowed codepoint: 0x\".concat(cp.toString(16).toUpperCase()));\n  }\n  return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));\n}\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n  var node = EMOJI_ROOT;\n  var emoji;\n  var saved;\n  var stack = [];\n  var pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n  var _loop = function _loop() {\n    var cp = cps[--pos];\n    node = (_a = node.branches.find(function (x) {\n      return x.set.has(cp);\n    })) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) return \"break\";\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) return \"break\";\n    }\n    stack.push(cp);\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n      if (eaten) eaten.push.apply(eaten, _toConsumableArray(cps.slice(pos).reverse())); // copy input (if needed)\n      cps.length = pos; // truncate\n    }\n  };\n  while (pos) {\n    var _ret = _loop();\n    if (_ret === \"break\") break;\n  }\n  return emoji;\n}","map":null,"metadata":{},"sourceType":"module"}