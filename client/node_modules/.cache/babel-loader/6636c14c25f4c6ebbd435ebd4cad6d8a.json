{"ast":null,"code":"import _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport var TwinkleUpdater = /*#__PURE__*/function () {\n  function TwinkleUpdater() {\n    _classCallCheck(this, TwinkleUpdater);\n  }\n  _createClass(TwinkleUpdater, [{\n    key: \"getColorStyles\",\n    value: function getColorStyles(particle, context, radius, opacity) {\n      var pOptions = particle.options,\n        twinkle = pOptions.twinkle.particles,\n        twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n        zIndexOptions = particle.options.zIndex,\n        zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n        twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n        twinkleRgb = colorToHsl(twinkle.color),\n        twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n        res = {},\n        needsTwinkle = twinkling && twinkleStyle;\n      res.fill = needsTwinkle ? twinkleStyle : undefined;\n      res.stroke = needsTwinkle ? twinkleStyle : undefined;\n      return res;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return particle.options.twinkle.particles.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {}\n  }]);\n  return TwinkleUpdater;\n}();","map":null,"metadata":{},"sourceType":"module"}