{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport var NumberCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(NumberCoder, _Coder);\n  function NumberCoder(size, signed, localName) {\n    var _this;\n    _classCallCheck(this, NumberCoder);\n    var name = (signed ? \"int\" : \"uint\") + size * 8;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberCoder).call(this, name, name, localName, false));\n    _this.size = size;\n    _this.signed = signed;\n    return _this;\n  }\n  _createClass(NumberCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      return 0;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      var v = BigNumber.from(value);\n      // Check bounds are safe for encoding\n      var maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n      if (this.signed) {\n        var bounds = maxUintValue.mask(this.size * 8 - 1);\n        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n          this._throwError(\"value out-of-bounds\", value);\n        }\n      } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n        this._throwError(\"value out-of-bounds\", value);\n      }\n      v = v.toTwos(this.size * 8).mask(this.size * 8);\n      if (this.signed) {\n        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n      }\n      return writer.writeValue(v);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var value = reader.readValue().mask(this.size * 8);\n      if (this.signed) {\n        value = value.fromTwos(this.size * 8);\n      }\n      return reader.coerce(this.name, value);\n    }\n  }]);\n  return NumberCoder;\n}(Coder);","map":null,"metadata":{},"sourceType":"module"}