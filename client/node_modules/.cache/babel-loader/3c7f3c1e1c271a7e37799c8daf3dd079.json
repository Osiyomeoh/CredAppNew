{"ast":null,"code":"/**\r\n * Implementation of the multicodec specification.\r\n *\r\n * @module multicodec\r\n * @example\r\n * const multicodec = require('multicodec')\r\n *\r\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\r\n * // prefixedProtobuf 0x50...\r\n *\r\n */\n'use strict';\n\nvar varint = require('varint');\nvar intTable = require('./int-table');\nvar codecNameToCodeVarint = require('./varint-table');\nvar util = require('./util');\nexports = module.exports;\n\n/**\r\n * Prefix a buffer with a multicodec-packed.\r\n *\r\n * @param {string|number} multicodecStrOrCode\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\nexports.addPrefix = function (multicodecStrOrCode, data) {\n  var prefix;\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([prefix, data]);\n};\n\n/**\r\n * Decapsulate the multicodec-packed prefix from the data.\r\n *\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\nexports.rmPrefix = function (data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\n/**\r\n * Get the codec of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {string}\r\n */\nexports.getCodec = function (prefixedData) {\n  var code = varint.decode(prefixedData);\n  var codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n  return codecName;\n};\n\n/**\r\n * Get the name of the codec.\r\n * @param {number} codec\r\n * @returns {string}\r\n */\nexports.getName = function (codec) {\n  return intTable.get(codec);\n};\n\n/**\r\n * Get the code of the codec\r\n * @param {string} name\r\n * @returns {number}\r\n */\nexports.getNumber = function (name) {\n  var code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return util.varintBufferDecode(code)[0];\n};\n\n/**\r\n * Get the code of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {number}\r\n */\nexports.getCode = function (prefixedData) {\n  return varint.decode(prefixedData);\n};\n\n/**\r\n * Get the code as varint of a codec name.\r\n * @param {string} codecName\r\n * @returns {Buffer}\r\n */\nexports.getCodeVarint = function (codecName) {\n  var code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n};\n\n/**\r\n * Get the varint of a code.\r\n * @param {Number} code\r\n * @returns {Array.<number>}\r\n */\nexports.getVarint = function (code) {\n  return varint.encode(code);\n};\n\n// Make the constants top-level constants\nvar constants = require('./constants');\nObject.assign(exports, constants);\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print');","map":null,"metadata":{},"sourceType":"script"}