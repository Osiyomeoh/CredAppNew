{"ast":null,"code":"/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n * @module Multibase\r\n */\n'use strict';\n\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar constants = require('./constants');\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.names = Object.freeze(Object.keys(constants.names));\nexports.codes = Object.freeze(Object.keys(constants.codes));\nvar errNotSupported = new Error('Unsupported encoding');\n\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @memberof Multibase\r\n * @returns {Buffer}\r\n */\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n  var base = getBase(nameOrCode);\n  var codeBuf = Buffer.from(base.code);\n  var name = base.name;\n  validEncode(name, buf);\n  return Buffer.concat([codeBuf, buf]);\n}\n\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n */\nfunction encode(nameOrCode, buf) {\n  var base = getBase(nameOrCode);\n  var name = base.name;\n  return multibase(name, Buffer.from(base.encode(buf)));\n}\n\n/**\r\n * Takes a buffer or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n *\r\n */\nfunction decode(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n  var code = bufOrString.substring(0, 1);\n  bufOrString = bufOrString.substring(1, bufOrString.length);\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString);\n  }\n  var base = getBase(code);\n  return Buffer.from(base.decode(bufOrString.toString()));\n}\n\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {boolean}\r\n * @memberof Multibase\r\n */\nfunction isEncoded(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\n    return false;\n  }\n  var code = bufOrString.substring(0, 1);\n  try {\n    var base = getBase(code);\n    return base.name;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @private\r\n * @returns {undefined}\r\n */\nfunction validEncode(name, buf) {\n  var base = getBase(name);\n  base.decode(buf.toString());\n}\nfunction getBase(nameOrCode) {\n  var base;\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode];\n  } else {\n    throw errNotSupported;\n  }\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet');\n  }\n  return base;\n}","map":null,"metadata":{},"sourceType":"script"}