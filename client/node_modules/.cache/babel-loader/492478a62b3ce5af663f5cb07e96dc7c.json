{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/** @file index.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar oboe = require('oboe');\nvar IpcProvider = function IpcProvider(path, net) {\n  var _this = this;\n  this.responseCallbacks = {};\n  this.notificationCallbacks = [];\n  this.path = path;\n  this.connected = false;\n  this.connection = net.connect({\n    path: this.path\n  });\n  this.addDefaultEvents();\n\n  // LISTEN FOR CONNECTION RESPONSES\n  var callback = function callback(result) {\n    /*jshint maxcomplexity: 6 */\n\n    var id = null;\n\n    // get the id which matches the returned id\n    if (_.isArray(result)) {\n      result.forEach(function (load) {\n        if (_this.responseCallbacks[load.id]) id = load.id;\n      });\n    } else {\n      id = result.id;\n    }\n\n    // notification\n    if (!id && result.method.indexOf('_subscription') !== -1) {\n      _this.notificationCallbacks.forEach(function (callback) {\n        if (_.isFunction(callback)) callback(result);\n      });\n\n      // fire the callback\n    } else if (_this.responseCallbacks[id]) {\n      _this.responseCallbacks[id](null, result);\n      delete _this.responseCallbacks[id];\n    }\n  };\n\n  // use oboe.js for Sockets\n  if (net.constructor.name === 'Socket') {\n    oboe(this.connection).done(callback);\n  } else {\n    this.connection.on('data', function (data) {\n      _this._parseResponse(data.toString()).forEach(callback);\n    });\n  }\n};\n\n/**\r\nWill add the error and end event to timeout existing calls\r\n\r\n@method addDefaultEvents\r\n*/\nIpcProvider.prototype.addDefaultEvents = function () {\n  var _this = this;\n  this.connection.on('connect', function () {\n    _this.connected = true;\n  });\n  this.connection.on('close', function () {\n    _this.connected = false;\n  });\n  this.connection.on('error', function () {\n    _this._timeout();\n  });\n  this.connection.on('end', function () {\n    _this._timeout();\n  });\n  this.connection.on('timeout', function () {\n    _this._timeout();\n  });\n};\n\n/**\r\n Will parse the response and make an array out of it.\r\n\r\n NOTE, this exists for backwards compatibility reasons.\r\n\r\n @method _parseResponse\r\n @param {String} data\r\n */\nIpcProvider.prototype._parseResponse = function (data) {\n  var _this = this,\n    returnValues = [];\n\n  // DE-CHUNKER\n  var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (data) {\n    // prepend the last chunk\n    if (_this.lastChunk) data = _this.lastChunk + data;\n    var result = null;\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      _this.lastChunk = data;\n\n      // start timeout to cancel all requests\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        _this._timeout();\n        throw errors.InvalidResponse(data);\n      }, 1000 * 15);\n      return;\n    }\n\n    // cancel timeout and set chunk to null\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n    if (result) returnValues.push(result);\n  });\n  return returnValues;\n};\n\n/**\r\nGet the adds a callback to the responseCallbacks object,\r\nwhich will be called if a response matching the response Id will arrive.\r\n\r\n@method _addResponseCallback\r\n*/\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n  var id = payload.id || payload[0].id;\n  var method = payload.method || payload[0].method;\n  this.responseCallbacks[id] = callback;\n  this.responseCallbacks[id].method = method;\n};\n\n/**\r\nTimeout all requests when the end/error event is fired\r\n\r\n@method _timeout\r\n*/\nIpcProvider.prototype._timeout = function () {\n  for (var key in this.responseCallbacks) {\n    if (this.responseCallbacks.hasOwnProperty(key)) {\n      this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n      delete this.responseCallbacks[key];\n    }\n  }\n};\n\n/**\r\n Try to reconnect\r\n\r\n @method reconnect\r\n */\nIpcProvider.prototype.reconnect = function () {\n  this.connection.connect({\n    path: this.path\n  });\n};\nIpcProvider.prototype.send = function (payload, callback) {\n  // try reconnect, when connection is gone\n  if (!this.connection.writable) this.connection.connect({\n    path: this.path\n  });\n  this.connection.write(JSON.stringify(payload));\n  this._addResponseCallback(payload, callback);\n};\n\n/**\r\nSubscribes to provider events.provider\r\n\r\n@method on\r\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\nIpcProvider.prototype.on = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.push(callback);\n      break;\n\n    // adds error, end, timeout, connect\n    default:\n      this.connection.on(type, callback);\n      break;\n  }\n};\n\n/**\r\n Subscribes to provider events.provider\r\n\r\n @method on\r\n @param {String} type    'connect', 'error', 'end' or 'data'\r\n @param {Function} callback   the callback to call\r\n */\nIpcProvider.prototype.once = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n  this.connection.once(type, callback);\n};\n\n/**\r\nRemoves event listener\r\n\r\n@method removeListener\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\nIpcProvider.prototype.removeListener = function (type, callback) {\n  var _this = this;\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.forEach(function (cb, index) {\n        if (cb === callback) _this.notificationCallbacks.splice(index, 1);\n      });\n      break;\n    default:\n      this.connection.removeListener(type, callback);\n      break;\n  }\n};\n\n/**\r\nRemoves all event listeners\r\n\r\n@method removeAllListeners\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n*/\nIpcProvider.prototype.removeAllListeners = function (type) {\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks = [];\n      break;\n    default:\n      this.connection.removeAllListeners(type);\n      break;\n  }\n};\n\n/**\r\nResets the providers, clears all callbacks\r\n\r\n@method reset\r\n*/\nIpcProvider.prototype.reset = function () {\n  this._timeout();\n  this.notificationCallbacks = [];\n  this.connection.removeAllListeners('error');\n  this.connection.removeAllListeners('end');\n  this.connection.removeAllListeners('timeout');\n  this.addDefaultEvents();\n};\n\n/**\r\n * Returns the desired boolean.\r\n *\r\n * @method supportsSubscriptions\r\n * @returns {boolean}\r\n */\nIpcProvider.prototype.supportsSubscriptions = function () {\n  return true;\n};\nmodule.exports = IpcProvider;","map":null,"metadata":{},"sourceType":"script"}