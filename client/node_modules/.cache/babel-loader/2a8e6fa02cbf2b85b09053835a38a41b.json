{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\nvar _componentOrElement = _interopRequireDefault(require(\"prop-types-extra/lib/componentOrElement\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _Portal = _interopRequireDefault(require(\"./Portal\"));\nvar _RootCloseWrapper = _interopRequireDefault(require(\"./RootCloseWrapper\"));\nvar _reactPopper = require(\"react-popper\");\nvar _forwardRef = _interopRequireDefault(require(\"react-context-toolbox/forwardRef\"));\nvar _WaitForContainer = _interopRequireDefault(require(\"./WaitForContainer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\n/**\n * Built on top of `<Position/>` and `<Portal/>`, the overlay component is\n * great for custom tooltip overlays.\n */\nvar Overlay = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Overlay, _React$Component);\n  function Overlay(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleHidden = function () {\n      _this.setState({\n        exited: true\n      });\n      if (_this.props.onExited) {\n        var _this$props;\n        (_this$props = _this.props).onExited.apply(_this$props, arguments);\n      }\n    };\n    _this.state = {\n      exited: !props.show\n    };\n    _this.onHiddenListener = _this.handleHidden.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._lastTarget = null;\n    return _this;\n  }\n  Overlay.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (nextProps.show) {\n      return {\n        exited: false\n      };\n    } else if (!nextProps.transition) {\n      // Otherwise let handleHidden take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n    return null;\n  };\n  var _proto = Overlay.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.setState({\n      target: this.getTarget()\n    });\n  };\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props === prevProps) return;\n    var target = this.getTarget();\n    if (target !== this.state.target) {\n      this.setState({\n        target: target\n      });\n    }\n  };\n  _proto.getTarget = function getTarget() {\n    var target = this.props.target;\n    target = typeof target === 'function' ? target() : target;\n    return target && _reactDom.default.findDOMNode(target) || null;\n  };\n  _proto.render = function render() {\n    var _this2 = this;\n    var _this$props2 = this.props,\n      _0 = _this$props2.target,\n      container = _this$props2.container,\n      containerPadding = _this$props2.containerPadding,\n      placement = _this$props2.placement,\n      rootClose = _this$props2.rootClose,\n      children = _this$props2.children,\n      flip = _this$props2.flip,\n      _this$props2$popperCo = _this$props2.popperConfig,\n      popperConfig = _this$props2$popperCo === void 0 ? {} : _this$props2$popperCo,\n      Transition = _this$props2.transition,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"target\", \"container\", \"containerPadding\", \"placement\", \"rootClose\", \"children\", \"flip\", \"popperConfig\", \"transition\"]);\n    var target = this.state.target; // Don't un-render the overlay while it's transitioning out.\n\n    var mountOverlay = props.show || Transition && !this.state.exited;\n    if (!mountOverlay) {\n      // Don't bother showing anything if we don't have to.\n      return null;\n    }\n    var child = children;\n    var _popperConfig$modifie = popperConfig.modifiers,\n      modifiers = _popperConfig$modifie === void 0 ? {} : _popperConfig$modifie;\n    var popperProps = _extends({}, popperConfig, {\n      placement: placement,\n      referenceElement: target,\n      enableEvents: props.show,\n      modifiers: _extends({}, modifiers, {\n        preventOverflow: _extends({\n          padding: containerPadding || 5\n        }, modifiers.preventOverflow),\n        flip: _extends({\n          enabled: !!flip\n        }, modifiers.preventOverflow)\n      })\n    });\n    child = _react.default.createElement(_reactPopper.Popper, popperProps, function (_ref) {\n      var arrowProps = _ref.arrowProps,\n        style = _ref.style,\n        ref = _ref.ref,\n        popper = _objectWithoutPropertiesLoose(_ref, [\"arrowProps\", \"style\", \"ref\"]);\n      _this2.popper = popper;\n      var innerChild = _this2.props.children(_extends({}, popper, {\n        // popper doesn't set the initial placement\n        placement: popper.placement || placement,\n        show: props.show,\n        arrowProps: arrowProps,\n        props: {\n          ref: ref,\n          style: style\n        }\n      }));\n      if (Transition) {\n        var onExit = props.onExit,\n          onExiting = props.onExiting,\n          onEnter = props.onEnter,\n          onEntering = props.onEntering,\n          onEntered = props.onEntered;\n        innerChild = _react.default.createElement(Transition, {\n          in: props.show,\n          appear: true,\n          onExit: onExit,\n          onExiting: onExiting,\n          onExited: _this2.onHiddenListener,\n          onEnter: onEnter,\n          onEntering: onEntering,\n          onEntered: onEntered\n        }, innerChild);\n      }\n      return innerChild;\n    });\n    if (rootClose) {\n      child = _react.default.createElement(_RootCloseWrapper.default, {\n        onRootClose: props.onHide,\n        event: props.rootCloseEvent,\n        disabled: props.rootCloseDisabled\n      }, child);\n    }\n    return _react.default.createElement(_Portal.default, {\n      container: container\n    }, child);\n  };\n  return Overlay;\n}(_react.default.Component);\nOverlay.propTypes = _extends({}, _Portal.default.propTypes, {\n  /**\n   * Set the visibility of the Overlay\n   */\n  show: _propTypes.default.bool,\n  /** Specify where the overlay element is positioned in relation to the target element */\n  placement: _propTypes.default.oneOf(_reactPopper.placements),\n  /**\n   * A Node, Component instance, or function that returns either. The `container` will have the Portal children\n   * appended to it.\n   */\n  container: _propTypes.default.oneOfType([_componentOrElement.default, _propTypes.default.func]),\n  /**\n   * Enables the Popper.js `flip` modifier, allowing the Overlay to\n   * automatically adjust it's placement in case of overlap with the viewport or toggle.\n   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info\n   */\n  flip: _propTypes.default.bool,\n  /**\n   * A render prop that returns an element to overlay and position. See\n   * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   placement: Placement,\n   *   outOfBoundaries: ?boolean,\n   *   scheduleUpdate: () => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     style: { [string]: string | number },\n   *     aria-labelledby: ?string\n   *   },\n   *   arrowProps: {\n   *     ref: (?HTMLElement) => void,\n   *     style: { [string]: string | number },\n   *   },\n   * }) => React.Element}\n   */\n  children: _propTypes.default.func.isRequired,\n  /**\n   * A set of popper options and props passed directly to react-popper's Popper component.\n   */\n  popperConfig: _propTypes.default.object,\n  /**\n   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay\n   */\n  rootClose: _propTypes.default.bool,\n  /**\n   * Specify event for toggling overlay\n   */\n  rootCloseEvent: _RootCloseWrapper.default.propTypes.event,\n  /**\n   * Specify disabled for disable RootCloseWrapper\n   */\n  rootCloseDisabled: _RootCloseWrapper.default.propTypes.disabled,\n  /**\n   * A Callback fired by the Overlay when it wishes to be hidden.\n   *\n   * __required__ when `rootClose` is `true`.\n   *\n   * @type func\n   */\n  onHide: function onHide(props) {\n    var propType = _propTypes.default.func;\n    if (props.rootClose) {\n      propType = propType.isRequired;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return propType.apply(void 0, [props].concat(args));\n  },\n  /**\n   * A `react-transition-group@2.0.0` `<Transition/>` component\n   * used to animate the overlay as it changes visibility.\n   */\n  transition: _elementType.default,\n  /**\n   * Callback fired before the Overlay transitions in\n   */\n  onEnter: _propTypes.default.func,\n  /**\n   * Callback fired as the Overlay begins to transition in\n   */\n  onEntering: _propTypes.default.func,\n  /**\n   * Callback fired after the Overlay finishes transitioning in\n   */\n  onEntered: _propTypes.default.func,\n  /**\n   * Callback fired right before the Overlay transitions out\n   */\n  onExit: _propTypes.default.func,\n  /**\n   * Callback fired as the Overlay begins to transition out\n   */\n  onExiting: _propTypes.default.func,\n  /**\n   * Callback fired after the Overlay finishes transitioning out\n   */\n  onExited: _propTypes.default.func\n});\nvar _default = (0, _forwardRef.default)(function (props, ref) {\n  return (\n    // eslint-disable-next-line react/prop-types\n    _react.default.createElement(_WaitForContainer.default, {\n      container: props.container\n    }, function (container) {\n      return _react.default.createElement(Overlay, _extends({}, props, {\n        ref: ref,\n        container: container\n      }));\n    })\n  );\n}, {\n  displayName: 'withContainer(Overlay)'\n});\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}