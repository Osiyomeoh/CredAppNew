{"ast":null,"code":"'use strict';\n\nvar _construct = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/construct\");\nvar _defineProperty = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\nfunction withIs(Class, _ref) {\n  var className = _ref.className,\n    symbolName = _ref.symbolName;\n  var symbol = Symbol.for(symbolName);\n  var ClassIsWrapper = _defineProperty({}, className, /*#__PURE__*/function (_Class) {\n    _inherits(_class, _Class);\n    function _class() {\n      var _getPrototypeOf2;\n      var _this2;\n      _classCallCheck(this, _class);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), symbol, {\n        value: true\n      });\n      return _this2;\n    }\n    _createClass(_class, [{\n      key: Symbol.toStringTag,\n      get: function get() {\n        return className;\n      }\n    }]);\n    return _class;\n  }(Class))[className];\n  ClassIsWrapper[\"is\".concat(className)] = function (obj) {\n    return !!(obj && obj[symbol]);\n  };\n  return ClassIsWrapper;\n}\nfunction withIsProto(Class, _ref2) {\n  var className = _ref2.className,\n    symbolName = _ref2.symbolName,\n    withoutNew = _ref2.withoutNew;\n  var symbol = Symbol.for(symbolName);\n\n  /* eslint-disable object-shorthand */\n  var ClassIsWrapper = _defineProperty({}, className, function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (withoutNew && !(this instanceof ClassIsWrapper)) {\n      return _construct(ClassIsWrapper, args);\n    }\n    var _this = Class.call.apply(Class, [this].concat(args)) || this;\n    if (_this && !_this[symbol]) {\n      Object.defineProperty(_this, symbol, {\n        value: true\n      });\n    }\n    return _this;\n  })[className];\n  /* eslint-enable object-shorthand */\n\n  ClassIsWrapper.prototype = Object.create(Class.prototype);\n  ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n    get: function get() {\n      return className;\n    }\n  });\n  ClassIsWrapper[\"is\".concat(className)] = function (obj) {\n    return !!(obj && obj[symbol]);\n  };\n  return ClassIsWrapper;\n}\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;","map":null,"metadata":{},"sourceType":"script"}