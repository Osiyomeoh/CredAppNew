{"ast":null,"code":"// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\nvar Bytes = require(\"eth-lib/lib/bytes\");\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n  var length = Bytes.length(data);\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n  var maxSize = 4096;\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n  var innerNodes = [];\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\nmodule.exports = swarmHash;","map":null,"metadata":{},"sourceType":"script"}