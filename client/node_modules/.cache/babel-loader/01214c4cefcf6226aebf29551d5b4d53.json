{"ast":null,"code":"/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n/**\r\n * @file givenProvider.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\n\"use strict\";\n\nvar givenProvider = null;\n\n// ADD GIVEN PROVIDER\n/* jshint ignore:start */\nvar global;\ntry {\n  global = Function('return this')();\n} catch (e) {\n  global = window;\n}\n\n// EIP-1193: window.ethereum\nif (typeof global.ethereum !== 'undefined') {\n  givenProvider = global.ethereum;\n\n  // Legacy web3.currentProvider\n} else if (typeof global.web3 !== 'undefined' && global.web3.currentProvider) {\n  if (global.web3.currentProvider.sendAsync) {\n    global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;\n    delete global.web3.currentProvider.sendAsync;\n  }\n\n  // if connection is 'ipcProviderWrapper', add subscription support\n  if (!global.web3.currentProvider.on && global.web3.currentProvider.connection && global.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {\n    global.web3.currentProvider.on = function (type, callback) {\n      if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n      switch (type) {\n        case 'data':\n          this.connection.on('data', function (data) {\n            var result = '';\n            data = data.toString();\n            try {\n              result = JSON.parse(data);\n            } catch (e) {\n              return callback(new Error('Couldn\\'t parse response data' + data));\n            }\n\n            // notification\n            if (!result.id && result.method.indexOf('_subscription') !== -1) {\n              callback(null, result);\n            }\n          });\n          break;\n        default:\n          this.connection.on(type, callback);\n          break;\n      }\n    };\n  }\n  givenProvider = global.web3.currentProvider;\n}\n/* jshint ignore:end */\n\nmodule.exports = givenProvider;","map":null,"metadata":{},"sourceType":"script"}