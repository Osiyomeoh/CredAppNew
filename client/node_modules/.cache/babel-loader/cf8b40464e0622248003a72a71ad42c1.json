{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/**\r\n * @file iban.js\r\n *\r\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\r\n *\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2015\r\n */\n\n\"use strict\";\n\nvar utils = require('web3-utils');\nvar BigNumber = require('bn.js');\nvar leftPad = function leftPad(string, bytes) {\n  var result = string;\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/**\r\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n *\r\n * @method iso13616Prepare\r\n * @param {String} iban the IBAN\r\n * @returns {String} the prepared IBAN\r\n */\nvar iso13616Prepare = function iso13616Prepare(iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n\n/**\r\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n *\r\n * @method mod9710\r\n * @param {String} iban\r\n * @returns {Number}\r\n */\nvar mod9710 = function mod9710(iban) {\n  var remainder = iban,\n    block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n  return parseInt(remainder, 10) % 97;\n};\n\n/**\r\n * This prototype should be used to create iban object from iban correct string\r\n *\r\n * @param {String} iban\r\n */\nvar Iban = function Iban(iban) {\n  this._iban = iban;\n};\n\n/**\r\n * This method should be used to create an ethereum address from a direct iban address\r\n *\r\n * @method toAddress\r\n * @param {String} iban address\r\n * @return {String} the ethereum address\r\n */\nIban.toAddress = function (ib) {\n  ib = new Iban(ib);\n  if (!ib.isDirect()) {\n    throw new Error('IBAN is indirect and can\\'t be converted');\n  }\n  return ib.toAddress();\n};\n\n/**\r\n * This method should be used to create iban address from an ethereum address\r\n *\r\n * @method toIban\r\n * @param {String} address\r\n * @return {String} the IBAN address\r\n */\nIban.toIban = function (address) {\n  return Iban.fromAddress(address).toString();\n};\n\n/**\r\n * This method should be used to create iban object from an ethereum address\r\n *\r\n * @method fromAddress\r\n * @param {String} address\r\n * @return {Iban} the IBAN object\r\n */\nIban.fromAddress = function (address) {\n  if (!utils.isAddress(address)) {\n    throw new Error('Provided address is not a valid address: ' + address);\n  }\n  address = address.replace('0x', '').replace('0X', '');\n  var asBn = new BigNumber(address, 16);\n  var base36 = asBn.toString(36);\n  var padded = leftPad(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\r\n * Convert the passed BBAN to an IBAN for this country specification.\r\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n *\r\n * @method fromBban\r\n * @param {String} bban the BBAN to convert to IBAN\r\n * @returns {Iban} the IBAN object\r\n */\nIban.fromBban = function (bban) {\n  var countryCode = 'XE';\n  var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n  var checkDigit = ('0' + (98 - remainder)).slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\r\n * Should be used to create IBAN object for given institution and identifier\r\n *\r\n * @method createIndirect\r\n * @param {Object} options, required options are \"institution\" and \"identifier\"\r\n * @return {Iban} the IBAN object\r\n */\nIban.createIndirect = function (options) {\n  return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\r\n * This method should be used to check if given string is valid iban object\r\n *\r\n * @method isValid\r\n * @param {String} iban string\r\n * @return {Boolean} true if it is valid IBAN\r\n */\nIban.isValid = function (iban) {\n  var i = new Iban(iban);\n  return i.isValid();\n};\n\n/**\r\n * Should be called to check if iban is correct\r\n *\r\n * @method isValid\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\r\n * Should be called to check if iban number is direct\r\n *\r\n * @method isDirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\r\n * Should be called to check if iban number if indirect\r\n *\r\n * @method isIndirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n\n/**\r\n * Should be called to get iban checksum\r\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\r\n *\r\n * @method checksum\r\n * @returns {String} checksum\r\n */\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n\n/**\r\n * Should be called to get institution identifier\r\n * eg. XREG\r\n *\r\n * @method institution\r\n * @returns {String} institution identifier\r\n */\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\r\n * Should be called to get client identifier within institution\r\n * eg. GAVOFYORK\r\n *\r\n * @method client\r\n * @returns {String} client identifier\r\n */\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\r\n * Should be called to get client direct address\r\n *\r\n * @method toAddress\r\n * @returns {String} ethereum address\r\n */\nIban.prototype.toAddress = function () {\n  if (this.isDirect()) {\n    var base36 = this._iban.substr(4);\n    var asBn = new BigNumber(base36, 36);\n    return utils.toChecksumAddress(asBn.toString(16, 20));\n  }\n  return '';\n};\nIban.prototype.toString = function () {\n  return this._iban;\n};\nmodule.exports = Iban;","map":null,"metadata":{},"sourceType":"script"}