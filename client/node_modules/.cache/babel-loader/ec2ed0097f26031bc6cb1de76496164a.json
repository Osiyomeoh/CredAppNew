{"ast":null,"code":"import _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateAngle(particle, delta) {\n  var _a;\n  var rotate = particle.rotate;\n  if (!rotate) {\n    return;\n  }\n  var rotateOptions = particle.options.rotate;\n  var rotateAnimation = rotateOptions.animation;\n  var speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  var max = 2 * Math.PI;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case 0:\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case 1:\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n}\nexport var AngleUpdater = /*#__PURE__*/function () {\n  function AngleUpdater(container) {\n    _classCallCheck(this, AngleUpdater);\n    this.container = container;\n  }\n  _createClass(AngleUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rotateOptions = particle.options.rotate;\n      particle.rotate = {\n        enable: rotateOptions.animation.enable,\n        value: getRangeValue(rotateOptions.value) * Math.PI / 180\n      };\n      var rotateDirection = rotateOptions.direction;\n      if (rotateDirection === \"random\") {\n        var index = Math.floor(Math.random() * 2);\n        rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (rotateDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.rotate.status = 1;\n          break;\n        case \"clockwise\":\n          particle.rotate.status = 0;\n          break;\n      }\n      var rotateAnimation = particle.options.rotate.animation;\n      if (rotateAnimation.enable) {\n        particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!rotateAnimation.sync) {\n          particle.rotate.velocity *= Math.random();\n        }\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateAngle(particle, delta);\n    }\n  }]);\n  return AngleUpdater;\n}();","map":null,"metadata":{},"sourceType":"module"}