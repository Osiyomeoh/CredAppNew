{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _require = require('util'),\n  callbackify = _require.callbackify;\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this;\n\n  // autodetect provider\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider);\n\n      // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider);\n\n      // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  }\n\n  // reset the old one before changing, if still connected\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null;\n\n  // listen to incoming notifications\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function data(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n      // check for result.method, to prevent old providers errors to pass as result\n      if (result.method && _this.subscriptions.has(result.params.subscription)) {\n        _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n      }\n    });\n\n    // resubscribe if the provider has reconnected\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    });\n\n    // notify all subscriptions about the error condition\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    });\n\n    // notify all subscriptions about bad close conditions\n    this.provider.on('close', function close(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    });\n\n    // TODO add end, timeout??\n  }\n};\n\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  var onJsonrpcResult = function onJsonrpcResult(err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(\"Wrong response id \".concat(result.id, \" (expected: \").concat(payload.id, \") in \").concat(JSON.stringify(payload))));\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n    callback(null, result.result);\n  };\n  if (this.provider.request) {\n    callbackify(this.provider.request.bind(this.provider))(payload, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(payload, onJsonrpcResult);\n  } else if (this.provider.send) {\n    this.provider.send(payload, onJsonrpcResult);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n    callback(null, results);\n  });\n};\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type;\n\n    // remove subscription first to avoid reentry\n    this.subscriptions.delete(id);\n\n    // then, try to actually unsubscribe\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this;\n\n  // uninstall all subscriptions\n  if (this.subscriptions.size > 0) {\n    this.subscriptions.forEach(function (value, id) {\n      if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n    });\n  }\n\n  //  reset notification callbacks etc.\n  if (this.provider.reset) this.provider.reset();\n};\n\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":null,"metadata":{},"sourceType":"script"}