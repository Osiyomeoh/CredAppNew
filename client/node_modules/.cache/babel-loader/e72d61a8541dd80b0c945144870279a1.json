{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\USER\\\\Documents\\\\CredAppNew\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Documents\\\\CredAppNew\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { colorToRgb, getLinkColor } from \"../../../Utils/ColorUtils\";\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"../../../Utils/CanvasUtils\";\nimport { getDistance, getRangeValue } from \"../../../Utils/NumberUtils\";\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n    this.container = container;\n  }\n  _createClass(LinkInstance, [{\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      var linkParticle = particle;\n      linkParticle.links = [];\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _this = this;\n      var linkParticle = particle,\n        container = this.container,\n        particles = container.particles,\n        pOptions = particle.options;\n      if (linkParticle.links.length <= 0) {\n        return;\n      }\n      context.save();\n      var p1Links = linkParticle.links.filter(function (l) {\n        var linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n        return linkFreq <= pOptions.links.frequency;\n      });\n      var _iterator = _createForOfIteratorHelper(p1Links),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var link = _step.value;\n          var p2 = link.destination;\n          if (pOptions.links.triangles.enable) {\n            var links = p1Links.map(function (l) {\n                return l.destination;\n              }),\n              vertices = p2.links.filter(function (t) {\n                var linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n              });\n            if (vertices.length) {\n              var _iterator2 = _createForOfIteratorHelper(vertices),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var vertex = _step2.value;\n                  var p3 = vertex.destination,\n                    triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n                  if (triangleFreq > pOptions.links.triangles.frequency) {\n                    continue;\n                  }\n                  _this.drawLinkTriangle(linkParticle, link, vertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n          if (link.opacity > 0 && container.retina.linksWidth > 0) {\n            _this.drawLinkLine(linkParticle, link);\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      context.restore();\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n      var container = this.container,\n        options = container.actualOptions,\n        p2 = link1.destination,\n        p3 = link2.destination,\n        triangleOptions = p1.options.links.triangles,\n        opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n      if (opacityTriangle <= 0) {\n        return;\n      }\n      var pos1 = p1.getPosition(),\n        pos2 = p2.getPosition(),\n        pos3 = p3.getPosition();\n      container.canvas.draw(function (ctx) {\n        if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n          return;\n        }\n        var colorTriangle = colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n            linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorTriangle) {\n          return;\n        }\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n        options = container.actualOptions,\n        p2 = link.destination,\n        pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b;\n        var colorLine;\n        var twinkle = p1.options.twinkle.lines;\n        if (twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n            twinkleRgb = colorToRgb(twinkle.color),\n            twinkling = Math.random() < twinkleFreq;\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n            linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorLine) {\n          return;\n        }\n        var width = (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth,\n          maxDistance = (_b = p1.retina.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }]);\n  return LinkInstance;\n}();","map":null,"metadata":{},"sourceType":"module"}