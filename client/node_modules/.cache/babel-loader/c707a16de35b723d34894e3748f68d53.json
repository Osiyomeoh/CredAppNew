{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\nvar _contains = _interopRequireDefault(require(\"dom-helpers/query/contains\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _warning = _interopRequireDefault(require(\"warning\"));\nvar _Overlay = _interopRequireDefault(require(\"./Overlay\"));\nvar RefHolder = /*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(RefHolder, _React$Component);\n  function RefHolder() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n  var _proto = RefHolder.prototype;\n  _proto.render = function render() {\n    return this.props.children;\n  };\n  return RefHolder;\n}(_react.default.Component);\nvar normalizeDelay = function normalizeDelay(delay) {\n  return delay && typeof delay === 'object' ? delay : {\n    show: delay,\n    hide: delay\n  };\n};\nvar defaultProps = {\n  defaultOverlayShown: false,\n  trigger: ['hover', 'focus']\n}; // eslint-disable-next-line react/no-multi-comp\n\nvar OverlayTrigger = /*#__PURE__*/\nfunction (_React$Component2) {\n  (0, _inheritsLoose2.default)(OverlayTrigger, _React$Component2);\n  function OverlayTrigger(props, context) {\n    var _this;\n    _this = _React$Component2.call(this, props, context) || this;\n    _this.getTarget = function () {\n      return _reactDom.default.findDOMNode(_this.trigger.current);\n    };\n    _this.handleShow = function () {\n      clearTimeout(_this._timeout);\n      _this._hoverState = 'show';\n      var delay = normalizeDelay(_this.props.delay);\n      if (!delay.show) {\n        _this.show();\n        return;\n      }\n      _this._timeout = setTimeout(function () {\n        if (_this._hoverState === 'show') _this.show();\n      }, delay.show);\n    };\n    _this.handleHide = function () {\n      clearTimeout(_this._timeout);\n      _this._hoverState = 'hide';\n      var delay = normalizeDelay(_this.props.delay);\n      if (!delay.hide) {\n        _this.hide();\n        return;\n      }\n      _this._timeout = setTimeout(function () {\n        if (_this._hoverState === 'hide') _this.hide();\n      }, delay.hide);\n    };\n    _this.handleFocus = function (e) {\n      var _this$getChildProps = _this.getChildProps(),\n        onFocus = _this$getChildProps.onFocus;\n      _this.handleShow(e);\n      if (onFocus) onFocus(e);\n    };\n    _this.handleBlur = function (e) {\n      var _this$getChildProps2 = _this.getChildProps(),\n        onBlur = _this$getChildProps2.onBlur;\n      _this.handleHide(e);\n      if (onBlur) onBlur(e);\n    };\n    _this.handleClick = function (e) {\n      var _this$getChildProps3 = _this.getChildProps(),\n        onClick = _this$getChildProps3.onClick;\n      if (_this.state.show) _this.hide();else _this.show();\n      if (onClick) onClick(e);\n    };\n    _this.handleMouseOver = function (e) {\n      _this.handleMouseOverOut(_this.handleShow, e, 'fromElement');\n    };\n    _this.handleMouseOut = function (e) {\n      return _this.handleMouseOverOut(_this.handleHide, e, 'toElement');\n    };\n    _this.trigger = _react.default.createRef();\n    _this.state = {\n      show: !!props.defaultShow\n    }; // We add aria-describedby in the case where the overlay is a role=\"tooltip\"\n    // for other cases describedby isn't appropriate (e.g. a popover with inputs) so we don't add it.\n\n    _this.ariaModifier = {\n      enabled: true,\n      order: 900,\n      fn: function fn(data) {\n        var popper = data.instance.popper;\n        var target = _this.getTarget();\n        if (!_this.state.show || !target) return data;\n        var role = popper.getAttribute('role') || '';\n        if (popper.id && role.toLowerCase() === 'tooltip') {\n          target.setAttribute('aria-describedby', popper.id);\n        }\n        return data;\n      }\n    };\n    return _this;\n  }\n  var _proto2 = OverlayTrigger.prototype;\n  _proto2.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this._timeout);\n  };\n  _proto2.getChildProps = function getChildProps() {\n    return _react.default.Children.only(this.props.children).props;\n  };\n\n  // Simple implementation of mouseEnter and mouseLeave.\n  // React's built version is broken: https://github.com/facebook/react/issues/4251\n  // for cases when the trigger is disabled and mouseOut/Over can cause flicker\n  // moving from one child element to another.\n  _proto2.handleMouseOverOut = function handleMouseOverOut(handler, e, relatedNative) {\n    var target = e.currentTarget;\n    var related = e.relatedTarget || e.nativeEvent[relatedNative];\n    if ((!related || related !== target) && !(0, _contains.default)(target, related)) {\n      handler(e);\n    }\n  };\n  _proto2.hide = function hide() {\n    this.setState({\n      show: false\n    });\n  };\n  _proto2.show = function show() {\n    this.setState({\n      show: true\n    });\n  };\n  _proto2.render = function render() {\n    var _this$props = this.props,\n      trigger = _this$props.trigger,\n      overlay = _this$props.overlay,\n      children = _this$props.children,\n      _this$props$popperCon = _this$props.popperConfig,\n      popperConfig = _this$props$popperCon === void 0 ? {} : _this$props$popperCon,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"trigger\", \"overlay\", \"children\", \"popperConfig\"]);\n    delete props.delay;\n    delete props.defaultShow;\n    var child = _react.default.Children.only(children);\n    var triggerProps = {};\n    var triggers = trigger == null ? [] : [].concat(trigger);\n    if (triggers.indexOf('click') !== -1) {\n      triggerProps.onClick = this.handleClick;\n    }\n    if (triggers.indexOf('focus') !== -1) {\n      triggerProps.onFocus = this.handleShow;\n      triggerProps.onBlur = this.handleHide;\n    }\n    if (triggers.indexOf('hover') !== -1) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(triggers.length >= 1, '[react-bootstrap] Specifying only the `\"hover\"` trigger limits the ' + 'visibility of the overlay to just mouse users. Consider also ' + 'including the `\"focus\"` trigger so that touch and keyboard only ' + 'users can see the overlay as well.') : void 0;\n      triggerProps.onMouseOver = this.handleMouseOver;\n      triggerProps.onMouseOut = this.handleMouseOut;\n    }\n    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(RefHolder, {\n      ref: this.trigger\n    }, (0, _react.cloneElement)(child, triggerProps)), _react.default.createElement(_Overlay.default, (0, _extends2.default)({}, props, {\n      popperConfig: (0, _extends2.default)({}, popperConfig, {\n        modifiers: (0, _extends2.default)({}, popperConfig.modifiers, {\n          ariaModifier: this.ariaModifier\n        })\n      }),\n      show: this.state.show,\n      onHide: this.handleHide,\n      target: this.getTarget\n    }), overlay));\n  };\n  return OverlayTrigger;\n}(_react.default.Component);\nOverlayTrigger.defaultProps = defaultProps;\nvar _default = OverlayTrigger;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}