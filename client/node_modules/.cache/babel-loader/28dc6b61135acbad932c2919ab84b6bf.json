{"ast":null,"code":"/* jshint node: true */\n(function () {\n  \"use strict\";\n\n  function CookieAccessInfo(domain, path, secure, script) {\n    if (this instanceof CookieAccessInfo) {\n      this.domain = domain || undefined;\n      this.path = path || \"/\";\n      this.secure = !!secure;\n      this.script = !!script;\n      return this;\n    }\n    return new CookieAccessInfo(domain, path, secure, script);\n  }\n  CookieAccessInfo.All = Object.freeze(Object.create(null));\n  exports.CookieAccessInfo = CookieAccessInfo;\n  function Cookie(cookiestr, request_domain, request_path) {\n    if (cookiestr instanceof Cookie) {\n      return cookiestr;\n    }\n    if (this instanceof Cookie) {\n      this.name = null;\n      this.value = null;\n      this.expiration_date = Infinity;\n      this.path = String(request_path || \"/\");\n      this.explicit_path = false;\n      this.domain = request_domain || null;\n      this.explicit_domain = false;\n      this.secure = false; //how to define default?\n      this.noscript = false; //httponly\n      if (cookiestr) {\n        this.parse(cookiestr, request_domain, request_path);\n      }\n      return this;\n    }\n    return new Cookie(cookiestr, request_domain, request_path);\n  }\n  exports.Cookie = Cookie;\n  Cookie.prototype.toString = function toString() {\n    var str = [this.name + \"=\" + this.value];\n    if (this.expiration_date !== Infinity) {\n      str.push(\"expires=\" + new Date(this.expiration_date).toGMTString());\n    }\n    if (this.domain) {\n      str.push(\"domain=\" + this.domain);\n    }\n    if (this.path) {\n      str.push(\"path=\" + this.path);\n    }\n    if (this.secure) {\n      str.push(\"secure\");\n    }\n    if (this.noscript) {\n      str.push(\"httponly\");\n    }\n    return str.join(\"; \");\n  };\n  Cookie.prototype.toValueString = function toValueString() {\n    return this.name + \"=\" + this.value;\n  };\n  var cookie_str_splitter = /[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;\n  Cookie.prototype.parse = function parse(str, request_domain, request_path) {\n    if (this instanceof Cookie) {\n      if (str.length > 32768) {\n        console.warn(\"Cookie too long for parsing (>32768 characters)\");\n        return;\n      }\n      var parts = str.split(\";\").filter(function (value) {\n        return !!value;\n      });\n      var i;\n      var pair = parts[0].match(/([^=]+)=([\\s\\S]*)/);\n      if (!pair) {\n        console.warn(\"Invalid cookie header encountered. Header: '\" + str + \"'\");\n        return;\n      }\n      var key = pair[1];\n      var value = pair[2];\n      if (typeof key !== 'string' || key.length === 0 || typeof value !== 'string') {\n        console.warn(\"Unable to extract values from cookie header. Cookie: '\" + str + \"'\");\n        return;\n      }\n      this.name = key;\n      this.value = value;\n      for (i = 1; i < parts.length; i += 1) {\n        pair = parts[i].match(/([^=]+)(?:=([\\s\\S]*))?/);\n        key = pair[1].trim().toLowerCase();\n        value = pair[2];\n        switch (key) {\n          case \"httponly\":\n            this.noscript = true;\n            break;\n          case \"expires\":\n            this.expiration_date = value ? Number(Date.parse(value)) : Infinity;\n            break;\n          case \"path\":\n            this.path = value ? value.trim() : \"\";\n            this.explicit_path = true;\n            break;\n          case \"domain\":\n            this.domain = value ? value.trim() : \"\";\n            this.explicit_domain = !!this.domain;\n            break;\n          case \"secure\":\n            this.secure = true;\n            break;\n        }\n      }\n      if (!this.explicit_path) {\n        this.path = request_path || \"/\";\n      }\n      if (!this.explicit_domain) {\n        this.domain = request_domain;\n      }\n      return this;\n    }\n    return new Cookie().parse(str, request_domain, request_path);\n  };\n  Cookie.prototype.matches = function matches(access_info) {\n    if (access_info === CookieAccessInfo.All) {\n      return true;\n    }\n    if (this.noscript && access_info.script || this.secure && !access_info.secure || !this.collidesWith(access_info)) {\n      return false;\n    }\n    return true;\n  };\n  Cookie.prototype.collidesWith = function collidesWith(access_info) {\n    if (this.path && !access_info.path || this.domain && !access_info.domain) {\n      return false;\n    }\n    if (this.path && access_info.path.indexOf(this.path) !== 0) {\n      return false;\n    }\n    if (this.explicit_path && access_info.path.indexOf(this.path) !== 0) {\n      return false;\n    }\n    var access_domain = access_info.domain && access_info.domain.replace(/^[\\.]/, '');\n    var cookie_domain = this.domain && this.domain.replace(/^[\\.]/, '');\n    if (cookie_domain === access_domain) {\n      return true;\n    }\n    if (cookie_domain) {\n      if (!this.explicit_domain) {\n        return false; // we already checked if the domains were exactly the same\n      }\n\n      var wildcard = access_domain.indexOf(cookie_domain);\n      if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {\n        return false;\n      }\n      return true;\n    }\n    return true;\n  };\n  function CookieJar() {\n    var cookies, cookies_list, collidable_cookie;\n    if (this instanceof CookieJar) {\n      cookies = Object.create(null); //name: [Cookie]\n\n      this.setCookie = function setCookie(cookie, request_domain, request_path) {\n        var remove, i;\n        cookie = new Cookie(cookie, request_domain, request_path);\n        //Delete the cookie if the set is past the current time\n        remove = cookie.expiration_date <= Date.now();\n        if (cookies[cookie.name] !== undefined) {\n          cookies_list = cookies[cookie.name];\n          for (i = 0; i < cookies_list.length; i += 1) {\n            collidable_cookie = cookies_list[i];\n            if (collidable_cookie.collidesWith(cookie)) {\n              if (remove) {\n                cookies_list.splice(i, 1);\n                if (cookies_list.length === 0) {\n                  delete cookies[cookie.name];\n                }\n                return false;\n              }\n              cookies_list[i] = cookie;\n              return cookie;\n            }\n          }\n          if (remove) {\n            return false;\n          }\n          cookies_list.push(cookie);\n          return cookie;\n        }\n        if (remove) {\n          return false;\n        }\n        cookies[cookie.name] = [cookie];\n        return cookies[cookie.name];\n      };\n      //returns a cookie\n      this.getCookie = function getCookie(cookie_name, access_info) {\n        var cookie, i;\n        cookies_list = cookies[cookie_name];\n        if (!cookies_list) {\n          return;\n        }\n        for (i = 0; i < cookies_list.length; i += 1) {\n          cookie = cookies_list[i];\n          if (cookie.expiration_date <= Date.now()) {\n            if (cookies_list.length === 0) {\n              delete cookies[cookie.name];\n            }\n            continue;\n          }\n          if (cookie.matches(access_info)) {\n            return cookie;\n          }\n        }\n      };\n      //returns a list of cookies\n      this.getCookies = function getCookies(access_info) {\n        var matches = [],\n          cookie_name,\n          cookie;\n        for (cookie_name in cookies) {\n          cookie = this.getCookie(cookie_name, access_info);\n          if (cookie) {\n            matches.push(cookie);\n          }\n        }\n        matches.toString = function toString() {\n          return matches.join(\":\");\n        };\n        matches.toValueString = function toValueString() {\n          return matches.map(function (c) {\n            return c.toValueString();\n          }).join('; ');\n        };\n        return matches;\n      };\n      return this;\n    }\n    return new CookieJar();\n  }\n  exports.CookieJar = CookieJar;\n\n  //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.\n  CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {\n    cookies = Array.isArray(cookies) ? cookies : cookies.split(cookie_str_splitter);\n    var successful = [],\n      i,\n      cookie;\n    cookies = cookies.map(function (item) {\n      return new Cookie(item, request_domain, request_path);\n    });\n    for (i = 0; i < cookies.length; i += 1) {\n      cookie = cookies[i];\n      if (this.setCookie(cookie, request_domain, request_path)) {\n        successful.push(cookie);\n      }\n    }\n    return successful;\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}