{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { Table } from \"react-bootstrap\";\n// import Web3 from \"web3\";\n// import TokenFarm from \"./utils/TokenFarm.json\";\n\n// export function Stakers() {\n\n//     const [stakeEvents, setStakeEvents] = useState([]);\n\n//     useEffect(() => {\n//         async function fetchData(){\n//           const web3 = new Web3(Web3.givenProvider || 'http://localhost:8545');\n\n//         // Retrieve the necessary data from the TokenFarm contract\n//         const networkId = await web3.eth.net.getId();\n//         const tokenfarm = new web3.eth.Contract(TokenFarm.abi, TokenFarm.networks[networkId].address);\n\n//         const loadStakeEvents = async () => {\n//             const events = await tokenfarm.getPastEvents(\"Staked\", { fromBlock: 0 });\n//             const stakeEvents = events.map((event) => ({\n//                 staker: event.returnValues.staker,\n//                 amount: event.returnValues.amount,\n//                 timestamp: event.returnValues.timestamp,\n//             }));\n//             setStakeEvents(stakeEvents);\n//             console.log(stakeEvents)\n//         };\n\n//         loadStakeEvents();\n\n//         // listen for new stake events\n//         const eventEmitter = tokenfarm.events.Staked();\n//         eventEmitter.on(\"data\", (event) => {\n//             const newStakeEvent = {\n//                 staker: event.returnValues.staker,\n//                 amount: event.returnValues.amount,\n//                 timestamp: event.returnValues.timestamp,\n//             };\n//             setStakeEvents([...stakeEvents, newStakeEvent]);\n//         });\n//         return () => {\n//             eventEmitter.removeAllListeners();\n//         };}\n//         fetchData();\n//     }, []);\n\n//     return (\n//         <div>\n//             <h1>Stake Events</h1>\n//             <Table>\n//                 <thead>\n//                     <tr>\n//                         <th>Staker</th>\n//                         <th>Amount</th>\n//                         <th>Timestamp</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {stakeEvents.map((event, index) => (\n//                         <tr key={index}>\n//                             <td>{event.staker}</td>\n//                             <td>{event.amount}</td>\n//                             <td>{new Date(event.timestamp * 1000).toString()}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </Table>\n//         </div>\n//     );\n// }","map":{"version":3,"names":[],"sources":["C:/CredApp/client/src/Stakers.1.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Table } from \"react-bootstrap\";\r\n// import Web3 from \"web3\";\r\n// import TokenFarm from \"./utils/TokenFarm.json\";\r\n\r\n// export function Stakers() {\r\n\r\n//     const [stakeEvents, setStakeEvents] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         async function fetchData(){\r\n//           const web3 = new Web3(Web3.givenProvider || 'http://localhost:8545');\r\n\r\n//         // Retrieve the necessary data from the TokenFarm contract\r\n//         const networkId = await web3.eth.net.getId();\r\n//         const tokenfarm = new web3.eth.Contract(TokenFarm.abi, TokenFarm.networks[networkId].address);\r\n\r\n//         const loadStakeEvents = async () => {\r\n//             const events = await tokenfarm.getPastEvents(\"Staked\", { fromBlock: 0 });\r\n//             const stakeEvents = events.map((event) => ({\r\n//                 staker: event.returnValues.staker,\r\n//                 amount: event.returnValues.amount,\r\n//                 timestamp: event.returnValues.timestamp,\r\n//             }));\r\n//             setStakeEvents(stakeEvents);\r\n//             console.log(stakeEvents)\r\n//         };\r\n\r\n//         loadStakeEvents();\r\n    \r\n//         // listen for new stake events\r\n//         const eventEmitter = tokenfarm.events.Staked();\r\n//         eventEmitter.on(\"data\", (event) => {\r\n//             const newStakeEvent = {\r\n//                 staker: event.returnValues.staker,\r\n//                 amount: event.returnValues.amount,\r\n//                 timestamp: event.returnValues.timestamp,\r\n//             };\r\n//             setStakeEvents([...stakeEvents, newStakeEvent]);\r\n//         });\r\n//         return () => {\r\n//             eventEmitter.removeAllListeners();\r\n//         };}\r\n//         fetchData();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Stake Events</h1>\r\n//             <Table>\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th>Staker</th>\r\n//                         <th>Amount</th>\r\n//                         <th>Timestamp</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {stakeEvents.map((event, index) => (\r\n//                         <tr key={index}>\r\n//                             <td>{event.staker}</td>\r\n//                             <td>{event.amount}</td>\r\n//                             <td>{new Date(event.timestamp * 1000).toString()}</td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </Table>\r\n//         </div>\r\n//     );\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}