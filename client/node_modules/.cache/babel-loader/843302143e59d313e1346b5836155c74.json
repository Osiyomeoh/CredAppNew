{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\r\n * Common class to access chain and hardfork parameters\r\n */\nvar Common = /** @class */function () {\n  /**\r\n   * @constructor\r\n   * @param chain String ('mainnet') or Number (1) chain\r\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n   */\n  function Common(chain, hardfork, supportedHardforks) {\n    this._chainParams = this.setChain(chain);\n    this._hardfork = null;\n    this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n    if (hardfork) {\n      this.setHardfork(hardfork);\n    }\n  }\n  /**\r\n   * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\r\n   * params from [[baseChain]] except the ones overridden in [[customChainParams]].\r\n   *\r\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\r\n   * chain params on.\r\n   * @param customChainParams The custom parameters of the chain.\r\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n   */\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n    return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n  };\n  Common._getChainParams = function (chain) {\n    if (typeof chain === 'number') {\n      if (chains_1.chains['names'][chain]) {\n        return chains_1.chains[chains_1.chains['names'][chain]];\n      }\n      throw new Error(\"Chain with ID \" + chain + \" not supported\");\n    }\n    if (chains_1.chains[chain]) {\n      return chains_1.chains[chain];\n    }\n    throw new Error(\"Chain with name \" + chain + \" not supported\");\n  };\n  /**\r\n   * Sets the chain\r\n   * @param chain String ('mainnet') or Number (1) chain\r\n   *     representation. Or, a Dictionary of chain parameters for a private network.\r\n   * @returns The dictionary with parameters set as chain\r\n   */\n  Common.prototype.setChain = function (chain) {\n    if (typeof chain === 'number' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain);\n    } else if (typeof chain === 'object') {\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n      for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n        var param = required_1[_i];\n        if (chain[param] === undefined) {\n          throw new Error(\"Missing required chain parameter: \" + param);\n        }\n      }\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n    return this._chainParams;\n  };\n  /**\r\n   * Sets the hardfork to get params for\r\n   * @param hardfork String identifier ('byzantium')\r\n   */\n  Common.prototype.setHardfork = function (hardfork) {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    var changed = false;\n    for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n      var hfChanges = hardforkChanges_1[_i];\n      if (hfChanges[0] === hardfork) {\n        this._hardfork = hardfork;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n    }\n  };\n  /**\r\n   * Internal helper function to choose between hardfork set and hardfork provided as param\r\n   * @param hardfork Hardfork given to function as a parameter\r\n   * @returns Hardfork chosen to be used\r\n   */\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    onlySupported = onlySupported === undefined ? true : onlySupported;\n    if (!hardfork) {\n      if (!this._hardfork) {\n        throw new Error('Method called with neither a hardfork set nor provided by param');\n      } else {\n        hardfork = this._hardfork;\n      }\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    return hardfork;\n  };\n  /**\r\n   * Internal helper function, returns the params for the given hardfork for the chain set\r\n   * @param hardfork Hardfork name\r\n   * @returns Dictionary with hardfork params\r\n   */\n  Common.prototype._getHardfork = function (hardfork) {\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n      var hf = hfs_1[_i];\n      if (hf['name'] === hardfork) return hf;\n    }\n    throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n  };\n  /**\r\n   * Internal helper function to check if a hardfork is set to be supported by the library\r\n   * @param hardfork Hardfork name\r\n   * @returns True if hardfork is supported\r\n   */\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    if (this._supportedHardforks.length > 0) {\n      for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n        var supportedHf = _a[_i];\n        if (hardfork === supportedHf) return true;\n      }\n    } else {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Returns the parameter corresponding to a hardfork\r\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\r\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\r\n   * @param hardfork Hardfork name, optional if hardfork set\r\n   */\n  Common.prototype.param = function (topic, name, hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    var value;\n    for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n      var hfChanges = hardforkChanges_2[_i];\n      if (!hfChanges[1][topic]) {\n        throw new Error(\"Topic \" + topic + \" not defined\");\n      }\n      if (hfChanges[1][topic][name] !== undefined) {\n        value = hfChanges[1][topic][name].v;\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    if (value === undefined) {\n      throw new Error(topic + \" value for \" + name + \" not found\");\n    }\n    return value;\n  };\n  /**\r\n   * Returns a parameter for the hardfork active on block number\r\n   * @param topic Parameter topic\r\n   * @param name Parameter name\r\n   * @param blockNumber Block number\r\n   */\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.param(topic, name, hardfork);\n  };\n  /**\r\n   * Checks if set or provided hardfork is active on block number\r\n   * @param hardfork Hardfork name or null (for HF set)\r\n   * @param blockNumber\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if HF is active on block number\r\n   */\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlock(hardfork);\n    if (hfBlock !== null && blockNumber >= hfBlock) return true;\n    return false;\n  };\n  /**\r\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\r\n   * @param blockNumber\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if HF is active on block number\r\n   */\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\r\n   * Sequence based check if given or set HF1 is greater than or equal HF2\r\n   * @param hardfork1 Hardfork name or null (if set)\r\n   * @param hardfork2 Hardfork name\r\n   * @param opts Hardfork options\r\n   * @returns True if HF1 gte HF2\r\n   */\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n    var posHf1 = -1,\n      posHf2 = -1;\n    var index = 0;\n    for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n      var hf = hardforks_2[_i];\n      if (hf['name'] === hardfork1) posHf1 = index;\n      if (hf['name'] === hardfork2) posHf2 = index;\n      index += 1;\n    }\n    return posHf1 >= posHf2;\n  };\n  /**\r\n   * Alias to hardforkGteHardfork when hardfork is set\r\n   * @param hardfork Hardfork name\r\n   * @param opts Hardfork options\r\n   * @returns True if hardfork set is greater than hardfork provided\r\n   */\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\r\n   * Checks if given or set hardfork is active on the chain\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if hardfork is active on the chain\r\n   */\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n      var hf = _a[_i];\n      if (hf['name'] === hardfork && hf['block'] !== null) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Returns the active hardfork switches for the current chain\r\n   * @param blockNumber up to block if provided, otherwise for the whole chain\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @return Array with hardfork arrays\r\n   */\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n      var hf = hfs_2[_i];\n      if (hf['block'] === null) continue;\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n      activeHardforks.push(hf);\n    }\n    return activeHardforks;\n  };\n  /**\r\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\r\n   * @param blockNumber up to block if provided, otherwise for the whole chain\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @return Hardfork name\r\n   */\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\r\n   * Returns the hardfork change block for hardfork provided or set\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @returns Block number\r\n   */\n  Common.prototype.hardforkBlock = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    return this._getHardfork(hardfork)['block'];\n  };\n  /**\r\n   * True if block number provided is the hardfork (given or set) change block of the current chain\r\n   * @param blockNumber Number of the block to check\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @returns True if blockNumber is HF block\r\n   */\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    if (this.hardforkBlock(hardfork) === blockNumber) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Provide the consensus type for the hardfork set or provided as param\r\n   * @param hardfork Hardfork name, optional if hardfork set\r\n   * @returns Consensus type (e.g. 'pow', 'poa')\r\n   */\n  Common.prototype.consensus = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['consensus'];\n  };\n  /**\r\n   * Provide the finality type for the hardfork set or provided as param\r\n   * @param {String} hardfork Hardfork name, optional if hardfork set\r\n   * @returns {String} Finality type (e.g. 'pos', null of no finality)\r\n   */\n  Common.prototype.finality = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['finality'];\n  };\n  /**\r\n   * Returns the Genesis parameters of current chain\r\n   * @returns Genesis dictionary\r\n   */\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\r\n   * Returns the hardforks for current chain\r\n   * @returns {Array} Array with arrays of hardforks\r\n   */\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\r\n   * Returns bootstrap nodes for the current chain\r\n   * @returns {Dictionary} Dict with bootstrap nodes\r\n   */\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\r\n   * Returns the hardfork set\r\n   * @returns Hardfork name\r\n   */\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\r\n   * Returns the Id of current chain\r\n   * @returns chain Id\r\n   */\n  Common.prototype.chainId = function () {\n    return this._chainParams['chainId'];\n  };\n  /**\r\n   * Returns the name of current chain\r\n   * @returns chain name (lower case)\r\n   */\n  Common.prototype.chainName = function () {\n    return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n  };\n  /**\r\n   * Returns the Id of current network\r\n   * @returns network Id\r\n   */\n  Common.prototype.networkId = function () {\n    return this._chainParams['networkId'];\n  };\n  return Common;\n}();\nexports.default = Common;","map":null,"metadata":{},"sourceType":"script"}