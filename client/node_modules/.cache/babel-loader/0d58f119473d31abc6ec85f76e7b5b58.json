{"ast":null,"code":"import _classCallCheck from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\CredApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { getRangeValue } from \"../Utils/NumberUtils\";\nimport { isSsr } from \"../Utils/Utils\";\nexport var Retina = /*#__PURE__*/function () {\n  function Retina(container) {\n    _classCallCheck(this, Retina);\n    this.container = container;\n  }\n  _createClass(Retina, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n      var container = this.container,\n        options = container.actualOptions;\n      this.pixelRatio = !options.detectRetina || isSsr() ? 1 : window.devicePixelRatio;\n      var motionOptions = this.container.actualOptions.motion;\n      if (motionOptions && (motionOptions.disable || motionOptions.reduce.value)) {\n        if (isSsr() || typeof matchMedia === \"undefined\" || !matchMedia) {\n          this.reduceFactor = 1;\n        } else {\n          var mediaQuery = matchMedia(\"(prefers-reduced-motion: reduce)\");\n          if (mediaQuery) {\n            this.handleMotionChange(mediaQuery);\n            var handleChange = function handleChange() {\n              _this.handleMotionChange(mediaQuery);\n              container.refresh().catch(function () {});\n            };\n            if (mediaQuery.addEventListener !== undefined) {\n              mediaQuery.addEventListener(\"change\", handleChange);\n            } else if (mediaQuery.addListener !== undefined) {\n              mediaQuery.addListener(handleChange);\n            }\n          }\n        }\n      } else {\n        this.reduceFactor = 1;\n      }\n      var ratio = this.pixelRatio;\n      if (container.canvas.element) {\n        var element = container.canvas.element;\n        container.canvas.size.width = element.offsetWidth * ratio;\n        container.canvas.size.height = element.offsetHeight * ratio;\n      }\n      var particles = options.particles;\n      this.attractDistance = getRangeValue(particles.move.attract.distance) * ratio;\n      this.linksDistance = particles.links.distance * ratio;\n      this.linksWidth = particles.links.width * ratio;\n      this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n      this.maxSpeed = getRangeValue(particles.move.gravity.maxSpeed) * ratio;\n      var modes = options.interactivity.modes;\n      this.connectModeDistance = modes.connect.distance * ratio;\n      this.connectModeRadius = modes.connect.radius * ratio;\n      this.grabModeDistance = modes.grab.distance * ratio;\n      this.repulseModeDistance = modes.repulse.distance * ratio;\n      this.bounceModeDistance = modes.bounce.distance * ratio;\n      this.attractModeDistance = modes.attract.distance * ratio;\n      this.slowModeRadius = modes.slow.radius * ratio;\n      this.bubbleModeDistance = modes.bubble.distance * ratio;\n      if (modes.bubble.size) {\n        this.bubbleModeSize = modes.bubble.size * ratio;\n      }\n    }\n  }, {\n    key: \"initParticle\",\n    value: function initParticle(particle) {\n      var options = particle.options,\n        ratio = this.pixelRatio,\n        moveDistance = options.move.distance,\n        props = particle.retina;\n      props.attractDistance = getRangeValue(options.move.attract.distance) * ratio;\n      props.linksDistance = options.links.distance * ratio;\n      props.linksWidth = options.links.width * ratio;\n      props.moveDrift = getRangeValue(options.move.drift) * ratio;\n      props.moveSpeed = getRangeValue(options.move.speed) * ratio;\n      props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n      var maxDistance = props.maxDistance;\n      maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n      maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n      props.maxSpeed = getRangeValue(options.move.gravity.maxSpeed) * ratio;\n    }\n  }, {\n    key: \"handleMotionChange\",\n    value: function handleMotionChange(mediaQuery) {\n      var options = this.container.actualOptions;\n      if (mediaQuery.matches) {\n        var motion = options.motion;\n        this.reduceFactor = motion.disable ? 0 : motion.reduce.value ? 1 / motion.reduce.factor : 1;\n      } else {\n        this.reduceFactor = 1;\n      }\n    }\n  }]);\n  return Retina;\n}();","map":null,"metadata":{},"sourceType":"module"}