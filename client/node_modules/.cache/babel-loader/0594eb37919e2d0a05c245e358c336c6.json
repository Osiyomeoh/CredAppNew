{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar sha3 = require(\"js-sha3\");\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\nfunction keccak256(data) {\n  return '0x' + sha3.keccak_256(toByteArray(data));\n}\nexports.keccak256 = keccak256;\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\nexports.padLeft = function (value, chars) {\n  var hasPrefix = /^0x/i.test(value) || typeof value === 'number';\n  value = value.toString().replace(/^0x/i, '');\n  var padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\n};\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\nfunction bytesToHex(bytes) {\n  var hex = [];\n  for (var i = 0; i < bytes.length; i++) {\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n  return \"0x\".concat(hex.join('').replace(/^0+/, ''));\n}\nexports.bytesToHex = bytesToHex;\n/**\r\n * To byte array\r\n * @param value The value\r\n */\nfunction toByteArray(value) {\n  if (value == null) {\n    throw new Error('cannot convert null value to array');\n  }\n  if (typeof value === 'string') {\n    var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n    if (!match) {\n      throw new Error('invalid hexidecimal string');\n    }\n    if (match[1] !== '0x') {\n      throw new Error('hex string must have 0x prefix');\n    }\n    value = value.substring(2);\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n    var result = [];\n    for (var i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isByteArray(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  throw new Error('invalid arrayify value');\n}\nexports.toByteArray = toByteArray;\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\nfunction isByteArray(value) {\n  if (!value ||\n  // tslint:disable-next-line: radix\n  parseInt(String(value.length)) != value.length || typeof value === 'string') {\n    return false;\n  }\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n    // tslint:disable-next-line: radix\n    if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\nfunction addSlice(array) {\n  var _arguments = arguments;\n  if (array.slice !== undefined) {\n    return array;\n  }\n  array.slice = function () {\n    var args = Array.prototype.slice.call(_arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}","map":null,"metadata":{},"sourceType":"script"}