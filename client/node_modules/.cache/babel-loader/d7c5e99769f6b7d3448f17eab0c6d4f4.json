{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _componentOrElement = _interopRequireDefault(require(\"prop-types-extra/lib/componentOrElement\"));\nvar _inDOM = _interopRequireDefault(require(\"dom-helpers/util/inDOM\"));\nvar _ownerDocument = _interopRequireDefault(require(\"dom-helpers/ownerDocument\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _getContainer = _interopRequireDefault(require(\"./utils/getContainer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar propTypes = {\n  /**\n   * A Node, Component instance, or function that returns either. The `container` will have the Portal children\n   * appended to it.\n   */\n  container: _propTypes.default.oneOfType([_componentOrElement.default, _propTypes.default.func]),\n  onContainerResolved: _propTypes.default.func\n};\nvar WaitForContainer = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(WaitForContainer, _React$Component);\n  function WaitForContainer() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    if (!_inDOM.default) return _assertThisInitialized(_this);\n    var container = _this.props.container;\n    if (typeof container === 'function') container = container();\n    if (container && !_reactDom.default.findDOMNode(container)) {\n      // The container is a React component that has not yet been rendered.\n      // Don't set the container node yet.\n      return _assertThisInitialized(_this);\n    }\n    _this.setContainer(container);\n    return _this;\n  }\n  var _proto = WaitForContainer.prototype;\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.container !== this.props.container) {\n      this.setContainer(nextProps.container);\n    }\n  };\n  _proto.componentDidMount = function componentDidMount() {\n    if (!this._container) {\n      this.setContainer(this.props.container);\n      this.forceUpdate(this.props.onContainerResolved);\n    } else if (this.props.onContainerResolved) {\n      this.props.onContainerResolved();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._container = null;\n  };\n  _proto.setContainer = function setContainer(container) {\n    this._container = (0, _getContainer.default)(container, (0, _ownerDocument.default)().body);\n  };\n  _proto.render = function render() {\n    return this._container ? this.props.children(this._container) : null;\n  };\n  return WaitForContainer;\n}(_react.default.Component);\nWaitForContainer.propTypes = propTypes;\nvar _default = WaitForContainer;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}