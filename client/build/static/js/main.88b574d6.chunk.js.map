{"version":3,"sources":["images/sym.png","images/new_cool.jpg","components/Airdrop.js","main.js","components/Footer.js","context/TransactionContext.jsx","components/connect.js","utils/shortenAddress.js","components/Spinner/Spinner.js","components/ParticleSettings.js","App.js","index.js","images/neww.png"],"names":["module","exports","__webpack_require__","p","Airdrop","_Component","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","time","seconds","timer","startTimer","bind","_assertThisInitialized","countDown","_inherits","_createClass","key","value","setInterval","setState","secondstoTime","props","issueTokens","clearInterval","secs","devisor_for_minutes","devisor_for_seconds","h","Math","floor","m","s","ceil","timeLeftVar","stakingBalance","airdropReleaseTokens","React","createElement","style","color","Component","Main","historyList","count","prevProps","date","Date","toLocaleString","item","className","account","window","web3","utils","fromWei","gainsTokenBalance","concat","_toConsumableArray","_this2","styles","body","backgroundColor","padding","carousel","card","borderRadius","boxShadow","margin","maxWidth","image","objectFit","height","title","fontSize","fontWeight","marginBottom","border","backdropFilter","borderTopColor","borderLeftColor","borderBottomColor","borderRightColor","class","behavior","direction","scrollamount","id","type","onClick","event","preventDefault","claimTokens","scope","onSubmit","amount","input","toString","toWei","stakeTokens","borderSpacing","width","marginRight","credtokenBalance","ref","placeholder","required","cursor","src","tether","alt","unstakeTokens","Card","bg","Header","Body","stakeEvents","Carousel","interval","pause","display","justifyContent","map","index","_objectSpread","Img","variant","Title","address","staker","slice","Text","pow","toFixed","timestamp","day","getDate","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getSeconds","formatDate","Footer","href","bank","samuelAvatar","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","TransactionContext","createContext","ethereum","TransactionProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","currentAccount","setCurrentAccount","checkIfWalletIsConnect","_ref2","_asyncToGenerator","_callee","accounts","_context","request","console","log","t0","apply","arguments","connectWallet","_ref3","_callee2","_context2","alert","location","reload","disconnectWallet","_ref4","_callee3","_context3","params","eth_accounts","off","handleAccountsChanged","useEffect","Provider","Connect","_useContext","useContext","showModal","setShowModal","_useState3","_useState4","cryptoPrices","setCryptoPrices","disconnectWalletCallback","useCallback","fetchCryptoPrices","response","data","fetch","json","intervalId","Navbar","expand","fixed","Brand","Toggle","aria-controls","Collapse","Nav","Link","Button","entries","toUpperCase","usd","join","navigator","clipboard","writeText","size","disabled","Modal","show","onHide","closeButton","Spinner","animationDuration","alignItems","borderWidth","defaultProps","ParticleSettings","Particles","options","background","fpslimit","interactivity","detect_on","events","enable","mode","onHover","resize","modes","bubble","distance","duration","opacity","quantity","repulse","particles","links","collisions","move","outMode","random","speed","straight","number","density","value_area","shape","App","isConnected","_callee5","_context5","Signer","_callee6","_context6","connectedStatus","status","loading","credtoken","methods","approve","tokenfarm","_address","send","from","on","hash","depositTokens","gains","_componentWillMount","loadWeb3","loadBlockchainData","_loadWeb","Web3","currentProvider","_loadBlockchainData","_callee4","networkId","credtokenData","gainsTokenData","tokenfarmData","eventEmitter","_context4","eth","getAccounts","net","getId","CredToken","networks","Contract","abi","balanceOf","Gains","TokenFarm","getPastEvents","fromBlock","returnValues","loadStakeEvents","Staked","newStakeEvent","removeAllListeners","content","tokenfarmContract","stakers","position","role","minHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"imjSAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,ihBC4EzBC,EA1EF,SAAAC,GACX,SAAAD,IAAc,IAAAE,EAK+B,OAL/BC,YAAAC,KAAAJ,IACZE,EAAAG,YAAAD,KAAAE,YAAAN,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,KAAM,GAAIC,QAAS,IAClCR,EAAKS,MAAQ,EACbT,EAAKU,WAAaV,EAAKU,WAAWC,KAAIC,wBAAAZ,KACtCA,EAAKa,UAAYb,EAAKa,UAAUF,KAAIC,wBAAAZ,KAAOA,EAiE5C,OAvEUc,YAAAhB,EAAAC,GASXgB,YAAAjB,EAAA,EAAAkB,IAAA,aAAAC,MAAA,WAEqB,IAAff,KAAKO,OAAeP,KAAKI,MAAME,QAAU,IAC3CN,KAAKO,MAAQS,YAAYhB,KAAKW,UAAW,QAI7C,CAAAG,IAAA,YAAAC,MAAA,WAGE,IAAIT,EAAUN,KAAKI,MAAME,QAAU,EAEnCN,KAAKiB,SAAS,CACZZ,KAAML,KAAKkB,cAAcZ,GACzBA,QAASA,IAIK,IAAZA,IACFN,KAAKmB,MAAMC,cACXC,cAAcrB,KAAKO,UAEtB,CAAAO,IAAA,gBAAAC,MAAA,SAEaO,GACZ,IAGIC,EAAsBD,EAAI,KAG1BE,EAAsBD,EAAsB,GAQhD,MALU,CACRE,EATMC,KAAKC,MAAML,EAAI,MAUrBM,EAPQF,KAAKC,MAAMJ,EAAsB,IAQzCM,EALQH,KAAKI,KAAKN,MAQrB,CAAAV,IAAA,oBAAAC,MAAA,WAGC,IAAIgB,EAAc/B,KAAKkB,cAAclB,KAAKI,MAAME,SAChDN,KAAKiB,SAAS,CAAEZ,KAAM0B,MACvB,CAAAjB,IAAA,uBAAAC,MAAA,WAGgBf,KAAKmB,MAAMa,gBACV,uBAEdhC,KAAKQ,eAER,CAAAM,IAAA,SAAAC,MAAA,WAIC,OADAf,KAAKiC,uBAEHC,IAAAC,cAAA,OAAKC,MAAO,CAAEC,MAAO,UAClBrC,KAAKI,MAAMC,KAAKuB,EAAE,IAAE5B,KAAKI,MAAMC,KAAKwB,OAG1CjC,EAvEU,CAAS0C,+CCkCrB,IA8ScC,EA5SL,SAAA1C,GACR,SAAA0C,EAAYpB,GAAO,IAAArB,EAKf,OALeC,YAAAC,KAAAuC,IACjBzC,EAAAG,YAAAD,KAAAE,YAAAqC,GAAApC,KAAAH,KAAMmB,KACDf,MAAQ,CACXoC,YAAa,GACbC,MAAO,GACP3C,EAmSH,OAzSOc,YAAA2B,EAAA1C,GAOPgB,YAAA0B,EAAA,EAAAzB,IAAA,qBAAAC,MAAA,SAEkB2B,GACjB,GAAIA,EAAUV,iBAAmBhC,KAAKmB,MAAMa,eAAgB,CAC1D,IAAIW,GAAO,IAAIC,MAAOC,iBAClBJ,EAAQzC,KAAKI,MAAMqC,MAAQ,EAC3BK,EACFZ,IAAAC,cAAA,MAAIY,UAAU,kBAAkBjC,IAAK2B,GACnCP,IAAAC,cAAA,OAAKY,UAAU,OACbb,IAAAC,cAAA,OAAKY,UAAU,YACbb,IAAAC,cAAA,cAASM,EAAM,MAEjBP,IAAAC,cAAA,OAAKY,UAAU,YACbb,IAAAC,cAAA,cAAQ,YAAiB,IAAEnC,KAAKmB,MAAM6B,SAExCd,IAAAC,cAAA,OAAKY,UAAU,YACbb,IAAAC,cAAA,cAAQ,WAAiB,IACxBc,OAAOC,KAAKC,MAAMC,QAAQpD,KAAKmB,MAAMa,eAAgB,SAAU,IAAI,SAGtEE,IAAAC,cAAA,OAAKY,UAAU,YACbb,IAAAC,cAAA,cAAQ,UAAgB,IACvBc,OAAOC,KAAKC,MAAMC,QAAQpD,KAAKmB,MAAMkC,kBAAmB,SAAU,IAAI,MAGzEnB,IAAAC,cAAA,OAAKY,UAAU,YACbb,IAAAC,cAAA,cAAQ,SAAc,IAAEQ,KAK5BH,EAAW,GAAAc,OAAAC,YAAOvD,KAAKI,MAAMoC,aAAW,CAAEM,IAC9C9C,KAAKiB,SAAS,CAAEuB,cAAaC,aAEhC,CAAA3B,IAAA,SAAAC,MAAA,WACQ,IAAAyC,EAAAxD,KACDyD,EAAS,CACbC,KAAM,CACJC,gBAAiB,cACjBC,QAAS,KAEXC,SAAU,CACRF,gBAAiB,eAEnBG,KAAM,CACJH,gBAAiB,2BACjBI,aAAc,OACdC,UAAW,8BACXC,OAAQ,OACRC,SAAU,SAEZC,MAAO,CACLC,UAAW,QACXC,OAAQ,QACRN,aAAc,iBAEhBO,MAAO,CACLC,SAAU,OACVC,WAAY,OACZC,aAAc,MAIlB,OACEvC,IAAAC,cAAA,WAEED,IAAAC,cAAA,OACEY,UAAU,wBACVX,MAAO,CACL2B,aAAc,QACdW,OAAQ,wBACRf,gBAAiB,0BACjBgB,eAAgB,eAChBX,UAAW,0CACXY,eAAgB,2BAChBC,gBAAiB,2BACjBC,kBAAmB,2BACnBC,iBAAkB,6BAIpB7C,IAAAC,cAAA,OAAK6C,MAAM,aACT9C,IAAAC,cAAA,OAAK6C,MAAM,OACT9C,IAAAC,cAAA,OAAK6C,MAAM,OACT9C,IAAAC,cAAA,WAAS8C,SAAS,SAASC,UAAU,OAAOC,aAAa,KACvDjD,IAAAC,cAAA,QAAM6C,MAAM,gCAA+B,mFAWrD9C,IAAAC,cAAA,OAAKiD,GAAG,UAAUrC,UAAU,QAE1Bb,IAAAC,cAAA,UACEkD,KAAK,SACLC,QAAS,SAACC,GACRA,EAAMC,eAAehC,EAAKrC,MAAMsE,gBAElC1C,UAAU,oEACX,eAEQ,WAGTb,IAAAC,cAAA,SAAOY,UAAU,gCACfb,IAAAC,cAAA,aACED,IAAAC,cAAA,MAAIC,MAAO,CAAEC,MAAO,UAClBH,IAAAC,cAAA,MAAIuD,MAAM,OAAM,mBAChBxD,IAAAC,cAAA,MAAIuD,MAAM,OAAM,mBAGpBxD,IAAAC,cAAA,aACED,IAAAC,cAAA,MAAIC,MAAO,CAAEC,MAAO,UAClBH,IAAAC,cAAA,UACGc,OAAOC,KAAKC,MAAMC,QACjBpD,KAAKmB,MAAMa,eACX,SACE,UAGNE,IAAAC,cAAA,UAEGc,OAAOC,KAAKC,MAAMC,QACjBpD,KAAKmB,MAAMkC,kBACX,SACC,IAAI,SAOfnB,IAAAC,cAAA,OACEY,UAAU,YACVX,MAAO,CACL2B,aAAc,QACdW,OAAQ,wBACRf,gBAAiB,0BACjBgB,eAAgB,eAChBX,UAAW,0CACXY,eAAgB,2BAChBC,gBAAiB,2BAEjBC,kBAAmB,2BACnBC,iBAAkB,6BAGpB7C,IAAAC,cAAA,QAEEwD,SAAU,SAACJ,GAET,IAAIK,EADJL,EAAMC,iBAGNI,EAASpC,EAAKqC,MAAM9E,MAAM+E,WAC1BF,EAAS3C,OAAOC,KAAKC,MAAM4C,MAAMH,EAAQ,SAEzCpC,EAAKrC,MAAM6E,YAAYJ,IAGzB7C,UAAU,QAEVb,IAAAC,cAAA,OACEC,MAAO,CACL6D,cAAe,QACfC,MAAO,OACPtC,QAAS,WAIX1B,IAAAC,cAAA,QACEY,UAAU,cACVX,MAAO,CAAEC,MAAO,QAAS4B,OAAQ,MAAOkC,YAAa,QACtD,WACU,IACRlD,OAAOC,KAAKC,MAAMC,QACjBpD,KAAKmB,MAAMiF,iBACX,UAIJlE,IAAAC,cAAA,OAAKY,UAAU,2BACbb,IAAAC,cAAA,SAEEkE,IAAK,SAACR,GACJrC,EAAKqC,MAAQA,GAEfR,KAAK,SACLiB,YAAY,IACZlE,MAAO,CACLsC,OAAQ,kBACRX,aAAc,SAEhBwC,UAAQ,IAGVrE,IAAAC,cAAA,OAAKY,UAAU,oBACbb,IAAAC,cAAA,OACEY,UAAU,wBACVX,MAAO,CACLuB,gBAAiB,4BACjB6C,OAAQ,UACRxC,UAAW,0CACX3B,MAAO,UAGTH,IAAAC,cAAA,OAAKsE,IAAKC,IAAQC,IAAI,SAAStC,OAAO,KAAK6B,MAAM,OAAO,oBAM9DhE,IAAAC,cAAA,UACEkD,KAAK,SACLtC,UAAU,2DACX,SAIDb,IAAAC,cAAA,UACEkD,KAAK,SACLC,QAAS,SAACC,GACRA,EAAMC,eAAehC,EAAKrC,MAAMyF,kBAElC7D,UAAU,2DACX,iBAMLb,IAAAC,cAAA,OAAKY,UAAU,wBAAwBX,MAAO,CAAEC,MAAO,UAAW,UAEhEH,IAAAC,cAACvC,EAAO,CACNoC,eAAgBhC,KAAKmB,MAAMa,eAC3BZ,YAAapB,KAAKmB,MAAMC,eAK5Bc,IAAAC,cAAC0E,IAAI,CAACC,GAAG,cAAcpC,OAAO,SAC5BxC,IAAAC,cAAC0E,IAAKE,OAAM,KACV7E,IAAAC,cAAA,UAAI,iBAEND,IAAAC,cAAC0E,IAAKG,KAAI,CAAC5E,MAAOqB,EAAOC,MAEtB1D,KAAKmB,MAAM8F,YACV/E,IAAAC,cAAC+E,IAAQ,CACPC,SAAU,IACVC,OAAO,EACPhF,MAAO,CAAEiF,QAAS,OAAQC,eAAgB,WAEzCtH,KAAKmB,MAAM8F,YAAYM,IAAI,SAAChC,EAAOiC,GAAK,OACvCtF,IAAAC,cAAC0E,IAAI,CACH/F,IAAK0G,EACLpF,MAAKqF,YAAA,GAAOhE,EAAOK,KAAI,CAAEoC,MAAO,WAEhChE,IAAAC,cAAC0E,IAAKa,IAAG,CACPC,QAAQ,MACRlB,IAAG,mDAAAnD,OAAqDkE,GACxDpF,MAAOqB,EAAOU,QAEhBjC,IAAAC,cAAC0E,IAAKG,KAAI,KACR9E,IAAAC,cAAC0E,IAAKe,MAAK,CAACxF,MAAOqB,EAAOa,QAjT5BuD,EAkToBtC,EAAMuC,OAjThD,GAAAxE,OAAUuE,EAAQE,MAAM,EAAG,GAAE,OAAAzE,OAAMuE,EAAQE,OAAO,MAmT1B7F,IAAAC,cAAC0E,IAAKmB,KAAI,KAAC,gBACK,KAjTlBpC,EAkToBL,EAAMK,OAjTzCA,EAAMlE,KAAAuG,IAAG,GAAM,KAiTkCC,QAAQ,IAExChG,IAAAC,cAAC0E,IAAKmB,KAAI,KAAC,cAhTrC,SAAoBG,GAClB,IAAMxF,EAAO,IAAIC,KAAiB,IAAZuF,GAChBC,EAAMzF,EACT0F,UACAvC,WACAwC,SAAS,EAAG,KACTC,GAAS5F,EAAK6F,WAAa,GAAG1C,WAAWwC,SAAS,EAAG,KACrDG,EAAO9F,EAAK+F,cACZC,EAAQhG,EACXiG,WACA9C,WACAwC,SAAS,EAAG,KACTO,EAAUlG,EACbmG,aACAhD,WACAwC,SAAS,EAAG,KACThI,EAAUqC,EACboG,aACAjD,WACAwC,SAAS,EAAG,KACf,SAAAhF,OAAU8E,EAAG,KAAA9E,OAAIiF,EAAK,KAAAjF,OAAImF,EAAI,KAAAnF,OAAIqF,EAAK,KAAArF,OAAIuF,EAAO,KAAAvF,OAAIhD,GA6RhB0I,CAAWzD,EAAM4C,cArTzD,IAAwBvC,EAJAiC,KAgUN3F,IAAAC,cAAA,SAAG,mCAQlBI,EAzSO,CAASD,gDCHJ2G,EA/BA,WACb,OACE/G,IAAAC,cAAA,OAAKY,UAAU,+CACbb,IAAAC,cAAA,OAAKY,UAAU,iDAEbb,IAAAC,cAAA,KAAGY,UAAU,eAAemG,KAAK,KAC/BhH,IAAAC,cAAA,OACEsE,IAAK0C,IACLjD,MAAM,MACN7B,OAAO,KACPtB,UAAU,2BACV4D,IAAI,UAIRzE,IAAAC,cAAA,OAAKY,UAAU,sCAAqC,oEAGlDb,IAAAC,cAAA,OACEsE,IAAK2C,IACLlD,MAAM,KACN7B,OAAO,KACPtB,UAAU,+CACV4D,IAAI,iFC1BhB0C,EAAA,kBAAA5J,GAAA,IAAAA,EAAA,GAAA6J,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAA9I,EAAA+I,GAAAD,EAAA9I,GAAA+I,EAAA9I,OAAA+I,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAA9I,EAAAC,GAAA,OAAAwI,OAAAI,eAAAC,EAAA9I,EAAA,CAAAC,QAAAwJ,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAb,EAAA9I,GAAA,IAAAwJ,EAAA,aAAAI,GAAAJ,EAAA,SAAAV,EAAA9I,EAAAC,GAAA,OAAA6I,EAAA9I,GAAAC,GAAA,SAAA4J,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAArB,qBAAAyB,EAAAJ,EAAAI,EAAAC,EAAA3B,OAAA4B,OAAAH,EAAAxB,WAAA4B,EAAA,IAAAC,EAAAN,GAAA,WAAApB,EAAAuB,EAAA,WAAAnK,MAAAuK,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA5B,EAAA6B,GAAA,WAAApG,KAAA,SAAAoG,IAAAD,EAAArL,KAAAyJ,EAAA6B,IAAA,MAAAf,GAAA,OAAArF,KAAA,QAAAoG,IAAAf,IAAAjL,EAAAkL,OAAA,IAAAe,EAAA,YAAAT,KAAA,SAAAU,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAvB,EAAAuB,EAAA7B,EAAA,kBAAAhK,OAAA,IAAA8L,EAAAvC,OAAAwC,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA1C,GAAAG,EAAAtJ,KAAA6L,EAAAhC,KAAA6B,EAAAG,GAAA,IAAAE,EAAAN,EAAApC,UAAAyB,EAAAzB,UAAAD,OAAA4B,OAAAU,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,QAAA,SAAAC,GAAA/B,EAAAd,EAAA6C,EAAA,SAAAZ,GAAA,OAAAzL,KAAAsM,QAAAD,EAAAZ,OAAA,SAAAc,EAAArB,EAAAsB,GAAA,IAAAC,EAAA9C,EAAA3J,KAAA,WAAAe,MAAA,SAAAsL,EAAAZ,GAAA,SAAAiB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAZ,EAAAkB,EAAAC,GAAA,IAAAE,EAAAvB,EAAAL,EAAAmB,GAAAnB,EAAAO,GAAA,aAAAqB,EAAAzH,KAAA,KAAA0H,EAAAD,EAAArB,IAAA1K,EAAAgM,EAAAhM,MAAA,OAAAA,GAAA,iBAAAA,GAAA0I,EAAAtJ,KAAAY,EAAA,WAAAyL,EAAAG,QAAA5L,EAAAiM,SAAAC,KAAA,SAAAlM,GAAA8L,EAAA,OAAA9L,EAAA4L,EAAAC,IAAA,SAAAlC,GAAAmC,EAAA,QAAAnC,EAAAiC,EAAAC,KAAAJ,EAAAG,QAAA5L,GAAAkM,KAAA,SAAAC,GAAAH,EAAAhM,MAAAmM,EAAAP,EAAAI,IAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,OAAAE,EAAArB,KAAAoB,CAAAR,EAAAZ,EAAAkB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAApB,EAAAV,EAAAE,EAAAM,GAAA,IAAAhL,EAAA,iCAAAiM,EAAAZ,GAAA,iBAAArL,EAAA,UAAAgN,MAAA,iDAAAhN,EAAA,cAAAiM,EAAA,MAAAZ,EAAA,OAAA4B,IAAA,IAAAjC,EAAAiB,SAAAjB,EAAAK,QAAA,KAAA6B,EAAAlC,EAAAkC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAlC,GAAA,GAAAmC,EAAA,IAAAA,IAAA7B,EAAA,gBAAA6B,GAAA,YAAAnC,EAAAiB,OAAAjB,EAAAqC,KAAArC,EAAAsC,MAAAtC,EAAAK,SAAA,aAAAL,EAAAiB,OAAA,uBAAAjM,EAAA,MAAAA,EAAA,YAAAgL,EAAAK,IAAAL,EAAAuC,kBAAAvC,EAAAK,SAAA,WAAAL,EAAAiB,QAAAjB,EAAAwC,OAAA,SAAAxC,EAAAK,KAAArL,EAAA,gBAAA0M,EAAAvB,EAAAX,EAAAE,EAAAM,GAAA,cAAA0B,EAAAzH,KAAA,IAAAjF,EAAAgL,EAAAyC,KAAA,6BAAAf,EAAArB,MAAAC,EAAA,gBAAA3K,MAAA+L,EAAArB,IAAAoC,KAAAzC,EAAAyC,MAAA,UAAAf,EAAAzH,OAAAjF,EAAA,YAAAgL,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,OAAA,SAAA+B,EAAAF,EAAAlC,GAAA,IAAA0C,EAAA1C,EAAAiB,SAAAiB,EAAArD,SAAA6D,GAAA,QAAAC,IAAA1B,EAAA,OAAAjB,EAAAkC,SAAA,eAAAQ,GAAAR,EAAArD,SAAA+D,SAAA5C,EAAAiB,OAAA,SAAAjB,EAAAK,SAAAsC,EAAAP,EAAAF,EAAAlC,GAAA,UAAAA,EAAAiB,SAAA,WAAAyB,IAAA1C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAAH,EAAA,aAAApC,EAAA,IAAAoB,EAAAvB,EAAAc,EAAAiB,EAAArD,SAAAmB,EAAAK,KAAA,aAAAqB,EAAAzH,KAAA,OAAA+F,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,IAAAL,EAAAkC,SAAA,KAAA5B,EAAA,IAAAwC,EAAApB,EAAArB,IAAA,OAAAyC,IAAAL,MAAAzC,EAAAkC,EAAAa,YAAAD,EAAAnN,MAAAqK,EAAAgD,KAAAd,EAAAe,QAAA,WAAAjD,EAAAiB,SAAAjB,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,GAAA3C,EAAAkC,SAAA,KAAA5B,GAAAwC,GAAA9C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAA7C,EAAAkC,SAAA,KAAA5B,GAAA,SAAA4C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAAvO,KAAA6O,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA1B,EAAA0B,EAAAQ,YAAA,GAAAlC,EAAAzH,KAAA,gBAAAyH,EAAArB,IAAA+C,EAAAQ,WAAAlC,EAAA,SAAAzB,EAAAN,GAAA/K,KAAA6O,WAAA,EAAAJ,OAAA,SAAA1D,EAAAqB,QAAAkC,EAAAtO,WAAAiP,OAAA,YAAAhD,EAAAiD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAAlF,GAAA,GAAAmF,EAAA,OAAAA,EAAAhP,KAAA+O,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAA5F,EAAAtJ,KAAA+O,EAAAI,GAAA,OAAAlB,EAAArN,MAAAmO,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAArN,WAAAgN,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAAtM,WAAAgN,EAAAF,MAAA,UAAAlC,EAAAnC,UAAAoC,EAAAjC,EAAAuC,EAAA,eAAAnL,MAAA6K,EAAApB,cAAA,IAAAb,EAAAiC,EAAA,eAAA7K,MAAA4K,EAAAnB,cAAA,IAAAmB,EAAA4D,YAAAjF,EAAAsB,EAAAxB,EAAA,qBAAA3K,EAAA+P,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAA/D,GAAA,uBAAA+D,EAAAH,aAAAG,EAAAE,QAAAnQ,EAAAoQ,KAAA,SAAAJ,GAAA,OAAAlG,OAAAuG,eAAAvG,OAAAuG,eAAAL,EAAA7D,IAAA6D,EAAAM,UAAAnE,EAAAtB,EAAAmF,EAAArF,EAAA,sBAAAqF,EAAAjG,UAAAD,OAAA4B,OAAAe,GAAAuD,GAAAhQ,EAAAuQ,MAAA,SAAAvE,GAAA,OAAAuB,QAAAvB,IAAAU,EAAAI,EAAA/C,WAAAc,EAAAiC,EAAA/C,UAAAU,EAAA,kBAAAlK,OAAAP,EAAA8M,gBAAA9M,EAAAwQ,MAAA,SAAArF,EAAAC,EAAAC,EAAAC,EAAAyB,QAAA,IAAAA,MAAA0D,SAAA,IAAAC,EAAA,IAAA5D,EAAA5B,EAAAC,EAAAC,EAAAC,EAAAC,GAAAyB,GAAA,OAAA/M,EAAA+P,oBAAA3E,GAAAsF,IAAA/B,OAAAnB,KAAA,SAAAF,GAAA,OAAAA,EAAAc,KAAAd,EAAAhM,MAAAoP,EAAA/B,UAAAjC,EAAAD,GAAA5B,EAAA4B,EAAA9B,EAAA,aAAAE,EAAA4B,EAAAlC,EAAA,kBAAAhK,OAAAsK,EAAA4B,EAAA,mDAAAzM,EAAA2Q,KAAA,SAAAC,GAAA,IAAAC,EAAA/G,OAAA8G,GAAAD,EAAA,WAAAtP,KAAAwP,EAAAF,EAAAtB,KAAAhO,GAAA,OAAAsP,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAAvO,EAAAsP,EAAAI,MAAA,GAAA1P,KAAAwP,EAAA,OAAAlC,EAAArN,MAAAD,EAAAsN,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAA3O,EAAAwM,SAAAZ,EAAA7B,UAAA,CAAAmG,YAAAtE,EAAA4D,MAAA,SAAAwB,GAAA,GAAAzQ,KAAA0Q,KAAA,EAAA1Q,KAAAoO,KAAA,EAAApO,KAAAyN,KAAAzN,KAAA0N,WAAAK,EAAA/N,KAAA6N,MAAA,EAAA7N,KAAAsN,SAAA,KAAAtN,KAAAqM,OAAA,OAAArM,KAAAyL,SAAAsC,EAAA/N,KAAA6O,WAAAzC,QAAA2C,IAAA0B,EAAA,QAAAb,KAAA5P,KAAA,MAAA4P,EAAAe,OAAA,IAAAlH,EAAAtJ,KAAAH,KAAA4P,KAAAR,OAAAQ,EAAA7H,MAAA,MAAA/H,KAAA4P,QAAA7B,IAAA6C,KAAA,WAAA5Q,KAAA6N,MAAA,MAAAgD,EAAA7Q,KAAA6O,WAAA,GAAAG,WAAA,aAAA6B,EAAAxL,KAAA,MAAAwL,EAAApF,IAAA,OAAAzL,KAAA8Q,MAAAnD,kBAAA,SAAAoD,GAAA,GAAA/Q,KAAA6N,KAAA,MAAAkD,EAAA,IAAA3F,EAAApL,KAAA,SAAAgR,EAAAC,EAAAC,GAAA,OAAApE,EAAAzH,KAAA,QAAAyH,EAAArB,IAAAsF,EAAA3F,EAAAgD,KAAA6C,EAAAC,IAAA9F,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,KAAAmD,EAAA,QAAA5B,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAAxC,EAAA0B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAuC,EAAA,UAAAxC,EAAAC,QAAAzO,KAAA0Q,KAAA,KAAAS,EAAA1H,EAAAtJ,KAAAqO,EAAA,YAAA4C,EAAA3H,EAAAtJ,KAAAqO,EAAA,iBAAA2C,GAAAC,EAAA,IAAApR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,MAAA1O,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,iBAAA,GAAAwC,GAAA,GAAAnR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,YAAA0C,EAAA,UAAAhE,MAAA,6CAAApN,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,gBAAAf,OAAA,SAAAvI,EAAAoG,GAAA,QAAA6D,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,QAAAzO,KAAA0Q,MAAAjH,EAAAtJ,KAAAqO,EAAA,eAAAxO,KAAA0Q,KAAAlC,EAAAG,WAAA,KAAA0C,EAAA7C,EAAA,OAAA6C,IAAA,UAAAhM,GAAA,aAAAA,IAAAgM,EAAA5C,QAAAhD,MAAA4F,EAAA1C,aAAA0C,EAAA,UAAAvE,EAAAuE,IAAArC,WAAA,UAAAlC,EAAAzH,OAAAyH,EAAArB,MAAA4F,GAAArR,KAAAqM,OAAA,OAAArM,KAAAoO,KAAAiD,EAAA1C,WAAAjD,GAAA1L,KAAAsR,SAAAxE,IAAAwE,SAAA,SAAAxE,EAAA8B,GAAA,aAAA9B,EAAAzH,KAAA,MAAAyH,EAAArB,IAAA,gBAAAqB,EAAAzH,MAAA,aAAAyH,EAAAzH,KAAArF,KAAAoO,KAAAtB,EAAArB,IAAA,WAAAqB,EAAAzH,MAAArF,KAAA8Q,KAAA9Q,KAAAyL,IAAAqB,EAAArB,IAAAzL,KAAAqM,OAAA,SAAArM,KAAAoO,KAAA,kBAAAtB,EAAAzH,MAAAuJ,IAAA5O,KAAAoO,KAAAQ,GAAAlD,GAAA6F,OAAA,SAAA5C,GAAA,QAAAW,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAG,eAAA,OAAA3O,KAAAsR,SAAA9C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA9C,IAAA8F,MAAA,SAAA/C,GAAA,QAAAa,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA3B,EAAA0B,EAAAQ,WAAA,aAAAlC,EAAAzH,KAAA,KAAAoM,EAAA3E,EAAArB,IAAAsD,EAAAP,GAAA,OAAAiD,GAAA,UAAArE,MAAA,0BAAAsE,cAAA,SAAAxC,EAAAf,EAAAE,GAAA,OAAArO,KAAAsN,SAAA,CAAArD,SAAAgC,EAAAiD,GAAAf,aAAAE,WAAA,SAAArO,KAAAqM,SAAArM,KAAAyL,SAAAsC,GAAArC,IAAAjM,EAEO,IAAMkS,EAAqBzP,IAAM0P,gBAGhCC,EAAa5O,OAAb4O,SAGKC,EAAsB,SAAHC,GAAqB,IAAfC,EAAQD,EAARC,SAEpCC,EAC4CC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAGlCI,EAAsB,eAAAC,EAAAC,YAAApJ,IAAAwG,KAAG,SAAA6C,IAAA,IAAAC,EAAA,OAAAtJ,IAAAsB,KAAA,SAAAiI,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAxE,MAAA,cAAAwE,EAAAlC,KAAA,EAAAkC,EAAAxE,KAAA,EAGJyD,EAASgB,QAAQ,CAAExG,OAAQ,iBAAiB,QAA7DsG,EAAQC,EAAAnF,MAGD4B,OACXiD,EAAkBK,EAAS,IAG3BG,QAAQC,IAAI,qBACbH,EAAAxE,KAAA,gBAAAwE,EAAAlC,KAAA,EAAAkC,EAAAI,GAAAJ,EAAA,SAEDE,QAAQC,IAAGH,EAAAI,IAAQ,yBAAAJ,EAAAhC,SAAA8B,EAAA,iBAEtB,kBAf2B,OAAAF,EAAAS,MAAAjT,KAAAkT,YAAA,GAkBtBC,EAAa,eAAAC,EAAAX,YAAApJ,IAAAwG,KAAG,SAAAwD,IAAA,IAAAV,EAAA,OAAAtJ,IAAAsB,KAAA,SAAA2I,GAAA,cAAAA,EAAA5C,KAAA4C,EAAAlF,MAAA,UAAAkF,EAAA5C,KAAA,EAGbmB,EAAQ,CAAAyB,EAAAlF,KAAA,eAAAkF,EAAA1F,OAAA,SAAS2F,MAAM,6BAA2B,cAAAD,EAAAlF,KAAA,EAGhCyD,EAASgB,QAAQ,CAAExG,OAAQ,wBAAyB,OAArEsG,EAAQW,EAAA7F,KAGd6E,EAAkBK,EAAS,IAE3B1P,OAAOuQ,SAASC,SAASH,EAAAlF,KAAA,iBAAAkF,EAAA5C,KAAA,GAAA4C,EAAAN,GAAAM,EAAA,SAEzBR,QAAQC,IAAGO,EAAAN,IAGX,yBAAAM,EAAA1C,SAAAyC,EAAA,kBAEH,kBAlBkB,OAAAD,EAAAH,MAAAjT,KAAAkT,YAAA,GAqBbQ,EAAgB,eAAAC,EAAAlB,YAAApJ,IAAAwG,KAAG,SAAA+D,IAAA,OAAAvK,IAAAsB,KAAA,SAAAkJ,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAzF,MAAA,cAAAyF,EAAAnD,KAAA,EAAAmD,EAAAzF,KAAA,EAGfyD,EAASgB,QAAQ,CACrBxG,OAAQ,4BACRyH,OAAQ,CAAC,CAAEC,aAAc,OACzB,OAGFlC,EAASmC,IAAI,kBAAmBC,GAEhC3B,EAAkB,IAElBrP,OAAOuQ,SAASC,SAASI,EAAAzF,KAAA,gBAAAyF,EAAAnD,KAAA,EAAAmD,EAAAb,GAAAa,EAAA,SAEzBf,QAAQC,IAAGc,EAAAb,IAAQ,yBAAAa,EAAAjD,SAAAgD,EAAA,iBAEtB,kBAjBqB,OAAAD,EAAAV,MAAAjT,KAAAkT,YAAA,GAoBhBe,EAAwB,SAACtB,GAEL,IAApBA,EAAStD,OACXiD,EAAkB,IAGlBA,EAAkBK,EAAS,KAU/B,OALAuB,oBAAU,WACR3B,KACC,IAIDrQ,IAAAC,cAACwP,EAAmBwC,SAAQ,CAC1BpT,MAAO,CACLoS,gBACAO,mBACArB,mBAGDL,iBCjGP3I,EAAA,kBAAA5J,GAAA,IAAAA,EAAA,GAAA6J,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAA9I,EAAA+I,GAAAD,EAAA9I,GAAA+I,EAAA9I,OAAA+I,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAA9I,EAAAC,GAAA,OAAAwI,OAAAI,eAAAC,EAAA9I,EAAA,CAAAC,QAAAwJ,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAb,EAAA9I,GAAA,IAAAwJ,EAAA,aAAAI,GAAAJ,EAAA,SAAAV,EAAA9I,EAAAC,GAAA,OAAA6I,EAAA9I,GAAAC,GAAA,SAAA4J,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAArB,qBAAAyB,EAAAJ,EAAAI,EAAAC,EAAA3B,OAAA4B,OAAAH,EAAAxB,WAAA4B,EAAA,IAAAC,EAAAN,GAAA,WAAApB,EAAAuB,EAAA,WAAAnK,MAAAuK,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA5B,EAAA6B,GAAA,WAAApG,KAAA,SAAAoG,IAAAD,EAAArL,KAAAyJ,EAAA6B,IAAA,MAAAf,GAAA,OAAArF,KAAA,QAAAoG,IAAAf,IAAAjL,EAAAkL,OAAA,IAAAe,EAAA,YAAAT,KAAA,SAAAU,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAvB,EAAAuB,EAAA7B,EAAA,kBAAAhK,OAAA,IAAA8L,EAAAvC,OAAAwC,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA1C,GAAAG,EAAAtJ,KAAA6L,EAAAhC,KAAA6B,EAAAG,GAAA,IAAAE,EAAAN,EAAApC,UAAAyB,EAAAzB,UAAAD,OAAA4B,OAAAU,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,QAAA,SAAAC,GAAA/B,EAAAd,EAAA6C,EAAA,SAAAZ,GAAA,OAAAzL,KAAAsM,QAAAD,EAAAZ,OAAA,SAAAc,EAAArB,EAAAsB,GAAA,IAAAC,EAAA9C,EAAA3J,KAAA,WAAAe,MAAA,SAAAsL,EAAAZ,GAAA,SAAAiB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAZ,EAAAkB,EAAAC,GAAA,IAAAE,EAAAvB,EAAAL,EAAAmB,GAAAnB,EAAAO,GAAA,aAAAqB,EAAAzH,KAAA,KAAA0H,EAAAD,EAAArB,IAAA1K,EAAAgM,EAAAhM,MAAA,OAAAA,GAAA,iBAAAA,GAAA0I,EAAAtJ,KAAAY,EAAA,WAAAyL,EAAAG,QAAA5L,EAAAiM,SAAAC,KAAA,SAAAlM,GAAA8L,EAAA,OAAA9L,EAAA4L,EAAAC,IAAA,SAAAlC,GAAAmC,EAAA,QAAAnC,EAAAiC,EAAAC,KAAAJ,EAAAG,QAAA5L,GAAAkM,KAAA,SAAAC,GAAAH,EAAAhM,MAAAmM,EAAAP,EAAAI,IAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,OAAAE,EAAArB,KAAAoB,CAAAR,EAAAZ,EAAAkB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAApB,EAAAV,EAAAE,EAAAM,GAAA,IAAAhL,EAAA,iCAAAiM,EAAAZ,GAAA,iBAAArL,EAAA,UAAAgN,MAAA,iDAAAhN,EAAA,cAAAiM,EAAA,MAAAZ,EAAA,OAAA4B,IAAA,IAAAjC,EAAAiB,SAAAjB,EAAAK,QAAA,KAAA6B,EAAAlC,EAAAkC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAlC,GAAA,GAAAmC,EAAA,IAAAA,IAAA7B,EAAA,gBAAA6B,GAAA,YAAAnC,EAAAiB,OAAAjB,EAAAqC,KAAArC,EAAAsC,MAAAtC,EAAAK,SAAA,aAAAL,EAAAiB,OAAA,uBAAAjM,EAAA,MAAAA,EAAA,YAAAgL,EAAAK,IAAAL,EAAAuC,kBAAAvC,EAAAK,SAAA,WAAAL,EAAAiB,QAAAjB,EAAAwC,OAAA,SAAAxC,EAAAK,KAAArL,EAAA,gBAAA0M,EAAAvB,EAAAX,EAAAE,EAAAM,GAAA,cAAA0B,EAAAzH,KAAA,IAAAjF,EAAAgL,EAAAyC,KAAA,6BAAAf,EAAArB,MAAAC,EAAA,gBAAA3K,MAAA+L,EAAArB,IAAAoC,KAAAzC,EAAAyC,MAAA,UAAAf,EAAAzH,OAAAjF,EAAA,YAAAgL,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,OAAA,SAAA+B,EAAAF,EAAAlC,GAAA,IAAA0C,EAAA1C,EAAAiB,SAAAiB,EAAArD,SAAA6D,GAAA,QAAAC,IAAA1B,EAAA,OAAAjB,EAAAkC,SAAA,eAAAQ,GAAAR,EAAArD,SAAA+D,SAAA5C,EAAAiB,OAAA,SAAAjB,EAAAK,SAAAsC,EAAAP,EAAAF,EAAAlC,GAAA,UAAAA,EAAAiB,SAAA,WAAAyB,IAAA1C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAAH,EAAA,aAAApC,EAAA,IAAAoB,EAAAvB,EAAAc,EAAAiB,EAAArD,SAAAmB,EAAAK,KAAA,aAAAqB,EAAAzH,KAAA,OAAA+F,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,IAAAL,EAAAkC,SAAA,KAAA5B,EAAA,IAAAwC,EAAApB,EAAArB,IAAA,OAAAyC,IAAAL,MAAAzC,EAAAkC,EAAAa,YAAAD,EAAAnN,MAAAqK,EAAAgD,KAAAd,EAAAe,QAAA,WAAAjD,EAAAiB,SAAAjB,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,GAAA3C,EAAAkC,SAAA,KAAA5B,GAAAwC,GAAA9C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAA7C,EAAAkC,SAAA,KAAA5B,GAAA,SAAA4C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAAvO,KAAA6O,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA1B,EAAA0B,EAAAQ,YAAA,GAAAlC,EAAAzH,KAAA,gBAAAyH,EAAArB,IAAA+C,EAAAQ,WAAAlC,EAAA,SAAAzB,EAAAN,GAAA/K,KAAA6O,WAAA,EAAAJ,OAAA,SAAA1D,EAAAqB,QAAAkC,EAAAtO,WAAAiP,OAAA,YAAAhD,EAAAiD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAAlF,GAAA,GAAAmF,EAAA,OAAAA,EAAAhP,KAAA+O,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAA5F,EAAAtJ,KAAA+O,EAAAI,GAAA,OAAAlB,EAAArN,MAAAmO,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAArN,WAAAgN,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAAtM,WAAAgN,EAAAF,MAAA,UAAAlC,EAAAnC,UAAAoC,EAAAjC,EAAAuC,EAAA,eAAAnL,MAAA6K,EAAApB,cAAA,IAAAb,EAAAiC,EAAA,eAAA7K,MAAA4K,EAAAnB,cAAA,IAAAmB,EAAA4D,YAAAjF,EAAAsB,EAAAxB,EAAA,qBAAA3K,EAAA+P,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAA/D,GAAA,uBAAA+D,EAAAH,aAAAG,EAAAE,QAAAnQ,EAAAoQ,KAAA,SAAAJ,GAAA,OAAAlG,OAAAuG,eAAAvG,OAAAuG,eAAAL,EAAA7D,IAAA6D,EAAAM,UAAAnE,EAAAtB,EAAAmF,EAAArF,EAAA,sBAAAqF,EAAAjG,UAAAD,OAAA4B,OAAAe,GAAAuD,GAAAhQ,EAAAuQ,MAAA,SAAAvE,GAAA,OAAAuB,QAAAvB,IAAAU,EAAAI,EAAA/C,WAAAc,EAAAiC,EAAA/C,UAAAU,EAAA,kBAAAlK,OAAAP,EAAA8M,gBAAA9M,EAAAwQ,MAAA,SAAArF,EAAAC,EAAAC,EAAAC,EAAAyB,QAAA,IAAAA,MAAA0D,SAAA,IAAAC,EAAA,IAAA5D,EAAA5B,EAAAC,EAAAC,EAAAC,EAAAC,GAAAyB,GAAA,OAAA/M,EAAA+P,oBAAA3E,GAAAsF,IAAA/B,OAAAnB,KAAA,SAAAF,GAAA,OAAAA,EAAAc,KAAAd,EAAAhM,MAAAoP,EAAA/B,UAAAjC,EAAAD,GAAA5B,EAAA4B,EAAA9B,EAAA,aAAAE,EAAA4B,EAAAlC,EAAA,kBAAAhK,OAAAsK,EAAA4B,EAAA,mDAAAzM,EAAA2Q,KAAA,SAAAC,GAAA,IAAAC,EAAA/G,OAAA8G,GAAAD,EAAA,WAAAtP,KAAAwP,EAAAF,EAAAtB,KAAAhO,GAAA,OAAAsP,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAAvO,EAAAsP,EAAAI,MAAA,GAAA1P,KAAAwP,EAAA,OAAAlC,EAAArN,MAAAD,EAAAsN,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAA3O,EAAAwM,SAAAZ,EAAA7B,UAAA,CAAAmG,YAAAtE,EAAA4D,MAAA,SAAAwB,GAAA,GAAAzQ,KAAA0Q,KAAA,EAAA1Q,KAAAoO,KAAA,EAAApO,KAAAyN,KAAAzN,KAAA0N,WAAAK,EAAA/N,KAAA6N,MAAA,EAAA7N,KAAAsN,SAAA,KAAAtN,KAAAqM,OAAA,OAAArM,KAAAyL,SAAAsC,EAAA/N,KAAA6O,WAAAzC,QAAA2C,IAAA0B,EAAA,QAAAb,KAAA5P,KAAA,MAAA4P,EAAAe,OAAA,IAAAlH,EAAAtJ,KAAAH,KAAA4P,KAAAR,OAAAQ,EAAA7H,MAAA,MAAA/H,KAAA4P,QAAA7B,IAAA6C,KAAA,WAAA5Q,KAAA6N,MAAA,MAAAgD,EAAA7Q,KAAA6O,WAAA,GAAAG,WAAA,aAAA6B,EAAAxL,KAAA,MAAAwL,EAAApF,IAAA,OAAAzL,KAAA8Q,MAAAnD,kBAAA,SAAAoD,GAAA,GAAA/Q,KAAA6N,KAAA,MAAAkD,EAAA,IAAA3F,EAAApL,KAAA,SAAAgR,EAAAC,EAAAC,GAAA,OAAApE,EAAAzH,KAAA,QAAAyH,EAAArB,IAAAsF,EAAA3F,EAAAgD,KAAA6C,EAAAC,IAAA9F,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,KAAAmD,EAAA,QAAA5B,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAAxC,EAAA0B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAuC,EAAA,UAAAxC,EAAAC,QAAAzO,KAAA0Q,KAAA,KAAAS,EAAA1H,EAAAtJ,KAAAqO,EAAA,YAAA4C,EAAA3H,EAAAtJ,KAAAqO,EAAA,iBAAA2C,GAAAC,EAAA,IAAApR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,MAAA1O,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,iBAAA,GAAAwC,GAAA,GAAAnR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,YAAA0C,EAAA,UAAAhE,MAAA,6CAAApN,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,gBAAAf,OAAA,SAAAvI,EAAAoG,GAAA,QAAA6D,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,QAAAzO,KAAA0Q,MAAAjH,EAAAtJ,KAAAqO,EAAA,eAAAxO,KAAA0Q,KAAAlC,EAAAG,WAAA,KAAA0C,EAAA7C,EAAA,OAAA6C,IAAA,UAAAhM,GAAA,aAAAA,IAAAgM,EAAA5C,QAAAhD,MAAA4F,EAAA1C,aAAA0C,EAAA,UAAAvE,EAAAuE,IAAArC,WAAA,UAAAlC,EAAAzH,OAAAyH,EAAArB,MAAA4F,GAAArR,KAAAqM,OAAA,OAAArM,KAAAoO,KAAAiD,EAAA1C,WAAAjD,GAAA1L,KAAAsR,SAAAxE,IAAAwE,SAAA,SAAAxE,EAAA8B,GAAA,aAAA9B,EAAAzH,KAAA,MAAAyH,EAAArB,IAAA,gBAAAqB,EAAAzH,MAAA,aAAAyH,EAAAzH,KAAArF,KAAAoO,KAAAtB,EAAArB,IAAA,WAAAqB,EAAAzH,MAAArF,KAAA8Q,KAAA9Q,KAAAyL,IAAAqB,EAAArB,IAAAzL,KAAAqM,OAAA,SAAArM,KAAAoO,KAAA,kBAAAtB,EAAAzH,MAAAuJ,IAAA5O,KAAAoO,KAAAQ,GAAAlD,GAAA6F,OAAA,SAAA5C,GAAA,QAAAW,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAG,eAAA,OAAA3O,KAAAsR,SAAA9C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA9C,IAAA8F,MAAA,SAAA/C,GAAA,QAAAa,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA3B,EAAA0B,EAAAQ,WAAA,aAAAlC,EAAAzH,KAAA,KAAAoM,EAAA3E,EAAArB,IAAAsD,EAAAP,GAAA,OAAAiD,GAAA,UAAArE,MAAA,0BAAAsE,cAAA,SAAAxC,EAAAf,EAAAE,GAAA,OAAArO,KAAAsN,SAAA,CAAArD,SAAAgC,EAAAiD,GAAAf,aAAAE,WAAA,SAAArO,KAAAqM,SAAArM,KAAAyL,SAAAsC,GAAArC,IAAAjM,EAMA,IAgJe2U,EAhJC,WACd,IAAAC,EAC4DC,qBAAW3C,GAA/DwB,EAAakB,EAAblB,cAAeO,EAAgBW,EAAhBX,iBAAkBrB,EAAcgC,EAAdhC,eAEzCJ,EACkCC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA1CsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAE9BsC,EACwCvC,mBAAS,IAAGwC,EAAAtC,YAAAqC,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAG9BG,EAA2BC,sBAAY,WAC3CpB,KACC,CAACA,IAGJQ,oBAAU,WACR,IAAMa,EAAiB,eAAAhD,EAAAU,YAAApJ,IAAAwG,KAAG,SAAA6C,IAAA,IAAAsC,EAAAC,EAAA,OAAA5L,IAAAsB,KAAA,SAAAiI,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAxE,MAAA,cAAAwE,EAAAlC,KAAA,EAAAkC,EAAAxE,KAAA,EAEC8G,MACrB,6GACD,OAFa,OAARF,EAAQpC,EAAAnF,KAAAmF,EAAAxE,KAAA,EAGK4G,EAASG,OAAM,OAA5BF,EAAIrC,EAAAnF,KACVmH,EAAgBK,GAAMrC,EAAAxE,KAAA,iBAAAwE,EAAAlC,KAAA,GAAAkC,EAAAI,GAAAJ,EAAA,SAEtBE,QAAQ3F,MAAKyF,EAAAI,IAAQ,yBAAAJ,EAAAhC,SAAA8B,EAAA,kBAExB,kBAVsB,OAAAX,EAAAkB,MAAAjT,KAAAkT,YAAA,GAWvB6B,IACA,IAAMK,EAAapU,YAAY+T,EAAmB,KAClD,OAAO,kBAAM1T,cAAc+T,KAC1B,IAGH,ICzC6BvN,ED8C7B,OAEE3F,IAAAC,cAACkT,IAAM,CAACvO,GAAG,OAAOa,QAAQ,OAAO2N,OAAO,KAAKC,MAAM,MAAMxS,UAAU,cAEjEb,IAAAC,cAACkT,IAAOG,MAAK,CAACtM,KAAK,IAAI9G,MAAO,CAAEC,MAAO,UACrCH,IAAAC,cAAA,OACEsE,IAAK0C,IACLjD,MAAM,MACN7B,OAAO,KACPtB,UAAU,2BACV4D,IAAI,UAIRzE,IAAAC,cAACkT,IAAOI,OAAM,CAACC,gBAAc,0BAE7BxT,IAAAC,cAACkT,IAAOM,SAAQ,CAACvQ,GAAG,yBAClBlD,IAAAC,cAACyT,IAAG,CAAC7S,UAAU,YACfb,IAAAC,cAACyT,IAAG,KAEF1T,IAAAC,cAACyT,IAAIC,KAAI,KACP3T,IAAAC,cAAC2T,IAAM,CAACnO,QAAQ,OAAOrC,QAAS,kBAAMkP,GAAa,KAAO,kBAK5DtS,IAAAC,cAACyT,IAAIC,KAAI,KACNlB,GACCzS,IAAAC,cAAA,WAASY,UAAU,aAAakC,SAAS,SAASC,UAAU,OAAOC,aAAa,KAC7EoE,OAAOwM,QAAQpB,GACbpN,IAAI,SAAAiL,GAAA,IAAAY,EAAAhB,YAAAI,EAAA,GAAE1R,EAAGsS,EAAA,GAAErS,EAAKqS,EAAA,YAAA9P,OAASxC,EAAIkV,cAAa,OAAA1S,OAAMvC,EAAMkV,OACtDC,KAAK,SAKdhU,IAAAC,cAACyT,IAAIC,KAAI,CAAC9S,UAAU,oBAClBb,IAAAC,cAAA,SAAOC,MAAO,CAAEC,MAAO,QAASmE,OAAQ,WAAalB,QA1CpC,WACzB6Q,UAAUC,UAAUC,UAAUhE,GAC9BkB,MAAM,kCAwCoF,YCnFxD,GAAAjQ,QAAPuE,EDoFQwK,GCpFetK,MAAM,EAAG,GAAE,OAAAzE,OAAMuE,EAAQE,MAAMF,EAAQwH,OAAS,MDwF5FnN,IAAAC,cAACyT,IAAIC,KAAI,MACLxD,GACAnQ,IAAAC,cAAC2T,IAAM,CAACxQ,QAAS6N,EAAexL,QAAQ,OAAO2O,KAAK,MAAK,kBAI1DjE,GACCnQ,IAAAC,cAAA,OAAKY,UAAU,UACbb,IAAAC,cAAC2T,IAAM,CAACnO,QAAQ,UAAU2O,KAAK,KAAKC,UAAQ,GAAC,aAG7CrU,IAAAC,cAAC2T,IAAM,CAACxQ,QAASuP,EAA0BlN,QAAQ,SAAS2O,KAAK,KAAKvT,UAAU,QAAO,oBAQjGb,IAAAC,cAACqU,IAAK,CAACC,KAAMlC,EAAWmC,OAAQ,kBAAMlC,GAAa,KACjDtS,IAAAC,cAACqU,IAAMzP,OAAM,CAAC4P,aAAW,GACvBzU,IAAAC,cAACqU,IAAM5O,MAAK,KAAC,kBAIjB1F,IAAAC,cAACqU,IAAMxP,KAAI,KACX9E,IAAAC,cAAA,UAAI,kBAAmB,IACvBD,IAAAC,cAAA,SAAG,gNAKHD,IAAAC,cAAA,SAAG,4DAGHD,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,iFAAkF,IACtFD,IAAAC,cAAA,UAAI,yDAA0D,IAC9DD,IAAAC,cAAA,UAAI,sEAAuE,IAC3ED,IAAAC,cAAA,UAAI,sCAAuC,IAC3CD,IAAAC,cAAA,UAAI,kDAAmD,IACvDD,IAAAC,cAAA,UAAI,oEAAqE,IACzED,IAAAC,cAAA,UAAI,qEAAsE,IAC1ED,IAAAC,cAAA,UAAI,uDAAwD,IAC5DD,IAAAC,cAAA,UAAI,4CAA6C,KAEnDD,IAAAC,cAAA,SAAG,kMAMHD,IAAAC,cAACqU,IAAMvN,OAAM,KACX/G,IAAAC,cAAC2T,IAAM,CAACnO,QAAQ,YAAYrC,QAAS,kBAAMkP,GAAa,KAAQ,aEzIlEoC,UAAU,SAAH7E,GAA2C,IAArC8E,EAAiB9E,EAAjB8E,kBAAmBP,EAAIvE,EAAJuE,KAAMjU,EAAK0P,EAAL1P,MAE1C,OACEH,IAAAC,cAAA,OACEY,UAAU,sBACVX,MAAO,CACLiC,OAAM,GAAAf,OAAKgT,EAAI,MACfpQ,MAAK,GAAA5C,OAAKgT,EAAI,MACdQ,WAAU,WAIZ5U,IAAAC,cAAA,OACEY,UAAU,kBACVX,MAAO,CACL2U,YAAW,GAAAzT,OAAKgT,EAAO,GAAE,MACzBO,kBAAiB,GAAAvT,OAAKuT,EAAiB,MACvCjS,eAAgBvC,KAIpBH,IAAAC,cAAA,OACEY,UAAU,kBACVX,MAAO,CACL2U,YAAW,GAAAzT,OAAKgT,EAAO,GAAE,MACzBO,kBAAiB,GAAAvT,OAAKuT,EAAiB,MACvC/R,kBAAmBzC,QAQ7BuU,EAAQI,aAAe,CACrBH,kBAAmB,IACnBP,KAAM,GACNjU,MAAO,QAIMuU,uECiDAK,EA3FO,SAAApX,GAAA,SAAAoX,IAAA,OAAAlX,YAAAC,KAAAiX,GAAAhX,YAAAD,KAAAE,YAAA+W,GAAAhE,MAAAjT,KAAAkT,YAwFnB,OAxFmBtS,YAAAqW,EAAApX,GAAAgB,YAAAoW,EAAA,EAAAnW,IAAA,SAAAC,MAAA,WAElB,OACEmB,IAAAC,cAAA,WACED,IAAAC,cAAC+U,IAAS,CACR7S,OAAO,SACP6B,MAAM,SACNd,GAAG,cACH+R,QAAS,CACPC,WAAY,CACV/U,MAAO,CACLtB,MAAO,YAGXsW,SAAU,IACVC,cAAe,CACbC,UAAW,SACXC,OAAQ,CACNlS,QAAS,CACPmS,OAAQ,OACRC,KAAM,QAERC,QAAS,CACPF,OAAQ,OACRC,KAAM,WAERE,OAAQ,QAEVC,MAAO,CACLC,OAAQ,CACNC,SAAU,IACVC,SAAU,EACVC,QAAS,GACT3B,KAAM,IAERxH,KAAM,CACJoJ,SAAU,GAEZC,QAAS,CACPJ,SAAU,IACVC,SAAU,MAIhBI,UAAW,CACT/V,MAAO,CACLtB,MAAO,WAETsX,MAAO,CACLhW,MAAO,UACP0V,SAAU,IACVN,QAAQ,EACRQ,QAAS,GACT/R,MAAO,GAEToS,WAAY,CACVb,QAAQ,GAEVc,KAAM,CACJrT,UAAW,OACXuS,QAAQ,EACRe,QAAS,SACTC,QAAQ,EACRC,MAAO,IACPC,UAAU,GAEZC,OAAQ,CACNC,QAAS,CACPpB,QAAQ,EACRqB,WAAY,KAEd/X,MAAO,IAETkX,QAAS,CACPlX,MAAO,GAETgY,MAAO,CACL1T,KAAM,UAERiR,KAAM,CACJmC,QAAQ,EACR1X,MAAO,YAOpBkW,EAxFmB,CAAS3U,kCCF/B+G,EAAA,kBAAA5J,GAAA,IAAAA,EAAA,GAAA6J,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAA9I,EAAA+I,GAAAD,EAAA9I,GAAA+I,EAAA9I,OAAA+I,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAA9I,EAAAC,GAAA,OAAAwI,OAAAI,eAAAC,EAAA9I,EAAA,CAAAC,QAAAwJ,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAb,EAAA9I,GAAA,IAAAwJ,EAAA,aAAAI,GAAAJ,EAAA,SAAAV,EAAA9I,EAAAC,GAAA,OAAA6I,EAAA9I,GAAAC,GAAA,SAAA4J,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAArB,qBAAAyB,EAAAJ,EAAAI,EAAAC,EAAA3B,OAAA4B,OAAAH,EAAAxB,WAAA4B,EAAA,IAAAC,EAAAN,GAAA,WAAApB,EAAAuB,EAAA,WAAAnK,MAAAuK,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA5B,EAAA6B,GAAA,WAAApG,KAAA,SAAAoG,IAAAD,EAAArL,KAAAyJ,EAAA6B,IAAA,MAAAf,GAAA,OAAArF,KAAA,QAAAoG,IAAAf,IAAAjL,EAAAkL,OAAA,IAAAe,EAAA,YAAAT,KAAA,SAAAU,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAvB,EAAAuB,EAAA7B,EAAA,kBAAAhK,OAAA,IAAA8L,EAAAvC,OAAAwC,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA1C,GAAAG,EAAAtJ,KAAA6L,EAAAhC,KAAA6B,EAAAG,GAAA,IAAAE,EAAAN,EAAApC,UAAAyB,EAAAzB,UAAAD,OAAA4B,OAAAU,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,QAAA,SAAAC,GAAA/B,EAAAd,EAAA6C,EAAA,SAAAZ,GAAA,OAAAzL,KAAAsM,QAAAD,EAAAZ,OAAA,SAAAc,EAAArB,EAAAsB,GAAA,IAAAC,EAAA9C,EAAA3J,KAAA,WAAAe,MAAA,SAAAsL,EAAAZ,GAAA,SAAAiB,IAAA,WAAAF,EAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAZ,EAAAkB,EAAAC,GAAA,IAAAE,EAAAvB,EAAAL,EAAAmB,GAAAnB,EAAAO,GAAA,aAAAqB,EAAAzH,KAAA,KAAA0H,EAAAD,EAAArB,IAAA1K,EAAAgM,EAAAhM,MAAA,OAAAA,GAAA,iBAAAA,GAAA0I,EAAAtJ,KAAAY,EAAA,WAAAyL,EAAAG,QAAA5L,EAAAiM,SAAAC,KAAA,SAAAlM,GAAA8L,EAAA,OAAA9L,EAAA4L,EAAAC,IAAA,SAAAlC,GAAAmC,EAAA,QAAAnC,EAAAiC,EAAAC,KAAAJ,EAAAG,QAAA5L,GAAAkM,KAAA,SAAAC,GAAAH,EAAAhM,MAAAmM,EAAAP,EAAAI,IAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,OAAAE,EAAArB,KAAAoB,CAAAR,EAAAZ,EAAAkB,EAAAC,KAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAApB,EAAAV,EAAAE,EAAAM,GAAA,IAAAhL,EAAA,iCAAAiM,EAAAZ,GAAA,iBAAArL,EAAA,UAAAgN,MAAA,iDAAAhN,EAAA,cAAAiM,EAAA,MAAAZ,EAAA,OAAA4B,IAAA,IAAAjC,EAAAiB,SAAAjB,EAAAK,QAAA,KAAA6B,EAAAlC,EAAAkC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAlC,GAAA,GAAAmC,EAAA,IAAAA,IAAA7B,EAAA,gBAAA6B,GAAA,YAAAnC,EAAAiB,OAAAjB,EAAAqC,KAAArC,EAAAsC,MAAAtC,EAAAK,SAAA,aAAAL,EAAAiB,OAAA,uBAAAjM,EAAA,MAAAA,EAAA,YAAAgL,EAAAK,IAAAL,EAAAuC,kBAAAvC,EAAAK,SAAA,WAAAL,EAAAiB,QAAAjB,EAAAwC,OAAA,SAAAxC,EAAAK,KAAArL,EAAA,gBAAA0M,EAAAvB,EAAAX,EAAAE,EAAAM,GAAA,cAAA0B,EAAAzH,KAAA,IAAAjF,EAAAgL,EAAAyC,KAAA,6BAAAf,EAAArB,MAAAC,EAAA,gBAAA3K,MAAA+L,EAAArB,IAAAoC,KAAAzC,EAAAyC,MAAA,UAAAf,EAAAzH,OAAAjF,EAAA,YAAAgL,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,OAAA,SAAA+B,EAAAF,EAAAlC,GAAA,IAAA0C,EAAA1C,EAAAiB,SAAAiB,EAAArD,SAAA6D,GAAA,QAAAC,IAAA1B,EAAA,OAAAjB,EAAAkC,SAAA,eAAAQ,GAAAR,EAAArD,SAAA+D,SAAA5C,EAAAiB,OAAA,SAAAjB,EAAAK,SAAAsC,EAAAP,EAAAF,EAAAlC,GAAA,UAAAA,EAAAiB,SAAA,WAAAyB,IAAA1C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAAH,EAAA,aAAApC,EAAA,IAAAoB,EAAAvB,EAAAc,EAAAiB,EAAArD,SAAAmB,EAAAK,KAAA,aAAAqB,EAAAzH,KAAA,OAAA+F,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,IAAAL,EAAAkC,SAAA,KAAA5B,EAAA,IAAAwC,EAAApB,EAAArB,IAAA,OAAAyC,IAAAL,MAAAzC,EAAAkC,EAAAa,YAAAD,EAAAnN,MAAAqK,EAAAgD,KAAAd,EAAAe,QAAA,WAAAjD,EAAAiB,SAAAjB,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,GAAA3C,EAAAkC,SAAA,KAAA5B,GAAAwC,GAAA9C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAwC,UAAA,oCAAA7C,EAAAkC,SAAA,KAAA5B,GAAA,SAAA4C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,IAAAvO,KAAA6O,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA1B,EAAA0B,EAAAQ,YAAA,GAAAlC,EAAAzH,KAAA,gBAAAyH,EAAArB,IAAA+C,EAAAQ,WAAAlC,EAAA,SAAAzB,EAAAN,GAAA/K,KAAA6O,WAAA,EAAAJ,OAAA,SAAA1D,EAAAqB,QAAAkC,EAAAtO,WAAAiP,OAAA,YAAAhD,EAAAiD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAAlF,GAAA,GAAAmF,EAAA,OAAAA,EAAAhP,KAAA+O,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAA5F,EAAAtJ,KAAA+O,EAAAI,GAAA,OAAAlB,EAAArN,MAAAmO,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAArN,WAAAgN,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAAtM,WAAAgN,EAAAF,MAAA,UAAAlC,EAAAnC,UAAAoC,EAAAjC,EAAAuC,EAAA,eAAAnL,MAAA6K,EAAApB,cAAA,IAAAb,EAAAiC,EAAA,eAAA7K,MAAA4K,EAAAnB,cAAA,IAAAmB,EAAA4D,YAAAjF,EAAAsB,EAAAxB,EAAA,qBAAA3K,EAAA+P,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAA/D,GAAA,uBAAA+D,EAAAH,aAAAG,EAAAE,QAAAnQ,EAAAoQ,KAAA,SAAAJ,GAAA,OAAAlG,OAAAuG,eAAAvG,OAAAuG,eAAAL,EAAA7D,IAAA6D,EAAAM,UAAAnE,EAAAtB,EAAAmF,EAAArF,EAAA,sBAAAqF,EAAAjG,UAAAD,OAAA4B,OAAAe,GAAAuD,GAAAhQ,EAAAuQ,MAAA,SAAAvE,GAAA,OAAAuB,QAAAvB,IAAAU,EAAAI,EAAA/C,WAAAc,EAAAiC,EAAA/C,UAAAU,EAAA,kBAAAlK,OAAAP,EAAA8M,gBAAA9M,EAAAwQ,MAAA,SAAArF,EAAAC,EAAAC,EAAAC,EAAAyB,QAAA,IAAAA,MAAA0D,SAAA,IAAAC,EAAA,IAAA5D,EAAA5B,EAAAC,EAAAC,EAAAC,EAAAC,GAAAyB,GAAA,OAAA/M,EAAA+P,oBAAA3E,GAAAsF,IAAA/B,OAAAnB,KAAA,SAAAF,GAAA,OAAAA,EAAAc,KAAAd,EAAAhM,MAAAoP,EAAA/B,UAAAjC,EAAAD,GAAA5B,EAAA4B,EAAA9B,EAAA,aAAAE,EAAA4B,EAAAlC,EAAA,kBAAAhK,OAAAsK,EAAA4B,EAAA,mDAAAzM,EAAA2Q,KAAA,SAAAC,GAAA,IAAAC,EAAA/G,OAAA8G,GAAAD,EAAA,WAAAtP,KAAAwP,EAAAF,EAAAtB,KAAAhO,GAAA,OAAAsP,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAAvO,EAAAsP,EAAAI,MAAA,GAAA1P,KAAAwP,EAAA,OAAAlC,EAAArN,MAAAD,EAAAsN,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAA3O,EAAAwM,SAAAZ,EAAA7B,UAAA,CAAAmG,YAAAtE,EAAA4D,MAAA,SAAAwB,GAAA,GAAAzQ,KAAA0Q,KAAA,EAAA1Q,KAAAoO,KAAA,EAAApO,KAAAyN,KAAAzN,KAAA0N,WAAAK,EAAA/N,KAAA6N,MAAA,EAAA7N,KAAAsN,SAAA,KAAAtN,KAAAqM,OAAA,OAAArM,KAAAyL,SAAAsC,EAAA/N,KAAA6O,WAAAzC,QAAA2C,IAAA0B,EAAA,QAAAb,KAAA5P,KAAA,MAAA4P,EAAAe,OAAA,IAAAlH,EAAAtJ,KAAAH,KAAA4P,KAAAR,OAAAQ,EAAA7H,MAAA,MAAA/H,KAAA4P,QAAA7B,IAAA6C,KAAA,WAAA5Q,KAAA6N,MAAA,MAAAgD,EAAA7Q,KAAA6O,WAAA,GAAAG,WAAA,aAAA6B,EAAAxL,KAAA,MAAAwL,EAAApF,IAAA,OAAAzL,KAAA8Q,MAAAnD,kBAAA,SAAAoD,GAAA,GAAA/Q,KAAA6N,KAAA,MAAAkD,EAAA,IAAA3F,EAAApL,KAAA,SAAAgR,EAAAC,EAAAC,GAAA,OAAApE,EAAAzH,KAAA,QAAAyH,EAAArB,IAAAsF,EAAA3F,EAAAgD,KAAA6C,EAAAC,IAAA9F,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAsC,KAAAmD,EAAA,QAAA5B,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAAxC,EAAA0B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAuC,EAAA,UAAAxC,EAAAC,QAAAzO,KAAA0Q,KAAA,KAAAS,EAAA1H,EAAAtJ,KAAAqO,EAAA,YAAA4C,EAAA3H,EAAAtJ,KAAAqO,EAAA,iBAAA2C,GAAAC,EAAA,IAAApR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,MAAA1O,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,iBAAA,GAAAwC,GAAA,GAAAnR,KAAA0Q,KAAAlC,EAAAE,SAAA,OAAAsC,EAAAxC,EAAAE,UAAA,YAAA0C,EAAA,UAAAhE,MAAA,6CAAApN,KAAA0Q,KAAAlC,EAAAG,WAAA,OAAAqC,EAAAxC,EAAAG,gBAAAf,OAAA,SAAAvI,EAAAoG,GAAA,QAAA6D,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,QAAAzO,KAAA0Q,MAAAjH,EAAAtJ,KAAAqO,EAAA,eAAAxO,KAAA0Q,KAAAlC,EAAAG,WAAA,KAAA0C,EAAA7C,EAAA,OAAA6C,IAAA,UAAAhM,GAAA,aAAAA,IAAAgM,EAAA5C,QAAAhD,MAAA4F,EAAA1C,aAAA0C,EAAA,UAAAvE,EAAAuE,IAAArC,WAAA,UAAAlC,EAAAzH,OAAAyH,EAAArB,MAAA4F,GAAArR,KAAAqM,OAAA,OAAArM,KAAAoO,KAAAiD,EAAA1C,WAAAjD,GAAA1L,KAAAsR,SAAAxE,IAAAwE,SAAA,SAAAxE,EAAA8B,GAAA,aAAA9B,EAAAzH,KAAA,MAAAyH,EAAArB,IAAA,gBAAAqB,EAAAzH,MAAA,aAAAyH,EAAAzH,KAAArF,KAAAoO,KAAAtB,EAAArB,IAAA,WAAAqB,EAAAzH,MAAArF,KAAA8Q,KAAA9Q,KAAAyL,IAAAqB,EAAArB,IAAAzL,KAAAqM,OAAA,SAAArM,KAAAoO,KAAA,kBAAAtB,EAAAzH,MAAAuJ,IAAA5O,KAAAoO,KAAAQ,GAAAlD,GAAA6F,OAAA,SAAA5C,GAAA,QAAAW,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAG,eAAA,OAAA3O,KAAAsR,SAAA9C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA9C,IAAA8F,MAAA,SAAA/C,GAAA,QAAAa,EAAAtP,KAAA6O,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAAxO,KAAA6O,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA3B,EAAA0B,EAAAQ,WAAA,aAAAlC,EAAAzH,KAAA,KAAAoM,EAAA3E,EAAArB,IAAAsD,EAAAP,GAAA,OAAAiD,GAAA,UAAArE,MAAA,0BAAAsE,cAAA,SAAAxC,EAAAf,EAAAE,GAAA,OAAArO,KAAAsN,SAAA,CAAArD,SAAAgC,EAAAiD,GAAAf,aAAAE,WAAA,SAAArO,KAAAqM,SAAArM,KAAAyL,SAAAsC,GAAArC,IAAAjM,EAaA,IAsSeuZ,EArSN,SAAAnZ,GA4MP,SAAAmZ,EAAY7X,GAAO,IAAArB,EAaf,OAbeC,YAAAC,KAAAgZ,IACjBlZ,EAAAG,YAAAD,KAAAE,YAAA8Y,GAAA7Y,KAAAH,KAAMmB,KAhFR8X,YAAWxG,YAAApJ,IAAAwG,KAAG,SAAAqJ,IAAA,OAAA7P,IAAAsB,KAAA,SAAAwO,GAAA,cAAAA,EAAAzI,KAAAyI,EAAA/K,MAAA,cAAA+K,EAAAvL,OAAA,cAAuBG,IAAXqL,UAAoB,wBAAAD,EAAAvI,SAAAsI,MAAApZ,EAC9CqT,cAAaV,YAAApJ,IAAAwG,KAAG,SAAAwJ,IAAA,IAAAxR,EAAA+B,EAAA,OAAAP,IAAAsB,KAAA,SAAA2O,GAAA,cAAAA,EAAA5I,KAAA4I,EAAAlL,MAAA,WACVnL,OAAO4O,SAAQ,CAAAyH,EAAAlL,KAAA,gBAAAkL,EAAA5I,KAAA,EAAA4I,EAAAlL,KAAA,EAGOnL,OAAO4O,SAAS4F,SAAQ,OAK7C,OALK5P,EAAOyR,EAAA7L,KACP7D,EAAM,CACV2P,iBAAiB,EACjBC,OAAQ,GACR3R,QAASA,GACVyR,EAAA1L,OAAA,SACMhE,GAAG,cAAA0P,EAAA5I,KAAA,EAAA4I,EAAAtG,GAAAsG,EAAA,SAAAA,EAAA1L,OAAA,SAEH,CACL2L,iBAAiB,EACjBC,OAAQ,wEACT,QAAAF,EAAAlL,KAAA,wBAAAkL,EAAA1L,OAAA,SAGI,CACL2L,iBAAiB,EACjBC,OACE,gGACH,yBAAAF,EAAA1I,SAAAyI,EAAA,iBAEJvZ,EAEDkG,YAAc,SAACJ,GACb9F,EAAKmB,SAAS,CAAEwY,SAAS,IACzB3Z,EAAKM,MAAMsZ,UAAUC,QAClBC,QAAQ9Z,EAAKM,MAAMyZ,UAAUC,SAAUlU,GACvCmU,KAAK,CAAEC,KAAMla,EAAKM,MAAM4C,UACxBiX,GAAG,kBAAmB,SAACC,GACtBpa,EAAKM,MAAMyZ,UAAUF,QAClBQ,cAAcvU,GACdmU,KAAK,CAAEC,KAAMla,EAAKM,MAAM4C,UACxBiX,GAAG,kBAAmB,SAACC,GACtBpa,EAAKmB,SAAS,CAAEwY,SAAS,IACzBxW,OAAOuQ,SAASC,cAK1B3T,EACA8G,cAAgB,WACd9G,EAAKmB,SAAS,CAAEwY,SAAS,IACzB3Z,EAAKM,MAAMyZ,UAAUF,QAClB/S,gBACAmT,KAAK,CAAEC,KAAMla,EAAKM,MAAM4C,UACxBiX,GAAG,kBAAmB,SAACC,GACtBpa,EAAKmB,SAAS,CAAEwY,SAAS,IACzBxW,OAAOuQ,SAASC,YAItB3T,EACAsB,YAAc,WACZtB,EAAKmB,SAAS,CAAEwY,SAAS,IACzB3Z,EAAKM,MAAMyZ,UAAUF,QAClBvY,cACA2Y,KAAK,CAAEC,KAAMla,EAAKM,MAAM4C,UACxBiX,GAAG,kBAAmB,SAACC,GACtBpa,EAAKmB,SAAS,CAAEwY,SAAS,IACzBxW,OAAOuQ,SAASC,YAItB3T,EACA2F,YAAc,WACZ3F,EAAKmB,SAAS,CAAEwY,SAAS,IACzB3Z,EAAKM,MAAMyZ,UAAUF,QAClBlU,cACAsU,KAAK,CAAEC,KAAMla,EAAKM,MAAM4C,UACxBiX,GAAG,kBAAmB,SAACC,GACtBpa,EAAKmB,SAAS,CAAEwY,SAAS,IACzBxW,OAAOuQ,SAASC,YAOpB3T,EAAKM,MAAQ,CACX4C,QAAS,MACT0W,UAAW,GACXU,MAAO,GACPP,UAAW,GACX5S,YAAa,GACbb,iBAAkB,IAClB/C,kBAAmB,IACnBrB,eAAgB,IAChByX,SAAS,GACT3Z,EA0EH,OAnSMc,YAAAoY,EAAAnZ,GAAAgB,YAAAmY,EAAA,EAAAlY,IAAA,qBACPC,MAAA,eAAAsZ,EAAA5H,YAAApJ,IAAAwG,KAAA,SAAA6C,IAAA,OAAArJ,IAAAsB,KAAA,SAAAiI,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAxE,MAAA,cAAAwE,EAAAxE,KAAA,EAEQpO,KAAKsa,WAAU,cAAA1H,EAAAxE,KAAA,EACfpO,KAAKua,qBAAoB,wBAAA3H,EAAAhC,SAAA8B,EAAA1S,SAAA,yBAAAqa,EAAApH,MAAAjT,KAAAkT,YAHjC,IAMA,CAAApS,IAAA,WAAAC,MAAA,eAAAyZ,EAAA/H,YAAApJ,IAAAwG,KAAA,SAAAwD,IAAA,OAAAhK,IAAAsB,KAAA,SAAA2I,GAAA,cAAAA,EAAA5C,KAAA4C,EAAAlF,MAAA,WAGMnL,OAAO4O,SAAQ,CAAAyB,EAAAlF,KAAA,QACuB,OAAxCnL,OAAOC,KAAO,IAAIuX,IAAKxX,OAAO4O,UAAUyB,EAAAlF,KAAA,EAClCnL,OAAO4O,SAASgB,QAAQ,CAAExG,OAAQ,wBAAwB,OAAAiH,EAAAlF,KAAA,eAEvDnL,OAAOC,KAChBD,OAAOC,KAAO,IAAIuX,IAAKxX,OAAOC,KAAKwX,iBAEnC5H,QAAQC,IACN,uEAEH,wBAAAO,EAAA1C,SAAAyC,MAAA,yBAAAmH,EAAAvH,MAAAjT,KAAAkT,YAbH,IAgBA,CAAApS,IAAA,qBAAAC,MAAA,eAAA4Z,EAAAlI,YAAApJ,IAAAwG,KAAA,SAAA+K,IAAA,IAAA1X,EAAAyP,EAAAkI,EAAAC,EAAApB,EAAAtT,EAAA2U,EAAAX,EAAA/W,EAAA2X,EAAAnB,EAAA7X,EAAAiZ,EAAAzX,EAAAxD,KAAA,OAAAqJ,IAAAsB,KAAA,SAAAuQ,GAAA,cAAAA,EAAAxK,KAAAwK,EAAA9M,MAAA,OAE0B,OAAlBlL,EAAOD,OAAOC,KAAIgY,EAAA9M,KAAA,EACDlL,EAAKiY,IAAIC,cAAa,OAI7C,OAJMzI,EAAQuI,EAAAzN,KAEdzN,KAAKiB,SAAS,CAAE+B,QAAS2P,EAAS,KAElCuI,EAAA9M,KAAA,EACwBlL,EAAKiY,IAAIE,IAAIC,QAAO,OAGO,GAH7CT,EAASK,EAAAzN,OAGTqN,EAAgBS,EAAUC,SAASX,IACxB,CAAAK,EAAA9M,KAAA,SAKc,OAJvBsL,EAAY,IAAIxW,EAAKiY,IAAIM,SAC7BF,EAAUG,IACVZ,EAAcjT,SAEhB7H,KAAKiB,SAAS,CAAEyY,cAAawB,EAAA9M,KAAA,GACAsL,EAAUC,QACpCgC,UAAU3b,KAAKI,MAAM4C,SACrB7C,OAAM,QAFLiG,EAAgB8U,EAAAzN,KAGpBzN,KAAKiB,SAAS,CAAEmF,iBAAkBA,EAAiBN,aAAcoV,EAAA9M,KAAA,iBAEjEnL,OAAOsQ,MACL,8FACA,QAI4C,KAA1CwH,EAAiBa,EAAMJ,SAASX,IACpB,CAAAK,EAAA9M,KAAA,SAES,OADnBgM,EAAQ,IAAIlX,EAAKiY,IAAIM,SAASG,EAAMF,IAAKX,EAAelT,SAC9D7H,KAAKiB,SAAS,CAAEmZ,UAASc,EAAA9M,KAAA,GACKgM,EAAMT,QACjCgC,UAAU3b,KAAKI,MAAM4C,SACrB7C,OAAM,QAFLkD,EAAiB6X,EAAAzN,KAGrBzN,KAAKiB,SAAS,CAAEoC,kBAAmBA,EAAkByC,aAAcoV,EAAA9M,KAAA,iBAEnEnL,OAAOsQ,MACL,gGACA,QAI+C,KAA7CyH,EAAgBa,EAAUL,SAASX,IACxB,CAAAK,EAAA9M,KAAA,SAOf,OANMyL,EAAY,IAAI3W,EAAKiY,IAAIM,SAC7BI,EAAUH,IACVV,EAAcnT,SAEhB7H,KAAKiB,SAAS,CAAE4Y,cAEhBqB,EAAA9M,KAAA,GAC2ByL,EAAUF,QAClC3X,eAAehC,KAAKI,MAAM4C,SAC1B7C,OAAM,QAFL6B,EAAckZ,EAAAzN,KAGlBzN,KAAKiB,SAAS,CAAEe,eAAgBA,EAAe8D,aAG1B,eAAAiM,EAAAU,YAAApJ,IAAAwG,KAAG,SAAA+D,IAAA,IAAA4D,EAAAvQ,EAAA,OAAAoC,IAAAsB,KAAA,SAAAkJ,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAzF,MAAA,cAAAyF,EAAAnD,KAAA,EAAAmD,EAAAzF,KAAA,EAECyL,EAAUiC,cAAc,SAAU,CACrDC,UAAW,IACX,OAFIvE,EAAM3D,EAAApG,KAGNxG,EAAcuQ,EAAOjQ,IAAI,SAAChC,GAAK,MAAM,CACzCuC,OAAQvC,EAAMyW,aAAalU,OAC3BlC,OAAQL,EAAMyW,aAAapW,OAC3BuC,UAAW5C,EAAMyW,aAAa7T,aAEhC3E,EAAKvC,SAAS,CAAEgG,gBAChB6L,QAAQC,IAAI9L,GAAa4M,EAAAzF,KAAA,gBAAAyF,EAAAnD,KAAA,EAAAmD,EAAAb,GAAAa,EAAA,SAEzBf,QAAQC,IAAGc,EAAAb,IAAQ,yBAAAa,EAAAjD,SAAAgD,EAAA,iBAEtB,kBAfoB,OAAA7B,EAAAkB,MAAAjT,KAAAkT,YAAA,EAiBrB+I,IAGMhB,EAAepB,EAAUrC,OAAO0E,UACzBjC,GAAG,OAAQ,SAAC1U,GACvB,IAAM4W,EAAgB,CACpBrU,OAAQvC,EAAMyW,aAAalU,OAC3BlC,OAAQL,EAAMyW,aAAapW,OAC3BuC,UAAW5C,EAAMyW,aAAa7T,WAEhC3E,EAAKvC,SAAS,CACZgG,YAAW,GAAA3D,OAAAC,YAAMC,EAAKpD,MAAM6G,aAAW,CAAEkV,QAG7ClB,EAAamB,qBAGblB,EAAA9M,KAAA,iBAEAnL,OAAOsQ,MACL,qFACA,QAGJvT,KAAKiB,SAAS,CAAEwY,SAAS,IAAS,yBAAAyB,EAAAtK,SAAAgK,EAAA5a,SAAA,yBAAA2a,EAAA1H,MAAAjT,KAAAkT,YApGpC,MAwMArS,YAAAmY,EAAA,EAAAlY,IAAA,SAAAC,MAAA,WAGE,IAAIsb,EA2CJ,OAvCKA,EAFLrc,KAAKI,MAAMqZ,QAGLvX,IAAAC,cAAA,WACED,IAAAC,cAAA,OACE6C,MAAM,wBACN5C,MAAO,CACL2B,aAAc,QACdW,OAAQ,wBACRf,gBAAiB,0BACjBgB,eAAgB,eAChBX,UAAW,0CACXY,eAAgB,2BAChBC,gBAAiB,2BACjBC,kBAAmB,2BACnBC,iBAAkB,8BAGtB7C,IAAAC,cAAA,KAAGC,MAAO,CAAEC,MAAO,QAAS4B,OAAQ,MAAOL,QAAS,QAClD1B,IAAAC,cAACyU,EAAO,QAMZ1U,IAAAC,cAACI,EAAI,CACH6D,iBAAkBpG,KAAKI,MAAMgG,iBAC7B/C,kBAAmBrD,KAAKI,MAAMiD,kBAC9B2C,YAAahG,KAAKgG,YAClBY,cAAe5G,KAAK4G,cACpB0V,kBAAmBtc,KAAK6Z,UACxBzY,YAAapB,KAAKoB,YAClB+R,cAAenT,KAAKmT,cACpB1N,YAAazF,KAAKyF,YAClBzD,eAAgBhC,KAAKI,MAAM4B,eAC3Bua,QAASvc,KAAKuc,QACdvZ,QAAShD,KAAKI,MAAM4C,QACpBiE,YAAajH,KAAKI,MAAM6G,cAK9B/E,IAAAC,cAAA,OAAKY,UAAU,MAAMX,MAAO,CAAEoa,SAAU,aACtCta,IAAAC,cAAA,OAAKC,MAAO,CAAEoa,SAAU,aACtBta,IAAAC,cAAC8U,EAAgB,OAEnB/U,IAAAC,cAAC2P,EAAmB,KAClB5P,IAAAC,cAACiS,EAAO,OAEVlS,IAAAC,cAAA,OAAKY,UAAU,wBACbb,IAAAC,cAAA,OAAKY,UAAU,OACbb,IAAAC,cAAA,QACEsa,KAAK,OACL1Z,UAAU,8CACVX,MAAO,CAAE8B,SAAU,OAAQwY,UAAW,UAEtCxa,IAAAC,cAAA,WAAMka,KAGVna,IAAAC,cAAC8G,EAAM,YAId+P,EAnSM,CAAS1W,aCVlBqa,IAASC,OACP1a,IAAAC,cAACD,IAAM2a,WAAU,KACf3a,IAAAC,cAAC6W,EAAG,OAEN8D,SAASC,eAAe,6BCT1Bvd,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.88b574d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sym.657e054a.png\";","module.exports = __webpack_public_path__ + \"static/media/new_cool.c2ec8ddd.jpg\";","import React, { Component } from \"react\";\r\n\r\nclass Airdrop extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { time: {}, seconds: 60 }; // the airdrop will run 60 sec after staking.\r\n    this.timer = 0; // Initialize timer.\r\n    this.startTimer = this.startTimer.bind(this); // We bind this keyword (start time).\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  // Build startTimer functionality.\r\n  startTimer() {\r\n    if (this.timer === 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000); // 1000 --> take us down one seconds at a time.\r\n    }\r\n  }\r\n\r\n  // Build countdown functionallity.\r\n  countDown() {\r\n    // 1. countdown one second at a time.\r\n    let seconds = this.state.seconds - 1;\r\n\r\n    this.setState({\r\n      time: this.secondstoTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n\r\n    // 2. Stop counting when we hit zero.\r\n    if (seconds === 0) {\r\n      this.props.issueTokens();\r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  secondstoTime(secs) {\r\n    let hours, seconds, minutes;\r\n    hours = Math.floor(secs / (60 * 60));\r\n\r\n    let devisor_for_minutes = secs % (60 * 60);\r\n    minutes = Math.floor(devisor_for_minutes / 60);\r\n\r\n    let devisor_for_seconds = devisor_for_minutes % 60;\r\n    seconds = Math.ceil(devisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeftVar = this.secondstoTime(this.state.seconds);\r\n    this.setState({ time: timeLeftVar });\r\n  }\r\n\r\n  airdropReleaseTokens() {\r\n    let stakingB = this.props.stakingBalance;\r\n    if (stakingB >= \"1000000000000000000\") {\r\n      // If staking balance is more than 50 usdt, begin the airdrop of reward token.\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.airdropReleaseTokens();\r\n    return (\r\n      <div style={{ color: \"white\" }}>\r\n        {this.state.time.m}:{this.state.time.s}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Airdrop;\r\n","import React, { Component } from \"react\";\nimport tether from \"./images/sym.png\";\nimport Airdrop from \"./components/Airdrop.js\";\nimport { Card } from \"react-bootstrap\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction shortenAddress(address) {\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n}\n\nfunction convertToEther(amount) {\n  return amount / 10 ** 18;\n}\n\nfunction formatDate(timestamp) {\n  const date = new Date(timestamp * 1000);\n  const day = date\n    .getDate()\n    .toString()\n    .padStart(2, \"0\");\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const year = date.getFullYear();\n  const hours = date\n    .getHours()\n    .toString()\n    .padStart(2, \"0\");\n  const minutes = date\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = date\n    .getSeconds()\n    .toString()\n    .padStart(2, \"0\");\n  return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      historyList: [],\n      count: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.stakingBalance !== this.props.stakingBalance) {\n      let date = new Date().toLocaleString();\n      let count = this.state.count + 1;\n      let item = (\n        <li className=\"list-group-item\" key={count}>\n          <div className=\"row\">\n            <div className=\"col-sm-2\">\n              <strong>{count}.</strong>\n            </div>\n            <div className=\"col-sm-2\">\n              <strong>Account:</strong> {this.props.account}\n            </div>\n            <div className=\"col-sm-2\">\n              <strong>Staked:</strong>{\" \"}\n              {window.web3.utils.fromWei(this.props.stakingBalance, \"Ether\")}{\" \"}\n              mCred\n            </div>\n            <div className=\"col-sm-2\">\n              <strong>Gains:</strong>{\" \"}\n              {window.web3.utils.fromWei(this.props.gainsTokenBalance, \"Ether\")}{\" \"}\n              Gs\n            </div>\n            <div className=\"col-sm-4\">\n              <strong>Time:</strong> {date}\n            </div>\n          </div>\n        </li>\n      );\n      let historyList = [...this.state.historyList, item];\n      this.setState({ historyList, count });\n    }\n  }\n  render() {\n    const styles = {\n      body: {\n        backgroundColor: \"transparent\",\n        padding: \"0\",\n      },\n      carousel: {\n        backgroundColor: \"transparent\",\n      },\n      card: {\n        backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n        borderRadius: \"10px\",\n        boxShadow: \"0 0 10px rgba(0, 0, 0, 0.2)\",\n        margin: \"20px\",\n        maxWidth: \"400px\",\n      },\n      image: {\n        objectFit: \"cover\",\n        height: \"200px\",\n        borderRadius: \"10px 10px 0 0\",\n      },\n      title: {\n        fontSize: \"20px\",\n        fontWeight: \"bold\",\n        marginBottom: \"0\",\n      },\n    };\n\n    return (\n      <div>\n        {/* Card container for displaying the app message */}\n        <div\n          className=\"card mt-5 text-center\"\n          style={{\n            borderRadius: \".5rem\",\n            border: \"1px solid transparent\",\n            backgroundColor: \"rgba(137, 145, 211, .7)\",\n            backdropFilter: \"blur(0.2rem)\",\n            boxShadow: \"1.3rem 1.3rem 1.3rem rgba(0, 0, 0, 0.1)\",\n            borderTopColor: \"rgba(225, 225, 225, 0.5)\",\n            borderLeftColor: \"rgba(225, 225, 225, 0.5)\",\n            borderBottomColor: \"rgba(225, 225, 225, 0.1)\",\n            borderRightColor: \"rgba(225, 225, 225, 0.1)\",\n          }}\n        >\n          {/* Scrolling message */}\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col\">\n                <marquee behavior=\"scroll\" direction=\"left\" scrollamount=\"3\">\n                  <span class=\"font-weight-bold text-danger\">\n                    Click on the Documentation tab on the menu to understand how\n                    the app works\n                  </span>\n                </marquee>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main content container */}\n        <div id=\"content\" className=\"mt-5\">\n          {/* Claim USDT button */}\n          <button\n            type=\"submit\"\n            onClick={(event) => {\n              event.preventDefault(this.props.claimTokens());\n            }}\n            className=\"btn btn-outline-light btn-md btn-block btn-white-space nowrap tr\"\n          >\n            Claim mCred\n          </button>\n          &nbsp;&nbsp;\n          {/* Table displaying staking and reward balances */}\n          <table className=\"table text-muted text-center\">\n            <thead>\n              <tr style={{ color: \"white\" }}>\n                <th scope=\"col\">Staking Balance</th>\n                <th scope=\"col\">Gains Balance</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr style={{ color: \"white\" }}>\n                <td>\n                  {window.web3.utils.fromWei(\n                    this.props.stakingBalance,\n                    \"Ether\"\n                  ) + \" mCred\"}\n                </td>\n\n                <td>\n                  {/* Convert reward balance from Wei to RWD */}\n                  {window.web3.utils.fromWei(\n                    this.props.gainsTokenBalance,\n                    \"Ether\"\n                  )}{\" \"}\n                  Gs\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          {/* Form for staking tokens */}\n          <div\n            className=\"card mb-2\"\n            style={{\n              borderRadius: \".5rem\",\n              border: \"1px solid transparent\",\n              backgroundColor: \"rgba(137, 145, 211, .7)\",\n              backdropFilter: \"blur(0.2rem)\",\n              boxShadow: \"1.3rem 1.3rem 1.3rem rgba(0, 0, 0, 0.1)\",\n              borderTopColor: \"rgba(225, 225, 225, 0.5)\",\n              borderLeftColor: \"rgba(225, 225, 225, 0.5)\",\n\n              borderBottomColor: \"rgba(225, 225, 225, 0.1)\",\n              borderRightColor: \"rgba(225, 225, 225, 0.1)\",\n            }}\n          >\n            <form\n              // prevent the default form submission behavior and handle the submission manually\n              onSubmit={(event) => {\n                event.preventDefault();\n                let amount;\n                // get the value of the input field and convert it to Ether\n                amount = this.input.value.toString();\n                amount = window.web3.utils.toWei(amount, \"Ether\");\n                // call the stakeTokens function from props with the converted amount as argument\n                this.props.stakeTokens(amount);\n              }}\n              // add some margin at the bottom and set the width and padding of the container\n              className=\"mb-3\"\n            >\n              <div\n                style={{\n                  borderSpacing: \"0 1em\",\n                  width: \"100%\",\n                  padding: \"0 10px\",\n                }}\n              >\n                {/* display the balance of the token in the wallet */}\n                <span\n                  className=\"float-right\"\n                  style={{ color: \"white\", margin: \"8px\", marginRight: \"1px\" }}\n                >\n                  Balance:{\" \"}\n                  {window.web3.utils.fromWei(\n                    this.props.credtokenBalance,\n                    \"Ether\"\n                  )}\n                </span>\n                {/* input field for the amount of tokens to be staked */}\n                <div className=\"input-group mb-4 ml-0.6\">\n                  <input\n                    // assign a reference to the input element for later access\n                    ref={(input) => {\n                      this.input = input;\n                    }}\n                    type=\"number\"\n                    placeholder=\"0\"\n                    style={{\n                      border: \"1px solid azure\",\n                      borderRadius: \".2rem\",\n                    }}\n                    required\n                  />\n                  {/* display the token symbol next to the input field */}\n                  <div className=\"input-group-open\">\n                    <div\n                      className=\"input-group-text ml-1\"\n                      style={{\n                        backgroundColor: \"rgba(137, 145, 211, 0.38)\",\n                        cursor: \"pointer\",\n                        boxShadow: \"2px 3px 68px -46px rgba(0, 123, 255, 1)\",\n                        color: \"white\",\n                      }}\n                    >\n                      <img src={tether} alt=\"tether\" height=\"50\" width=\"50\" />\n                      &nbsp;&nbsp; mCred\n                    </div>\n                  </div>\n                </div>\n                {/* button for staking tokens */}\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary btn-lg btn-block btn-white-space nowrap\"\n                >\n                  Stake\n                </button>\n                {/* button for unstaking all tokens */}\n                <button\n                  type=\"submit\"\n                  onClick={(event) => {\n                    event.preventDefault(this.props.unstakeTokens());\n                  }}\n                  className=\"btn btn-primary btn-lg btn-block btn-white-space nowrap\"\n                >\n                  Unstake All\n                </button>\n              </div>\n            </form>\n            {/* display the Airdrop component for issuing tokens */}\n            <div className=\"card-body text-center\" style={{ color: \"white\" }}>\n              Airdrop\n              <Airdrop\n                stakingBalance={this.props.stakingBalance}\n                issueTokens={this.props.issueTokens}\n              />\n            </div>\n\n            {/* display the stake events as a carousel */}\n            <Card bg=\"transparent\" border=\"light\">\n              <Card.Header>\n                <h1>Stake Events</h1>\n              </Card.Header>\n              <Card.Body style={styles.body}>\n                {/* if there are stake events, display them in a carousel */}\n                {this.props.stakeEvents ? (\n                  <Carousel\n                    interval={5000}\n                    pause={false}\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\n                  >\n                    {this.props.stakeEvents.map((event, index) => (\n                      <Card\n                        key={index}\n                        style={{ ...styles.card, width: \"400px\" }}\n                      >\n                        <Card.Img\n                          variant=\"top\"\n                          src={`https://source.unsplash.com/500x300/?technology/${index}`}\n                          style={styles.image}\n                        />\n                        <Card.Body>\n                          <Card.Title style={styles.title}>\n                            {shortenAddress(event.staker)}\n                          </Card.Title>\n                          <Card.Text>\n                            Amount (ETH):{\" \"}\n                            {convertToEther(event.amount).toFixed(4)}\n                          </Card.Text>\n                          <Card.Text>\n                            Timestamp: {formatDate(event.timestamp)}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    ))}\n                  </Carousel>\n                ) : (\n                  <p>No stake events found.</p>\n                )}\n              </Card.Body>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\r\nimport bank from \"../images/neww.png\";\r\nimport samuelAvatar from \"../images/new_cool.jpg\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div className=\"container-fluid d-flex justify-content-center\">\r\n        {/* Logo */}\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          <img\r\n            src={bank}\r\n            width=\"110\"\r\n            height=\"40\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"bank\"\r\n          />\r\n        </a>\r\n        {/* Copyright */}\r\n        <div className=\"navbar-text text-white text-center\">\r\n          © 2023 Grandida Inc. All rights reserved. | Created by Sam Ale\r\n          {/* Samuel's Avatar */}\r\n          <img\r\n            src={samuelAvatar}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top rounded-circle ml-2\"\r\n            alt=\"Samuel's avatar\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n// Create a new context object for transactions\r\nexport const TransactionContext = React.createContext();\r\n\r\n// Destructure the ethereum object from the global window object\r\nconst { ethereum } = window;\r\n\r\n// Define a new component for the transaction provider\r\nexport const TransactionProvider = ({ children }) => {\r\n  \r\n  // Set up state to hold the current account\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  \r\n  // Define a function to check if the user has connected their wallet\r\n  const checkIfWalletIsConnect = async () => {\r\n    try {\r\n      // Call the `eth_accounts` method on the ethereum object to get the user's accounts\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n  \r\n      // If the user has at least one account, set the current account state\r\n      if (accounts.length) {\r\n        setCurrentAccount(accounts[0]);\r\n       \r\n      } else {\r\n        console.log(\"No accounts found\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  // Define a function to connect the user's wallet\r\n  const connectWallet = async () => {\r\n    try {\r\n      // If the ethereum object is not available, prompt the user to install MetaMask\r\n      if (!ethereum) return alert(\"Please install MetaMask.\");\r\n\r\n      // Call the `eth_requestAccounts` method on the ethereum object to request the user's accounts\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\r\n\r\n      // Set the current account state to the first account returned by the method\r\n      setCurrentAccount(accounts[0]);\r\n      // Reload the page to reflect the updated account information\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      // Throw an error if the ethereum object is not available\r\n      // throw new Error(\"No ethereum object\");\r\n    }\r\n  };\r\n  \r\n  // Define a function to disconnect the user's wallet\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      // Call the `wallet_requestPermissions` method on the ethereum object to request permission to access the user's accounts\r\n      await ethereum.request({\r\n        method: \"wallet_requestPermissions\",\r\n        params: [{ eth_accounts: {} }],\r\n      });\r\n  \r\n      // Remove the event listener for account changes\r\n      ethereum.off(\"accountsChanged\", handleAccountsChanged);\r\n      // Clear the current account state\r\n      setCurrentAccount(\"\");\r\n      // Reload the page to reflect the updated account information\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  // Define a function to handle changes in the user's accounts\r\n  const handleAccountsChanged = (accounts) => {\r\n    // If the user no longer has any accounts, clear the current account state\r\n    if (accounts.length === 0) {\r\n      setCurrentAccount(\"\");\r\n    } else {\r\n      // Otherwise, set the current account state to the first account returned by the method\r\n      setCurrentAccount(accounts[0]);\r\n    }\r\n  };\r\n  \r\n  // Set up an effect to check if the user has connected their wallet\r\n  useEffect(() => {\r\n    checkIfWalletIsConnect();\r\n  }, []);\r\n\r\n  // Render the TransactionContext provider component with the appropriate values\r\n  return (\r\n    <TransactionContext.Provider\r\n      value={{\r\n        connectWallet,\r\n        disconnectWallet,\r\n        currentAccount,\r\n      }}\r\n    >\r\n      {children}\r\n    </TransactionContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\r\nimport bank from \"../images/neww.png\";\r\nimport { shortenAddress } from \"../utils/shortenAddress\";\r\nimport { Button, Modal, Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport { TransactionContext } from \"../context/TransactionContext\";\r\n\r\nconst Connect = () => {\r\n  // Access the connectWallet, disconnectWallet, and currentAccount variables from the TransactionContext\r\n  const { connectWallet, disconnectWallet, currentAccount } = useContext(TransactionContext);\r\n\r\n  // Set up local state to manage the visibility of the documentation modal\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  // Set up local state to hold the current prices of cryptocurrencies\r\n  const [cryptoPrices, setCryptoPrices] = useState([]);\r\n\r\n  // Define a callback to disconnect the wallet that can be used in a useEffect hook\r\n  const disconnectWalletCallback = useCallback(() => {\r\n    disconnectWallet();\r\n  }, [disconnectWallet]);\r\n\r\n  // Fetch crypto prices from CoinGecko API and refresh every 10 seconds\r\n  useEffect(() => {\r\n    const fetchCryptoPrices = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,binancecoin,dogecoin&vs_currencies=usd\"\r\n        );\r\n        const data = await response.json();\r\n        setCryptoPrices(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    fetchCryptoPrices();\r\n    const intervalId = setInterval(fetchCryptoPrices, 10000); // Refresh prices every 10 seconds\r\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\r\n  }, []);\r\n\r\n  // Copy the user's wallet address to the clipboard and display a confirmation message on click\r\n  const handleAddressClick = () => {\r\n    navigator.clipboard.writeText(currentAccount);\r\n    alert(\"Address copied to clipboard!\");\r\n  };\r\n\r\n  return (\r\n    // Bootstrap Navbar component\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"shadow p-0\">\r\n      {/* Navbar brand */}\r\n      <Navbar.Brand href=\"/\" style={{ color: \"white\" }}>\r\n        <img\r\n          src={bank}\r\n          width=\"110\"\r\n          height=\"40\"\r\n          className=\"d-inline-block align-top\"\r\n          alt=\"bank\"\r\n        />\r\n      </Navbar.Brand>\r\n      {/* Navbar toggle button for mobile */}\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      {/* Navbar items */}\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\"></Nav>\r\n        <Nav>\r\n          {/* Documentation button that shows the modal */}\r\n          <Nav.Link>\r\n            <Button variant=\"link\" onClick={() => setShowModal(true)}>\r\n              Documentation\r\n            </Button>\r\n          </Nav.Link>\r\n          {/* Marquee displaying cryptocurrency prices */}\r\n          <Nav.Link>\r\n            {cryptoPrices && (\r\n              <marquee className=\"text-white\" behavior=\"scroll\" direction=\"left\" scrollamount=\"3\">\r\n                {Object.entries(cryptoPrices)\r\n                  .map(([key, value]) => `${key.toUpperCase()}: $${value.usd}`)\r\n                  .join(\" | \")}\r\n              </marquee>\r\n            )}\r\n          </Nav.Link>\r\n          {/* User's wallet address */}\r\n          <Nav.Link className=\"text-nowrap mr-3\">\r\n            <small style={{ color: \"white\", cursor: \"pointer\" }} onClick={handleAddressClick}>\r\n              Address: {shortenAddress(currentAccount)}\r\n            </small>\r\n          </Nav.Link>\r\n          {/* Connect/disconnect wallet buttons */}\r\n          <Nav.Link>\r\n            {!currentAccount && (\r\n              <Button onClick={connectWallet} variant=\"info\" size=\"sm\">\r\n                Connect Wallet\r\n              </Button>\r\n            )}\r\n            {currentAccount && (\r\n              <div className=\"d-flex\">\r\n                <Button variant=\"success\" size=\"sm\" disabled>\r\n                  Connected\r\n                </Button>\r\n                <Button onClick={disconnectWalletCallback} variant=\"danger\" size=\"sm\" className=\"ml-2\">\r\n                  Swap_Account\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Documentation</Modal.Title>\r\n        </Modal.Header>\r\n\r\n      \r\n      <Modal.Body>\r\n      <h1>About Credence</h1> {/* Heading for About page */}\r\n      <p>\r\n        Credence is a crypto staking app that allows users to earn rewards by\r\n        staking their cryptocurrency. Our platform uses a secure and reliable\r\n        system to ensure that your funds are always safe and accessible.\r\n      </p>\r\n      <p>\r\n        To participate, please make sure to follow these steps: {/* Steps to participate */}\r\n      </p>\r\n      <ol>\r\n        <li>Connect your MetaMask wallet to our platform if you are not already connected</li> {/* Step 1 */}\r\n        <li>We currently support live test network such as Mumbai</li> {/* Step 2 */}\r\n        <li>You can swap account on the test network and then refresh the page</li> {/* Step 3 */}\r\n        <li>Claim 50 mCred tokens for staking.</li> {/* Step 4 */}\r\n        <li>Stake your mCred tokens and wait for 1 minute.</li> {/* Step 5 */}\r\n        <li>While waiting, enjoy some particle interactions on our platform.</li> {/* Step 6 */}\r\n        <li>Once the timer ends, you will receive an airdrop of Gains tokens.</li> {/* Step 7 */}\r\n        <li>You can unstake your mCred tokens anytime you want.</li> {/* Step 8 */}\r\n        <li>Refresh the page after every transaction</li> {/* Step 9 */}\r\n      </ol>\r\n      <p>\r\n        Our team is dedicated to providing a seamless and user-friendly\r\n        experience for our customers. If you have any questions or feedback,\r\n        please feel free to contact us at support@credence.com. {/* Contact information */}\r\n      </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n\r\n</Navbar>\r\n);\r\n};\r\n\r\nexport default Connect;\r\n","export const shortenAddress = (address) => `${address.slice(0, 5)}...${address.slice(address.length - 4)}`;","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\n// Define a Spinner component that takes in three props: animationDuration, size, and color\r\nconst Spinner = ({ animationDuration, size, color }) => {\r\n  // Render a div with the class \"half-circle-spinner\"\r\n  return (\r\n    <div\r\n      className=\"half-circle-spinner\"\r\n      style={{\r\n        height: `${size}px`,\r\n        width: `${size}px`,\r\n        alignItems: `center`,\r\n      }}\r\n    >\r\n      {/* Render two nested divs with the classes \"circle\" and \"circle-1\" */}\r\n      <div\r\n        className=\"circle circle-1\"\r\n        style={{\r\n          borderWidth: `${size / 10}px`,\r\n          animationDuration: `${animationDuration}ms`,\r\n          borderTopColor: color,\r\n        }}\r\n      />\r\n      {/* Render two nested divs with the classes \"circle\" and \"circle-2\" */}\r\n      <div\r\n        className=\"circle circle-2\"\r\n        style={{\r\n          borderWidth: `${size / 10}px`,\r\n          animationDuration: `${animationDuration}ms`,\r\n          borderBottomColor: color,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Set default values for the Spinner component's props\r\nSpinner.defaultProps = {\r\n  animationDuration: 1000,\r\n  size: 50,\r\n  color: \"#fff\",\r\n};\r\n\r\n// Export the Spinner component as the default export of this module\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\nclass ParticleSettings extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Particles\r\n          height=\"1700px\"\r\n          width=\"1000vh\"\r\n          id=\"tsparticles\"\r\n          options={{\r\n            background: {\r\n              color: {\r\n                value: \"#340b70\",\r\n              },\r\n            },\r\n            fpslimit: 120,\r\n            interactivity: {\r\n              detect_on: \"canvas\",\r\n              events: {\r\n                onClick: {\r\n                  enable: \"true\",\r\n                  mode: \"push\",\r\n                },\r\n                onHover: {\r\n                  enable: \"true\",\r\n                  mode: \"repulse\",\r\n                },\r\n                resize: \"true\",\r\n              },\r\n              modes: {\r\n                bubble: {\r\n                  distance: 400,\r\n                  duration: 2,\r\n                  opacity: 0.8,\r\n                  size: 40,\r\n                },\r\n                push: {\r\n                  quantity: 4,\r\n                },\r\n                repulse: {\r\n                  distance: 180,\r\n                  duration: 0.4,\r\n                },\r\n              },\r\n            },\r\n            particles: {\r\n              color: {\r\n                value: \"#33ebf5\",\r\n              },\r\n              links: {\r\n                color: \"#ffffff\",\r\n                distance: 150,\r\n                enable: true,\r\n                opacity: 0.5,\r\n                width: 1,\r\n              },\r\n              collisions: {\r\n                enable: true,\r\n              },\r\n              move: {\r\n                direction: \"none\",\r\n                enable: true,\r\n                outMode: \"bounce\",\r\n                random: false,\r\n                speed: 2.5,\r\n                straight: false,\r\n              },\r\n              number: {\r\n                density: {\r\n                  enable: true,\r\n                  value_area: 800,\r\n                },\r\n                value: 19,\r\n              },\r\n              opacity: {\r\n                value: 1,\r\n              },\r\n              shape: {\r\n                type: \"circle\",\r\n              },\r\n              size: {\r\n                random: true,\r\n                value: 5,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ParticleSettings;\r\n","//Importing required libraries and components\nimport React, { Component } from \"react\";\nimport Main from \"./main.js\";\nimport Footer from \"./components/Footer\";\nimport Connect from \"./components/connect\";\nimport Spinner from \"./components/Spinner/Spinner.js\";\nimport Web3 from \"web3\";\nimport Gains from \"./utils/Gains.json\";\nimport CredToken from \"./utils/CredToken.json\";\nimport TokenFarm from \"./utils/TokenFarm.json\";\nimport ParticleSettings from \"./components/ParticleSettings.js\";\nimport { Signer } from \"crypto\";\nimport { TransactionProvider } from \"./context/TransactionContext.jsx\";\n\n//Defining the App component\nclass App extends Component {\n  //Function called before rendering, loads the Web3 instance and blockchain data\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  //Loads the Web3 instance\n  async loadWeb3() {\n    //Check if the browser has an Ethereum wallet (e.g. Metamask) installed\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      //await ethereum.send('eth_requestAccounts');\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.log(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  //Loads the blockchain data, including contracts and account balance\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    //Set the first account as the user's account\n    this.setState({ account: accounts[0] });\n\n    //Get the network ID of the current network\n    const networkId = await web3.eth.net.getId();\n\n    //Load Cred Token\n    const credtokenData = CredToken.networks[networkId];\n    if (credtokenData) {\n      const credtoken = new web3.eth.Contract(\n        CredToken.abi,\n        credtokenData.address\n      );\n      this.setState({ credtoken });\n      let credtokenBalance = await credtoken.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ credtokenBalance: credtokenBalance.toString() });\n    } else {\n      window.alert(\n        \"CredToken contract not deployed to current network. Please switch to a compatible network.\"\n      );\n    }\n\n    //Load Gains token\n    const gainsTokenData = Gains.networks[networkId];\n    if (gainsTokenData) {\n      const gains = new web3.eth.Contract(Gains.abi, gainsTokenData.address);\n      this.setState({ gains });\n      let gainsTokenBalance = await gains.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ gainsTokenBalance: gainsTokenBalance.toString() });\n    } else {\n      window.alert(\n        \"Gains Token contract not deployed to current network. Please switch to a compatible network.\"\n      );\n    }\n\n    //Load TokenFarm contract.\n    const tokenfarmData = TokenFarm.networks[networkId];\n    if (tokenfarmData) {\n      const tokenfarm = new web3.eth.Contract(\n        TokenFarm.abi,\n        tokenfarmData.address\n      );\n      this.setState({ tokenfarm });\n\n      // Load staking balance\n      let stakingBalance = await tokenfarm.methods\n        .stakingBalance(this.state.account)\n        .call();\n      this.setState({ stakingBalance: stakingBalance.toString() });\n\n      // Load staking events\n      const loadStakeEvents = async () => {\n        try {\n          const events = await tokenfarm.getPastEvents(\"Staked\", {\n            fromBlock: 0,\n          });\n          const stakeEvents = events.map((event) => ({\n            staker: event.returnValues.staker,\n            amount: event.returnValues.amount,\n            timestamp: event.returnValues.timestamp,\n          }));\n          this.setState({ stakeEvents });\n          console.log(stakeEvents);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n      loadStakeEvents();\n\n      // Listen for new stake events\n      const eventEmitter = tokenfarm.events.Staked();\n      eventEmitter.on(\"data\", (event) => {\n        const newStakeEvent = {\n          staker: event.returnValues.staker,\n          amount: event.returnValues.amount,\n          timestamp: event.returnValues.timestamp,\n        };\n        this.setState({\n          stakeEvents: [...this.state.stakeEvents, newStakeEvent],\n        });\n      });\n      eventEmitter.removeAllListeners();\n      // return () => {\n      // eventEmitter.removeAllListeners();\n      // };\n    } else {\n      window.alert(\n        \"TokenFarm not deployed to current network. Please switch to a compatible network.\"\n      );\n    }\n\n    this.setState({ loading: false });\n  }\n  isConnected = async () => Signer !== undefined;\n  connectWallet = async () => {\n    if (window.ethereum) {\n      //check if Metamask is installed\n      try {\n        const address = await window.ethereum.enable(); //connect Metamask\n        const obj = {\n          connectedStatus: true,\n          status: \"\",\n          address: address,\n        };\n        return obj;\n      } catch (error) {\n        return {\n          connectedStatus: false,\n          status: \"🦊 Connect to Metamask using the button on the top right.\",\n        };\n      }\n    } else {\n      return {\n        connectedStatus: false,\n        status:\n          \"🦊 You must install Metamask into your browser: https://metamask.io/download.html\",\n      };\n    }\n  };\n\n  stakeTokens = (amount) => {\n    this.setState({ loading: true });\n    this.state.credtoken.methods\n      .approve(this.state.tokenfarm._address, amount)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.state.tokenfarm.methods\n          .depositTokens(amount)\n          .send({ from: this.state.account })\n          .on(\"transactionHash\", (hash) => {\n            this.setState({ loading: false });\n            window.location.reload();\n          });\n      });\n  };\n\n  // This function is used to unstake tokens\n  unstakeTokens = () => {\n    this.setState({ loading: true });\n    this.state.tokenfarm.methods\n      .unstakeTokens()\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  // This function is used to issue tokens\n  issueTokens = () => {\n    this.setState({ loading: true });\n    this.state.tokenfarm.methods\n      .issueTokens()\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  // This function is used to claim tokens\n  claimTokens = () => {\n    this.setState({ loading: true });\n    this.state.tokenfarm.methods\n      .claimTokens()\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    // Initializes the component's state\n    this.state = {\n      account: \"0x0\",\n      credtoken: {},\n      gains: {},\n      tokenfarm: {},\n      stakeEvents: [],\n      credtokenBalance: \"0\",\n      gainsTokenBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true,\n    };\n  }\n\n  // The render function defines the rendering logic for the component.\n  // It returns different content depending on the loading state of the component.\n  // If loading is true, a spinner is displayed.\n  // Otherwise, the main content of the component is rendered.\n\n  render() {\n    let content;\n    // Determine what to display based on the loading state\n    this.state.loading\n      ? // Display a spinner if loading is true\n        (content = (\n          <div>\n            <div\n              class=\"card mt-5 text-center\"\n              style={{\n                borderRadius: \".5rem\",\n                border: \"1px solid transparent\",\n                backgroundColor: \"rgba(137, 145, 211, .7)\",\n                backdropFilter: \"blur(0.2rem)\",\n                boxShadow: \"1.3rem 1.3rem 1.3rem rgba(0, 0, 0, 0.1)\",\n                borderTopColor: \"rgba(225, 225, 225, 0.5)\",\n                borderLeftColor: \"rgba(225, 225, 225, 0.5)\",\n                borderBottomColor: \"rgba(225, 225, 225, 0.1)\",\n                borderRightColor: \"rgba(225, 225, 225, 0.1)\",\n              }}\n            ></div>\n            <p style={{ color: \"white\", margin: \"32%\", padding: \"14%\" }}>\n              <Spinner />\n            </p>\n          </div>\n        ))\n      : // Display the main content if loading is false\n        (content = (\n          <Main\n            credtokenBalance={this.state.credtokenBalance}\n            gainsTokenBalance={this.state.gainsTokenBalance}\n            stakeTokens={this.stakeTokens}\n            unstakeTokens={this.unstakeTokens}\n            tokenfarmContract={this.tokenfarm}\n            issueTokens={this.issueTokens}\n            connectWallet={this.connectWallet}\n            claimTokens={this.claimTokens}\n            stakingBalance={this.state.stakingBalance}\n            stakers={this.stakers}\n            account={this.state.account}\n            stakeEvents={this.state.stakeEvents}\n          />\n        ));\n\n    return (\n      <div className=\"App\" style={{ position: \"relative\" }}>\n        <div style={{ position: \"absolute\" }}>\n          <ParticleSettings />\n        </div>\n        <TransactionProvider>\n          <Connect />\n        </TransactionProvider>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main\n              role=\"main\"\n              className=\"col-lg-5 col-md-8 col-sm-10 ml-auto mr-auto\"\n              style={{ maxWidth: \"100%\", minHeight: \"100vh\" }}\n            >\n              <div>{content}</div>\n            </main>\n          </div>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\"; // Bring in Bootstrap.\r\nimport App from \"./App.js\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/neww.9cff63aa.png\";"],"sourceRoot":""}